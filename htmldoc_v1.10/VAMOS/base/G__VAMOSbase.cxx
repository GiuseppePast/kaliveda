//
// File generated by rootcint at Fri Jul 17 15:54:12 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__VAMOSbase
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__VAMOSbase.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void Random_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Random(void *p = 0);
   static void *newArray_Random(Long_t size, void *p);
   static void delete_Random(void *p);
   static void deleteArray_Random(void *p);
   static void destruct_Random(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::Random*)
   {
      ::Random *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Random >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Random", ::Random::Class_Version(), "/home/john/software/sources/kaliveda.git/VAMOS/base/Random.h", 8,
                  typeid(::Random), ::ROOT::DefineBehavior(ptr, ptr),
                  &::Random::Dictionary, isa_proxy, 4,
                  sizeof(::Random) );
      instance.SetNew(&new_Random);
      instance.SetNewArray(&newArray_Random);
      instance.SetDelete(&delete_Random);
      instance.SetDeleteArray(&deleteArray_Random);
      instance.SetDestructor(&destruct_Random);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::Random*)
   {
      return GenerateInitInstanceLocal((::Random*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Random*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void LogFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_LogFile(void *p = 0);
   static void *newArray_LogFile(Long_t size, void *p);
   static void delete_LogFile(void *p);
   static void deleteArray_LogFile(void *p);
   static void destruct_LogFile(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::LogFile*)
   {
      ::LogFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::LogFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("LogFile", ::LogFile::Class_Version(), "/home/john/software/sources/kaliveda.git/VAMOS/base/LogFile.h", 15,
                  typeid(::LogFile), ::ROOT::DefineBehavior(ptr, ptr),
                  &::LogFile::Dictionary, isa_proxy, 4,
                  sizeof(::LogFile) );
      instance.SetNew(&new_LogFile);
      instance.SetNewArray(&newArray_LogFile);
      instance.SetDelete(&delete_LogFile);
      instance.SetDeleteArray(&deleteArray_LogFile);
      instance.SetDestructor(&destruct_LogFile);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::LogFile*)
   {
      return GenerateInitInstanceLocal((::LogFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::LogFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr Random::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *Random::Class_Name()
{
   return "Random";
}

//______________________________________________________________________________
const char *Random::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Random*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Random::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::Random*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Random::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Random*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Random::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::Random*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr LogFile::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *LogFile::Class_Name()
{
   return "LogFile";
}

//______________________________________________________________________________
const char *LogFile::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::LogFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int LogFile::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::LogFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void LogFile::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::LogFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *LogFile::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::LogFile*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void LogFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class LogFile.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(LogFile::Class(),this);
   } else {
      R__b.WriteClassBuffer(LogFile::Class(),this);
   }
}

//______________________________________________________________________________
void LogFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class LogFile.
      TClass *R__cl = ::LogFile::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LogFileName", &LogFileName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Log", (void*)&Log);
      R__insp.InspectMember("ofstream", (void*)&Log, "Log.", false);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_LogFile(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LogFile : new ::LogFile;
   }
   static void *newArray_LogFile(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::LogFile[nElements] : new ::LogFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_LogFile(void *p) {
      delete ((::LogFile*)p);
   }
   static void deleteArray_LogFile(void *p) {
      delete [] ((::LogFile*)p);
   }
   static void destruct_LogFile(void *p) {
      typedef ::LogFile current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::LogFile

//______________________________________________________________________________
void Random::Streamer(TBuffer &R__b)
{
   // Stream an object of class Random.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(Random::Class(),this);
   } else {
      R__b.WriteClassBuffer(Random::Class(),this);
   }
}

//______________________________________________________________________________
void Random::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Random.
      TClass *R__cl = ::Random::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Array", &Array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*Ptr", &Ptr);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_Random(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Random : new ::Random;
   }
   static void *newArray_Random(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::Random[nElements] : new ::Random[nElements];
   }
   // Wrapper around operator delete
   static void delete_Random(void *p) {
      delete ((::Random*)p);
   }
   static void deleteArray_Random(void *p) {
      delete [] ((::Random*)p);
   }
   static void destruct_Random(void *p) {
      typedef ::Random current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::Random

/********************************************************
* G__VAMOSbase.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__VAMOSbase();

extern "C" void G__set_cpp_environmentG__VAMOSbase() {
  G__cpp_reset_tagtableG__VAMOSbase();
}
#include <new>
extern "C" int G__cpp_dllrevG__VAMOSbase() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Random */
static int G__G__VAMOSbase_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Random* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Random[n];
     } else {
       p = new((void*) gvp) Random[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Random;
     } else {
       p = new((void*) gvp) Random;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Random*) G__getstructoffset())->Next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((Random*) G__getstructoffset())->Value());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Random::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Random::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Random::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Random::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const Random*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Random*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Random*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Random*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Random::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Random::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Random::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Random::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__VAMOSbase_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Random* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Random(*(Random*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Random G__TRandom;
static int G__G__VAMOSbase_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Random*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Random*) (soff+(sizeof(Random)*i)))->~G__TRandom();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Random*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Random*) (soff))->~G__TRandom();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__VAMOSbase_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Random* dest = (Random*) G__getstructoffset();
   *dest = *(Random*) libp->para[0].ref;
   const Random& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* LogFile */
static int G__G__VAMOSbase_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   LogFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LogFile[n];
     } else {
       p = new((void*) gvp) LogFile[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new LogFile;
     } else {
       p = new((void*) gvp) LogFile;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__VAMOSbaseLN_LogFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LogFile*) G__getstructoffset())->Open((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LogFile*) G__getstructoffset())->Close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LogFile*) G__getstructoffset())->Message((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         string* pobj;
         string xobj = ((LogFile*) G__getstructoffset())->GetTime();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) LogFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LogFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) LogFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      LogFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const LogFile*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LogFile*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LogFile*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((LogFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LogFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LogFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) LogFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__VAMOSbase_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) LogFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef LogFile G__TLogFile;
static int G__G__VAMOSbase_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (LogFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((LogFile*) (soff+(sizeof(LogFile)*i)))->~G__TLogFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (LogFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((LogFile*) (soff))->~G__TLogFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Random */

/* LogFile */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__VAMOSbase {
 public:
  G__Sizep2memfuncG__VAMOSbase(): p(&G__Sizep2memfuncG__VAMOSbase::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__VAMOSbase::*p)();
};

size_t G__get_sizep2memfuncG__VAMOSbase()
{
  G__Sizep2memfuncG__VAMOSbase a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__VAMOSbase() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__VAMOSbase() {

   /* Setting up typedef entry */
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__VAMOSbaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__VAMOSbaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__VAMOSbaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__VAMOSbaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__VAMOSbaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__VAMOSbaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Random */
static void G__setup_memvarRandom(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random));
   { Random *p; p=(Random*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"Array=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"Ptr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* LogFile */
static void G__setup_memvarLogFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__VAMOSbaseLN_LogFile));
   { LogFile *p; p=(LogFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->LogFileName)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"LogFileName=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Log)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,1,"Log=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__VAMOSbaseLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__VAMOSbase() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRandom(void) {
   /* Random */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random));
   G__memfunc_setup("Random",609,G__G__VAMOSbase_168_0_1, 105, G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Next",415,G__G__VAMOSbase_168_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Value",509,G__G__VAMOSbase_168_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__VAMOSbase_168_0_4, 85, G__get_linked_tagnum(&G__G__VAMOSbaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Random::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__VAMOSbase_168_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Random::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__VAMOSbase_168_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Random::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__VAMOSbase_168_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Random::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__VAMOSbase_168_0_8, 85, G__get_linked_tagnum(&G__G__VAMOSbaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__VAMOSbase_168_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__VAMOSbase_168_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__VAMOSbase_168_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__VAMOSbase_168_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Random::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__VAMOSbase_168_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Random::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__VAMOSbase_168_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Random::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__VAMOSbase_168_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Random::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Random", 609, G__G__VAMOSbase_168_0_16, (int) ('i'), G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random), -1, 0, 1, 1, 1, 0, "u 'Random' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Random", 735, G__G__VAMOSbase_168_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__VAMOSbase_168_0_18, (int) ('u'), G__get_linked_tagnum(&G__G__VAMOSbaseLN_Random), -1, 1, 1, 1, 1, 0, "u 'Random' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncLogFile(void) {
   /* LogFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__VAMOSbaseLN_LogFile));
   G__memfunc_setup("LogFile",674,G__G__VAMOSbase_170_0_1, 105, G__get_linked_tagnum(&G__G__VAMOSbaseLN_LogFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Open",402,G__G__VAMOSbase_170_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - LogFileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Close",502,G__G__VAMOSbase_170_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Message",709,G__G__VAMOSbase_170_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - location C - - 10 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTime",687,G__G__VAMOSbase_170_0_5, 117, G__get_linked_tagnum(&G__G__VAMOSbaseLN_string), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__VAMOSbase_170_0_6, 85, G__get_linked_tagnum(&G__G__VAMOSbaseLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&LogFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__VAMOSbase_170_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LogFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__VAMOSbase_170_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&LogFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__VAMOSbase_170_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&LogFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__VAMOSbase_170_0_10, 85, G__get_linked_tagnum(&G__G__VAMOSbaseLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__VAMOSbase_170_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__VAMOSbase_170_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__VAMOSbase_170_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__VAMOSbase_170_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LogFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__VAMOSbase_170_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LogFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__VAMOSbase_170_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&LogFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__VAMOSbase_170_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&LogFile::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~LogFile", 800, G__G__VAMOSbase_170_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__VAMOSbase() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__VAMOSbase() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__VAMOSbase() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__VAMOSbaseLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_Random = { "Random" , 99 , -1 };
G__linked_taginfo G__G__VAMOSbaseLN_LogFile = { "LogFile" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__VAMOSbase() {
  G__G__VAMOSbaseLN_TClass.tagnum = -1 ;
  G__G__VAMOSbaseLN_TBuffer.tagnum = -1 ;
  G__G__VAMOSbaseLN_TMemberInspector.tagnum = -1 ;
  G__G__VAMOSbaseLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__VAMOSbaseLN_string.tagnum = -1 ;
  G__G__VAMOSbaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__VAMOSbaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__VAMOSbaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__VAMOSbaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__VAMOSbaseLN_Random.tagnum = -1 ;
  G__G__VAMOSbaseLN_LogFile.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__VAMOSbase() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_string);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_Random),sizeof(Random),-1,263424,(char*)NULL,G__setup_memvarRandom,G__setup_memfuncRandom);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__VAMOSbaseLN_LogFile),sizeof(LogFile),-1,263424,(char*)NULL,G__setup_memvarLogFile,G__setup_memfuncLogFile);
}
extern "C" void G__cpp_setupG__VAMOSbase(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__VAMOSbase()");
  G__set_cpp_environmentG__VAMOSbase();
  G__cpp_setup_tagtableG__VAMOSbase();

  G__cpp_setup_inheritanceG__VAMOSbase();

  G__cpp_setup_typetableG__VAMOSbase();

  G__cpp_setup_memvarG__VAMOSbase();

  G__cpp_setup_memfuncG__VAMOSbase();
  G__cpp_setup_globalG__VAMOSbase();
  G__cpp_setup_funcG__VAMOSbase();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__VAMOSbase();
  return;
}
class G__cpp_setup_initG__VAMOSbase {
  public:
    G__cpp_setup_initG__VAMOSbase() { G__add_setup_func("G__VAMOSbase",(G__incsetup)(&G__cpp_setupG__VAMOSbase)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__VAMOSbase() { G__remove_setup_func("G__VAMOSbase"); }
};
G__cpp_setup_initG__VAMOSbase G__cpp_setup_initializerG__VAMOSbase;

