#!/usr/bin/env bash
# -*- sh-indentation: 3 -*-
# 
# Do not modify this file. It will be regenerated by ./configure
# This script returns the machine dependent compile options needed
# to compile and link applications using the KaliVeda libraries.
#
# Based on root-config.in by:
# Author: Fons Rademakers, 06/06/99

get_lib_list()
{
   # fill $lib_list with all installed libraries
   # we look for 'lib*.so' symbolic links
   # we check that it points to an existing file
   #
   # $1 = KVMultiDet etc.
   # $2 = /usr/lib etc.
   tmp3=""
   unset lib_list
   tmp=`find $2 -name 'lib'$1'*.so'`
   #echo $tmp
   for file in $tmp
   do
   	#echo $file
      if [ -e "$file" ]; then
   	   tmp2=`basename $file .so`
         #echo $tmp2
   	   tmp3="$tmp2 $tmp3"
   	fi
   done   
	lib_list=`echo $tmp3 | sed 's/lib'$1'/-l'$1'/g'`
}

readlink=readlink
if [ `uname` = "AIX" ]; then
   readlink=echo
fi

# work around readlink versions not having -f option
fullpath1=`$readlink $0`
if [ "$?" -ne "0" ]; then
   fullpath1=$0
else
   if [ ${fullpath1##/} = $fullpath1 ] && [ ${fullpath1##~} = $fullpath1 ]; then
      # relative path, prepend directory where executable was found
      lpath=`dirname $0`
      fullpath1=$lpath/$fullpath1
   fi
fi
progdir=`dirname $fullpath1`
runningdir=`pwd`
if [ ${progdir##/} != $progdir ] || [ ${progdir##~} != $progdir ]; then
   # absolute path
   fullpath=$progdir
else
   # relative path
   if [ $progdir != "." ]; then
      fullpath=$runningdir/$progdir
   else
      fullpath=$runningdir
   fi
fi
# work around readlink versions not having -f option
fullpath1=`$readlink $fullpath`
if [ "$?" -ne "0" ]; then
   fullpath1=$fullpath
fi

VERSION="1.10/02"
libdir=/home/john/.kvroot-1.10_gcc-4.9.2_x86_64_root-6.04/lib
incdir=/home/john/.kvroot-1.10_gcc-4.9.2_x86_64_root-6.04/include/kaliveda
bindir=/home/john/.kvroot-1.10_gcc-4.9.2_x86_64_root-6.04/bin
#features= ""
get_lib_list KVMultiDet "$libdir"
multidetlibs="$lib_list"
get_lib_list BackTrack "$libdir"
backtracklibs="$lib_list"
get_lib_list KVIndra $libdir
indralibs="$lib_list"
get_lib_list VAMOS $libdir
vamoslibs=$lib_list
get_lib_list FAZIA $libdir
fazialibs=$lib_list
libs="$fazialibs $vamoslibs $indralibs $backtracklibs $multidetlibs"

usage="\
Usage: `basename $0` [--version] [--libs] [--incdir] [--libdir] [--bindir] [--help]"

if test $# -eq 0; then
   echo "${usage}" 1>&2
   exit 1
fi

out=""

while test $# -gt 0; do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *)    optarg= ;;
  esac

  case $1 in
    --has-*)
      ### Check for feature
      f=`echo $1 | sed 's/--has-//'`
      for c in $features ; do
         if test "x$c" = "x$f" ; then
            out="$out yes"
            break
         fi
         c=""
      done
      if test "x$c" = "x" ; then
         out="$out no"
      fi
      ;;
    --version)
      ### Output the version number.
      out="$out $VERSION"
      ;;
    --bindir)
      ### output the executable directory
      out="$out $bindir"
      ;;
    --libdir)
      ### output the library directory
      out="$out $libdir"
      ;;
    --incdir)
      ### output the header directory
      out="$out $incdir"
      ;;
    --libs)
      ### output all libraries for linking
      out="$out $libs"
      ;;
    --help)
      ### Print a help message
      echo "Usage: `basename $0` [options]"
      echo ""
      echo "  --version             Print the KaliVeda version"
      echo "  --bindir              Print the executable directory"
      echo "  --libdir              Print the library directory"
      echo "  --incdir              Print the header directory"
      echo "  --libs                Print linker directives for all libraries"
      echo "  --help                Print this message"
      exit 0
      ;;
    *)
      ### Give an error
      echo "Unknown argument \"$1\"!" 1>&2
      echo "${usage}" 1>&2
      exit 1
      ;;
  esac
  shift
done

### Output the stuff
echo $out
