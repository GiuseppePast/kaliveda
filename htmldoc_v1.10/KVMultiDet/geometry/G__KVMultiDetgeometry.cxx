//
// File generated by rootcint at Fri Jul 17 15:50:24 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__KVMultiDetgeometry
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__KVMultiDetgeometry.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void KVDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVDetector(void *p = 0);
   static void *newArray_KVDetector(Long_t size, void *p);
   static void delete_KVDetector(void *p);
   static void deleteArray_KVDetector(void *p);
   static void destruct_KVDetector(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVDetector*)
   {
      ::KVDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVDetector", ::KVDetector::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVDetector.h", 46,
                  typeid(::KVDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVDetector::Dictionary, isa_proxy, 4,
                  sizeof(::KVDetector) );
      instance.SetNew(&new_KVDetector);
      instance.SetNewArray(&newArray_KVDetector);
      instance.SetDelete(&delete_KVDetector);
      instance.SetDeleteArray(&deleteArray_KVDetector);
      instance.SetDestructor(&destruct_KVDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVDetector*)
   {
      return GenerateInitInstanceLocal((::KVDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVACQParam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVACQParam(void *p = 0);
   static void *newArray_KVACQParam(Long_t size, void *p);
   static void delete_KVACQParam(void *p);
   static void deleteArray_KVACQParam(void *p);
   static void destruct_KVACQParam(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVACQParam*)
   {
      ::KVACQParam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVACQParam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVACQParam", ::KVACQParam::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVACQParam.h", 28,
                  typeid(::KVACQParam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVACQParam::Dictionary, isa_proxy, 4,
                  sizeof(::KVACQParam) );
      instance.SetNew(&new_KVACQParam);
      instance.SetNewArray(&newArray_KVACQParam);
      instance.SetDelete(&delete_KVACQParam);
      instance.SetDeleteArray(&deleteArray_KVACQParam);
      instance.SetDestructor(&destruct_KVACQParam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVACQParam*)
   {
      return GenerateInitInstanceLocal((::KVACQParam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVACQParam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVGeoDetectorNode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVGeoDetectorNode(void *p = 0);
   static void *newArray_KVGeoDetectorNode(Long_t size, void *p);
   static void delete_KVGeoDetectorNode(void *p);
   static void deleteArray_KVGeoDetectorNode(void *p);
   static void destruct_KVGeoDetectorNode(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVGeoDetectorNode*)
   {
      ::KVGeoDetectorNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVGeoDetectorNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVGeoDetectorNode", ::KVGeoDetectorNode::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVGeoDetectorNode.h", 12,
                  typeid(::KVGeoDetectorNode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVGeoDetectorNode::Dictionary, isa_proxy, 4,
                  sizeof(::KVGeoDetectorNode) );
      instance.SetNew(&new_KVGeoDetectorNode);
      instance.SetNewArray(&newArray_KVGeoDetectorNode);
      instance.SetDelete(&delete_KVGeoDetectorNode);
      instance.SetDeleteArray(&deleteArray_KVGeoDetectorNode);
      instance.SetDestructor(&destruct_KVGeoDetectorNode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVGeoDetectorNode*)
   {
      return GenerateInitInstanceLocal((::KVGeoDetectorNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVGeoDetectorNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVGeoStrucElement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVGeoStrucElement(void *p = 0);
   static void *newArray_KVGeoStrucElement(Long_t size, void *p);
   static void delete_KVGeoStrucElement(void *p);
   static void deleteArray_KVGeoStrucElement(void *p);
   static void destruct_KVGeoStrucElement(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVGeoStrucElement*)
   {
      ::KVGeoStrucElement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVGeoStrucElement >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVGeoStrucElement", ::KVGeoStrucElement::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVGeoStrucElement.h", 12,
                  typeid(::KVGeoStrucElement), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVGeoStrucElement::Dictionary, isa_proxy, 4,
                  sizeof(::KVGeoStrucElement) );
      instance.SetNew(&new_KVGeoStrucElement);
      instance.SetNewArray(&newArray_KVGeoStrucElement);
      instance.SetDelete(&delete_KVGeoStrucElement);
      instance.SetDeleteArray(&deleteArray_KVGeoStrucElement);
      instance.SetDestructor(&destruct_KVGeoStrucElement);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVGeoStrucElement*)
   {
      return GenerateInitInstanceLocal((::KVGeoStrucElement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVGeoStrucElement*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVGroup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVGroup(void *p = 0);
   static void *newArray_KVGroup(Long_t size, void *p);
   static void delete_KVGroup(void *p);
   static void deleteArray_KVGroup(void *p);
   static void destruct_KVGroup(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVGroup*)
   {
      ::KVGroup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVGroup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVGroup", ::KVGroup::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVGroup.h", 13,
                  typeid(::KVGroup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVGroup::Dictionary, isa_proxy, 4,
                  sizeof(::KVGroup) );
      instance.SetNew(&new_KVGroup);
      instance.SetNewArray(&newArray_KVGroup);
      instance.SetDelete(&delete_KVGroup);
      instance.SetDeleteArray(&deleteArray_KVGroup);
      instance.SetDestructor(&destruct_KVGroup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVGroup*)
   {
      return GenerateInitInstanceLocal((::KVGroup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVGroup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVCalibrator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVCalibrator(void *p);
   static void deleteArray_KVCalibrator(void *p);
   static void destruct_KVCalibrator(void *p);
   static void streamer_KVCalibrator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVCalibrator*)
   {
      ::KVCalibrator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVCalibrator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVCalibrator", ::KVCalibrator::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVCalibrator.h", 27,
                  typeid(::KVCalibrator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVCalibrator::Dictionary, isa_proxy, 1,
                  sizeof(::KVCalibrator) );
      instance.SetDelete(&delete_KVCalibrator);
      instance.SetDeleteArray(&deleteArray_KVCalibrator);
      instance.SetDestructor(&destruct_KVCalibrator);
      instance.SetStreamerFunc(&streamer_KVCalibrator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVCalibrator*)
   {
      return GenerateInitInstanceLocal((::KVCalibrator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVCalibrator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVLayer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVLayer(void *p = 0);
   static void *newArray_KVLayer(Long_t size, void *p);
   static void delete_KVLayer(void *p);
   static void deleteArray_KVLayer(void *p);
   static void destruct_KVLayer(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVLayer*)
   {
      ::KVLayer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVLayer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVLayer", ::KVLayer::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVLayer.h", 24,
                  typeid(::KVLayer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVLayer::Dictionary, isa_proxy, 4,
                  sizeof(::KVLayer) );
      instance.SetNew(&new_KVLayer);
      instance.SetNewArray(&newArray_KVLayer);
      instance.SetDelete(&delete_KVLayer);
      instance.SetDeleteArray(&deleteArray_KVLayer);
      instance.SetDestructor(&destruct_KVLayer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVLayer*)
   {
      return GenerateInitInstanceLocal((::KVLayer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVLayer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTelescope_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTelescope(void *p = 0);
   static void *newArray_KVTelescope(Long_t size, void *p);
   static void delete_KVTelescope(void *p);
   static void deleteArray_KVTelescope(void *p);
   static void destruct_KVTelescope(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTelescope*)
   {
      ::KVTelescope *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTelescope >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTelescope", ::KVTelescope::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVTelescope.h", 32,
                  typeid(::KVTelescope), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTelescope::Dictionary, isa_proxy, 4,
                  sizeof(::KVTelescope) );
      instance.SetNew(&new_KVTelescope);
      instance.SetNewArray(&newArray_KVTelescope);
      instance.SetDelete(&delete_KVTelescope);
      instance.SetDeleteArray(&deleteArray_KVTelescope);
      instance.SetDestructor(&destruct_KVTelescope);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTelescope*)
   {
      return GenerateInitInstanceLocal((::KVTelescope*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTelescope*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVGeoNavigator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVGeoNavigator(void *p);
   static void deleteArray_KVGeoNavigator(void *p);
   static void destruct_KVGeoNavigator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVGeoNavigator*)
   {
      ::KVGeoNavigator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVGeoNavigator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVGeoNavigator", ::KVGeoNavigator::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVGeoNavigator.h", 20,
                  typeid(::KVGeoNavigator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVGeoNavigator::Dictionary, isa_proxy, 4,
                  sizeof(::KVGeoNavigator) );
      instance.SetDelete(&delete_KVGeoNavigator);
      instance.SetDeleteArray(&deleteArray_KVGeoNavigator);
      instance.SetDestructor(&destruct_KVGeoNavigator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVGeoNavigator*)
   {
      return GenerateInitInstanceLocal((::KVGeoNavigator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVGeoNavigator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVRangeTableGeoNavigator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVRangeTableGeoNavigator(void *p);
   static void deleteArray_KVRangeTableGeoNavigator(void *p);
   static void destruct_KVRangeTableGeoNavigator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVRangeTableGeoNavigator*)
   {
      ::KVRangeTableGeoNavigator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVRangeTableGeoNavigator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVRangeTableGeoNavigator", ::KVRangeTableGeoNavigator::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVRangeTableGeoNavigator.h", 11,
                  typeid(::KVRangeTableGeoNavigator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVRangeTableGeoNavigator::Dictionary, isa_proxy, 4,
                  sizeof(::KVRangeTableGeoNavigator) );
      instance.SetDelete(&delete_KVRangeTableGeoNavigator);
      instance.SetDeleteArray(&deleteArray_KVRangeTableGeoNavigator);
      instance.SetDestructor(&destruct_KVRangeTableGeoNavigator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVRangeTableGeoNavigator*)
   {
      return GenerateInitInstanceLocal((::KVRangeTableGeoNavigator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVRangeTableGeoNavigator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVASGroup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVASGroup(void *p = 0);
   static void *newArray_KVASGroup(Long_t size, void *p);
   static void delete_KVASGroup(void *p);
   static void deleteArray_KVASGroup(void *p);
   static void destruct_KVASGroup(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVASGroup*)
   {
      ::KVASGroup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVASGroup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVASGroup", ::KVASGroup::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVASGroup.h", 11,
                  typeid(::KVASGroup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVASGroup::Dictionary, isa_proxy, 4,
                  sizeof(::KVASGroup) );
      instance.SetNew(&new_KVASGroup);
      instance.SetNewArray(&newArray_KVASGroup);
      instance.SetDelete(&delete_KVASGroup);
      instance.SetDeleteArray(&deleteArray_KVASGroup);
      instance.SetDestructor(&destruct_KVASGroup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVASGroup*)
   {
      return GenerateInitInstanceLocal((::KVASGroup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVASGroup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVRing_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVRing(void *p = 0);
   static void *newArray_KVRing(Long_t size, void *p);
   static void delete_KVRing(void *p);
   static void deleteArray_KVRing(void *p);
   static void destruct_KVRing(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVRing*)
   {
      ::KVRing *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVRing >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVRing", ::KVRing::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/geometry/KVRing.h", 32,
                  typeid(::KVRing), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVRing::Dictionary, isa_proxy, 4,
                  sizeof(::KVRing) );
      instance.SetNew(&new_KVRing);
      instance.SetNewArray(&newArray_KVRing);
      instance.SetDelete(&delete_KVRing);
      instance.SetDeleteArray(&deleteArray_KVRing);
      instance.SetDestructor(&destruct_KVRing);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVRing*)
   {
      return GenerateInitInstanceLocal((::KVRing*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVRing*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr KVDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVDetector::Class_Name()
{
   return "KVDetector";
}

//______________________________________________________________________________
const char *KVDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVACQParam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVACQParam::Class_Name()
{
   return "KVACQParam";
}

//______________________________________________________________________________
const char *KVACQParam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVACQParam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVACQParam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVACQParam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVACQParam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVACQParam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVACQParam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVACQParam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVGeoDetectorNode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVGeoDetectorNode::Class_Name()
{
   return "KVGeoDetectorNode";
}

//______________________________________________________________________________
const char *KVGeoDetectorNode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoDetectorNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVGeoDetectorNode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoDetectorNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVGeoDetectorNode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoDetectorNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVGeoDetectorNode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoDetectorNode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVGeoStrucElement::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVGeoStrucElement::Class_Name()
{
   return "KVGeoStrucElement";
}

//______________________________________________________________________________
const char *KVGeoStrucElement::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoStrucElement*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVGeoStrucElement::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoStrucElement*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVGeoStrucElement::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoStrucElement*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVGeoStrucElement::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoStrucElement*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVGroup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVGroup::Class_Name()
{
   return "KVGroup";
}

//______________________________________________________________________________
const char *KVGroup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGroup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVGroup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGroup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVGroup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGroup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVGroup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGroup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVCalibrator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVCalibrator::Class_Name()
{
   return "KVCalibrator";
}

//______________________________________________________________________________
const char *KVCalibrator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVCalibrator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVCalibrator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVCalibrator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVCalibrator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVCalibrator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVCalibrator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVCalibrator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVLayer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVLayer::Class_Name()
{
   return "KVLayer";
}

//______________________________________________________________________________
const char *KVLayer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVLayer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVLayer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVLayer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVLayer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVLayer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVLayer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVLayer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTelescope::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTelescope::Class_Name()
{
   return "KVTelescope";
}

//______________________________________________________________________________
const char *KVTelescope::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTelescope*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTelescope::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTelescope*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTelescope::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTelescope*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTelescope::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTelescope*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVGeoNavigator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVGeoNavigator::Class_Name()
{
   return "KVGeoNavigator";
}

//______________________________________________________________________________
const char *KVGeoNavigator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoNavigator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVGeoNavigator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoNavigator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVGeoNavigator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoNavigator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVGeoNavigator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVGeoNavigator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVRangeTableGeoNavigator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVRangeTableGeoNavigator::Class_Name()
{
   return "KVRangeTableGeoNavigator";
}

//______________________________________________________________________________
const char *KVRangeTableGeoNavigator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVRangeTableGeoNavigator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVRangeTableGeoNavigator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVRangeTableGeoNavigator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVRangeTableGeoNavigator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVRangeTableGeoNavigator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVRangeTableGeoNavigator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVRangeTableGeoNavigator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVASGroup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVASGroup::Class_Name()
{
   return "KVASGroup";
}

//______________________________________________________________________________
const char *KVASGroup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVASGroup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVASGroup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVASGroup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVASGroup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVASGroup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVASGroup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVASGroup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVRing::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVRing::Class_Name()
{
   return "KVRing";
}

//______________________________________________________________________________
const char *KVRing::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVRing*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVRing::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVRing*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVRing::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVRing*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVRing::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVRing*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void KVACQParam::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVACQParam.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVACQParam::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVACQParam::Class(),this);
   }
}

//______________________________________________________________________________
void KVACQParam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVACQParam.
      TClass *R__cl = ::KVACQParam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChannel", &fChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDet", &fDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPied", &fPied);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaPied", &fDeltaPied);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWorks", &fWorks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbBits", &fNbBits);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVACQParam(void *p) {
      return  p ? new(p) ::KVACQParam : new ::KVACQParam;
   }
   static void *newArray_KVACQParam(Long_t nElements, void *p) {
      return p ? new(p) ::KVACQParam[nElements] : new ::KVACQParam[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVACQParam(void *p) {
      delete ((::KVACQParam*)p);
   }
   static void deleteArray_KVACQParam(void *p) {
      delete [] ((::KVACQParam*)p);
   }
   static void destruct_KVACQParam(void *p) {
      typedef ::KVACQParam current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVACQParam

//______________________________________________________________________________
void KVCalibrator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVCalibrator.
      TClass *R__cl = ::KVCalibrator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParamNumber", &fParamNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPar", &fPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetector", &fDetector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReady", &fReady);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVCalibrator(void *p) {
      delete ((::KVCalibrator*)p);
   }
   static void deleteArray_KVCalibrator(void *p) {
      delete [] ((::KVCalibrator*)p);
   }
   static void destruct_KVCalibrator(void *p) {
      typedef ::KVCalibrator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVCalibrator(TBuffer &buf, void *obj) {
      ((::KVCalibrator*)obj)->::KVCalibrator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVCalibrator

//______________________________________________________________________________
void KVDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVDetector.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVDetector::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVDetector::Class(),this);
   }
}

//______________________________________________________________________________
void KVDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVDetector.
      TClass *R__cl = ::KVDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEWPosition", &fEWPosition);
      R__insp.InspectMember(fEWPosition, "fEWPosition.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParentStrucList", &fParentStrucList);
      R__insp.InspectMember(fParentStrucList, "fParentStrucList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNode", &fNode);
      R__insp.InspectMember(fNode, "fNode.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActiveLayer", &fActiveLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIDTelescopes", &fIDTelescopes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIDTelAlign", &fIDTelAlign);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIDTele4Ident", &fIDTele4Ident);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdentP", &fIdentP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUnidentP", &fUnidentP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFName", &fFName);
      R__insp.InspectMember(fFName, "fFName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalibrators", &fCalibrators);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fACQParams", &fACQParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParticles", &fParticles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAbsorbers", &fAbsorbers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSegment", &fSegment);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGain", &fGain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalWarning", &fCalWarning);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotThickness", &fTotThickness);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDepthInTelescope", &fDepthInTelescope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredMask", &fFiredMask);
      R__insp.InspectMember(fFiredMask, "fFiredMask.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fELossF", &fELossF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEResF", &fEResF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRangeF", &fRangeF);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEResforEinc", &fEResforEinc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fAlignedDetectors[2]", &fAlignedDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSimMode", &fSimMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPresent", &fPresent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetecting", &fDetecting);
      KVMaterial::ShowMembers(R__insp);
      KVPosition::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVDetector(void *p) {
      return  p ? new(p) ::KVDetector : new ::KVDetector;
   }
   static void *newArray_KVDetector(Long_t nElements, void *p) {
      return p ? new(p) ::KVDetector[nElements] : new ::KVDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVDetector(void *p) {
      delete ((::KVDetector*)p);
   }
   static void deleteArray_KVDetector(void *p) {
      delete [] ((::KVDetector*)p);
   }
   static void destruct_KVDetector(void *p) {
      typedef ::KVDetector current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVDetector

//______________________________________________________________________________
void KVTelescope::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTelescope.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVTelescope::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVTelescope::Class(),this);
   }
}

//______________________________________________________________________________
void KVTelescope::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTelescope.
      TClass *R__cl = ::KVTelescope::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNdets", &fNdets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDepth", &fDepth);
      KVGeoStrucElement::ShowMembers(R__insp);
      KVPosition::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTelescope(void *p) {
      return  p ? new(p) ::KVTelescope : new ::KVTelescope;
   }
   static void *newArray_KVTelescope(Long_t nElements, void *p) {
      return p ? new(p) ::KVTelescope[nElements] : new ::KVTelescope[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTelescope(void *p) {
      delete ((::KVTelescope*)p);
   }
   static void deleteArray_KVTelescope(void *p) {
      delete [] ((::KVTelescope*)p);
   }
   static void destruct_KVTelescope(void *p) {
      typedef ::KVTelescope current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVTelescope

//______________________________________________________________________________
void KVGroup::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVGroup.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVGroup::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVGroup::Class(),this);
   }
}

//______________________________________________________________________________
void KVGroup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVGroup.
      TClass *R__cl = ::KVGroup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReconstructedNuclei", &fReconstructedNuclei);
      KVGeoStrucElement::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVGroup(void *p) {
      return  p ? new(p) ::KVGroup : new ::KVGroup;
   }
   static void *newArray_KVGroup(Long_t nElements, void *p) {
      return p ? new(p) ::KVGroup[nElements] : new ::KVGroup[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVGroup(void *p) {
      delete ((::KVGroup*)p);
   }
   static void deleteArray_KVGroup(void *p) {
      delete [] ((::KVGroup*)p);
   }
   static void destruct_KVGroup(void *p) {
      typedef ::KVGroup current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVGroup

//______________________________________________________________________________
void KVASGroup::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVASGroup.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVASGroup::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVASGroup::Class(),this);
   }
}

//______________________________________________________________________________
void KVASGroup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVASGroup.
      TClass *R__cl = ::KVASGroup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNumberOfLayers", &fNumberOfLayers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLayNumMin", &fLayNumMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLayNumMax", &fLayNumMax);
      KVGroup::ShowMembers(R__insp);
      KVPosition::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVASGroup(void *p) {
      return  p ? new(p) ::KVASGroup : new ::KVASGroup;
   }
   static void *newArray_KVASGroup(Long_t nElements, void *p) {
      return p ? new(p) ::KVASGroup[nElements] : new ::KVASGroup[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVASGroup(void *p) {
      delete ((::KVASGroup*)p);
   }
   static void deleteArray_KVASGroup(void *p) {
      delete [] ((::KVASGroup*)p);
   }
   static void destruct_KVASGroup(void *p) {
      typedef ::KVASGroup current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVASGroup

//______________________________________________________________________________
void KVLayer::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVLayer.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVLayer::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVLayer::Class(),this);
   }
}

//______________________________________________________________________________
void KVLayer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVLayer.
      TClass *R__cl = ::KVLayer::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVGeoStrucElement::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVLayer(void *p) {
      return  p ? new(p) ::KVLayer : new ::KVLayer;
   }
   static void *newArray_KVLayer(Long_t nElements, void *p) {
      return p ? new(p) ::KVLayer[nElements] : new ::KVLayer[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVLayer(void *p) {
      delete ((::KVLayer*)p);
   }
   static void deleteArray_KVLayer(void *p) {
      delete [] ((::KVLayer*)p);
   }
   static void destruct_KVLayer(void *p) {
      typedef ::KVLayer current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVLayer

//______________________________________________________________________________
void KVRing::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVRing.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVRing::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVRing::Class(),this);
   }
}

//______________________________________________________________________________
void KVRing::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVRing.
      TClass *R__cl = ::KVRing::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVGeoStrucElement::ShowMembers(R__insp);
      KVPosition::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVRing(void *p) {
      return  p ? new(p) ::KVRing : new ::KVRing;
   }
   static void *newArray_KVRing(Long_t nElements, void *p) {
      return p ? new(p) ::KVRing[nElements] : new ::KVRing[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVRing(void *p) {
      delete ((::KVRing*)p);
   }
   static void deleteArray_KVRing(void *p) {
      delete [] ((::KVRing*)p);
   }
   static void destruct_KVRing(void *p) {
      typedef ::KVRing current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVRing

//______________________________________________________________________________
void KVGeoNavigator::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVGeoNavigator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVGeoNavigator::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVGeoNavigator::Class(),this);
   }
}

//______________________________________________________________________________
void KVGeoNavigator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVGeoNavigator.
      TClass *R__cl = ::KVGeoNavigator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeometry", &fGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentVolume", &fCurrentVolume);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentNode", &fCurrentNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentDetectorNode", &fCurrentDetectorNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentMatrix", &fCurrentMatrix);
      R__insp.InspectMember(fCurrentMatrix, "fCurrentMatrix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentPath", &fCurrentPath);
      R__insp.InspectMember(fCurrentPath, "fCurrentPath.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentStructures", &fCurrentStructures);
      R__insp.InspectMember(fCurrentStructures, "fCurrentStructures.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurStrucNumber", &fCurStrucNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMotherNode", &fMotherNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStepSize", &fStepSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntryPoint", &fEntryPoint);
      R__insp.InspectMember(fEntryPoint, "fEntryPoint.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExitPoint", &fExitPoint);
      R__insp.InspectMember(fExitPoint, "fExitPoint.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStopPropagation", &fStopPropagation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrucNameFmt", &fStrucNameFmt);
      R__insp.InspectMember(fStrucNameFmt, "fStrucNameFmt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetNameFmt", &fDetNameFmt);
      R__insp.InspectMember(fDetNameFmt, "fDetNameFmt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDetStrucNameCorrespList", &fDetStrucNameCorrespList);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVGeoNavigator(void *p) {
      delete ((::KVGeoNavigator*)p);
   }
   static void deleteArray_KVGeoNavigator(void *p) {
      delete [] ((::KVGeoNavigator*)p);
   }
   static void destruct_KVGeoNavigator(void *p) {
      typedef ::KVGeoNavigator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVGeoNavigator

//______________________________________________________________________________
void KVRangeTableGeoNavigator::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVRangeTableGeoNavigator.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVRangeTableGeoNavigator::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVRangeTableGeoNavigator::Class(),this);
   }
}

//______________________________________________________________________________
void KVRangeTableGeoNavigator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVRangeTableGeoNavigator.
      TClass *R__cl = ::KVRangeTableGeoNavigator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRangeTable", &fRangeTable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutOffEnergy", &fCutOffEnergy);
      KVGeoNavigator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVRangeTableGeoNavigator(void *p) {
      delete ((::KVRangeTableGeoNavigator*)p);
   }
   static void deleteArray_KVRangeTableGeoNavigator(void *p) {
      delete [] ((::KVRangeTableGeoNavigator*)p);
   }
   static void destruct_KVRangeTableGeoNavigator(void *p) {
      typedef ::KVRangeTableGeoNavigator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVRangeTableGeoNavigator

//______________________________________________________________________________
void KVGeoDetectorNode::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVGeoDetectorNode.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVGeoDetectorNode::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVGeoDetectorNode::Class(),this);
   }
}

//______________________________________________________________________________
void KVGeoDetectorNode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVGeoDetectorNode.
      TClass *R__cl = ::KVGeoDetectorNode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInFront", &fInFront);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBehind", &fBehind);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVGeoDetectorNode(void *p) {
      return  p ? new(p) ::KVGeoDetectorNode : new ::KVGeoDetectorNode;
   }
   static void *newArray_KVGeoDetectorNode(Long_t nElements, void *p) {
      return p ? new(p) ::KVGeoDetectorNode[nElements] : new ::KVGeoDetectorNode[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVGeoDetectorNode(void *p) {
      delete ((::KVGeoDetectorNode*)p);
   }
   static void deleteArray_KVGeoDetectorNode(void *p) {
      delete [] ((::KVGeoDetectorNode*)p);
   }
   static void destruct_KVGeoDetectorNode(void *p) {
      typedef ::KVGeoDetectorNode current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVGeoDetectorNode

//______________________________________________________________________________
void KVGeoStrucElement::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVGeoStrucElement.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVGeoStrucElement::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVGeoStrucElement::Class(),this);
   }
}

//______________________________________________________________________________
void KVGeoStrucElement::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVGeoStrucElement.
      TClass *R__cl = ::KVGeoStrucElement::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetectors", &fDetectors);
      R__insp.InspectMember(fDetectors, "fDetectors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStructures", &fStructures);
      R__insp.InspectMember(fStructures, "fStructures.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParentStrucList", &fParentStrucList);
      R__insp.InspectMember(fParentStrucList, "fParentStrucList.");
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVGeoStrucElement(void *p) {
      return  p ? new(p) ::KVGeoStrucElement : new ::KVGeoStrucElement;
   }
   static void *newArray_KVGeoStrucElement(Long_t nElements, void *p) {
      return p ? new(p) ::KVGeoStrucElement[nElements] : new ::KVGeoStrucElement[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVGeoStrucElement(void *p) {
      delete ((::KVGeoStrucElement*)p);
   }
   static void deleteArray_KVGeoStrucElement(void *p) {
      delete [] ((::KVGeoStrucElement*)p);
   }
   static void destruct_KVGeoStrucElement(void *p) {
      typedef ::KVGeoStrucElement current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVGeoStrucElement

/********************************************************
* G__KVMultiDetgeometry.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__KVMultiDetgeometry();

extern "C" void G__set_cpp_environmentG__KVMultiDetgeometry() {
  G__cpp_reset_tagtableG__KVMultiDetgeometry();
}
#include <new>
extern "C" int G__cpp_dllrevG__KVMultiDetgeometry() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* KVDetector */
static int G__G__KVMultiDetgeometry_345_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDetector[n];
     } else {
       p = new((void*) gvp) KVDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDetector;
     } else {
       p = new((void*) gvp) KVDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDetector((const Char_t*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) KVDetector((const Char_t*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDetector((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KVDetector((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVDetector(*(KVDetector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVDetector(*(KVDetector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->AddAbsorber((KVMaterial*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetActiveLayer((KVMaterial*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetActiveLayer((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetAbsorber((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetAbsorber((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetListOfAbsorbers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVDetector*) G__getstructoffset())->GetArrayName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVDetector*) G__getstructoffset())->GetDepthInTelescope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetTotalThicknessInCM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVDetector*) G__getstructoffset())->GetMaterialName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetGain((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVDetector*) G__getstructoffset())->GetGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetEnergy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetCorrectedEnergy((KVNucleus*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetCorrectedEnergy((KVNucleus*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetCorrectedEnergy((KVNucleus*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((KVDetector*) G__getstructoffset())->FindZmin((Double_t) G__double(libp->para[0]), (Char_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((KVDetector*) G__getstructoffset())->FindZmin((Double_t) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((KVDetector*) G__getstructoffset())->FindZmin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->AddACQParam((KVACQParam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetACQParam((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetACQParamList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KVDetector*) G__getstructoffset())->GetACQData((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((KVDetector*) G__getstructoffset())->GetPedestal((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetPedestal((const Char_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVDetector*) G__getstructoffset())->AddCalibrator((KVCalibrator*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetCalibrator((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetCalibrator((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetListOfCalibrators());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->IsCalibrated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->AddHit((KVNucleus*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->ClearHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVDetector*) G__getstructoffset())->GetNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 114, (long) ((const KVDetector*) G__getstructoffset())->GetSegment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetSegment((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVDetector*) G__getstructoffset())->IsAnalysed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->SetAnalysed((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->SetAnalysed();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((KVDetector*) G__getstructoffset())->Fired((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((KVDetector*) G__getstructoffset())->Fired());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((KVDetector*) G__getstructoffset())->FiredP((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((KVDetector*) G__getstructoffset())->FiredP());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetACQParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetCalibrators();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->RemoveCalibrators();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->AddIDTelescope((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetIDTelescopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetAlignedIDTelescopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetTelescopesForIdentification());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->IncrementUnidentifiedParticles((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->IncrementUnidentifiedParticles();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->IncrementIdentifiedParticles((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->IncrementIdentifiedParticles();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->BelongsToUnidentifiedParticle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->BelongsToIdentifiedParticle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVDetector::MakeDetector((const Char_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetGeoVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->AddToGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->GetVerticesInOwnFrame((TVector3*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetEntranceWindowSurfaceArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetFiredBitmask(*(KVString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Binary8_t* pobj;
         const Binary8_t xobj = ((const KVDetector*) G__getstructoffset())->GetFiredBitmask();
         pobj = new Binary8_t(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVDetector*) G__getstructoffset())->GetFiredACQParameterListFormatString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const KVDetector*) G__getstructoffset())->GetCalcACQParam((KVACQParam*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetTotalDeltaE((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->DrawPunchThroughEnergyVsZ((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->DrawPunchThroughEnergyVsZ());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->DrawPunchThroughEsurAVsZ((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->DrawPunchThroughEsurAVsZ());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetEResFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetELossFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetRangeFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDetector*) G__getstructoffset())->GetSmallestEmaxValid((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetEResAfterDetector((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVDetector*) G__getstructoffset())->GetEResAfterDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->ReadDefinitionFromFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetAlignedDetectors((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((KVDetector*) G__getstructoffset())->GetAlignedDetectors());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->ResetAlignedDetectors((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->ResetAlignedDetectors();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->SetSimMode((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->SetSimMode();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->IsSimMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->IsPresent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->SetPresent((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->SetPresent();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->IsDetecting());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVDetector*) G__getstructoffset())->SetDetecting((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->SetDetecting();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVDetector*) G__getstructoffset())->IsOK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVDetector*) G__getstructoffset())->DeduceACQParameters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVDetector*) G__getstructoffset())->DeduceACQParameters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDetector*) G__getstructoffset())->DeduceACQParameters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((KVDetector*) G__getstructoffset())->GetGroupNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->AddParentStructure((KVGeoStrucElement*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->RemoveParentStructure((KVGeoStrucElement*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetParentStructure((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetParentStructure((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetActiveLayerMatrix((TGeoHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetActiveLayerShape((TGeoBBox*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetActiveLayerMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetActiveLayerShape());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetEntranceWindowMatrix((TGeoHMatrix*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->SetEntranceWindowShape((TGeoBBox*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetEntranceWindowMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDetector*) G__getstructoffset())->GetEntranceWindowShape());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const KVDetector*) G__getstructoffset())->GetRandomPointOnEntranceWindow();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3* pobj;
         const TVector3 xobj = ((const KVDetector*) G__getstructoffset())->GetCentreOfEntranceWindow();
         pobj = new TVector3(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVPosition& obj = ((const KVDetector*) G__getstructoffset())->GetEntranceWindow();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_136(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_137(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_138(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_139(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_345_0_140(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVDetector G__TKVDetector;
static int G__G__KVMultiDetgeometry_345_0_141(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVDetector*) (soff+(sizeof(KVDetector)*i)))->~G__TKVDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVDetector*) (soff))->~G__TKVDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVACQParam */
static int G__G__KVMultiDetgeometry_346_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVACQParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVACQParam[n];
     } else {
       p = new((void*) gvp) KVACQParam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVACQParam;
     } else {
       p = new((void*) gvp) KVACQParam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVACQParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVACQParam((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVACQParam((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVACQParam* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVACQParam(*(KVACQParam*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVACQParam(*(KVACQParam*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->SetDetector((KVDetector*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVACQParam*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((KVACQParam*) G__getstructoffset())->ConnectData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->SetData((UShort_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const KVACQParam*) G__getstructoffset())->GetCoderData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const KVACQParam*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const KVACQParam*) G__getstructoffset())->Fired((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const KVACQParam*) G__getstructoffset())->Fired());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->SetPedestal((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const KVACQParam*) G__getstructoffset())->GetPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->SetDeltaPedestal((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const KVACQParam*) G__getstructoffset())->GetDeltaPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 82, (long) ((KVACQParam*) G__getstructoffset())->GetDataAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVACQParam*) G__getstructoffset())->IsWorking());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVACQParam*) G__getstructoffset())->SetWorking((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVACQParam*) G__getstructoffset())->SetWorking();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->SetNbBits((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const KVACQParam*) G__getstructoffset())->GetNbBits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->UseInternalDataMember();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVACQParam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVACQParam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVACQParam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVACQParam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVACQParam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVACQParam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVACQParam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVACQParam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_346_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVACQParam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVACQParam G__TKVACQParam;
static int G__G__KVMultiDetgeometry_346_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVACQParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVACQParam*) (soff+(sizeof(KVACQParam)*i)))->~G__TKVACQParam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVACQParam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVACQParam*) (soff))->~G__TKVACQParam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetgeometry_346_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVACQParam* dest = (KVACQParam*) G__getstructoffset();
   *dest = *(KVACQParam*) libp->para[0].ref;
   const KVACQParam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVGeoDetectorNode */
static int G__G__KVMultiDetgeometry_352_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGeoDetectorNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGeoDetectorNode[n];
     } else {
       p = new((void*) gvp) KVGeoDetectorNode[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGeoDetectorNode;
     } else {
       p = new((void*) gvp) KVGeoDetectorNode;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGeoDetectorNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVGeoDetectorNode((const Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVGeoDetectorNode((const Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoDetectorNode*) G__getstructoffset())->AddInFront((KVDetector*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoDetectorNode*) G__getstructoffset())->AddBehind((KVDetector*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVGeoDetectorNode*) G__getstructoffset())->IsInFrontOf((KVDetector*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVGeoDetectorNode*) G__getstructoffset())->IsBehind((KVDetector*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoDetectorNode*) G__getstructoffset())->GetDetectorsInFront());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoDetectorNode*) G__getstructoffset())->GetDetectorsBehind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVGeoDetectorNode*) G__getstructoffset())->GetNDetsInFront());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVGeoDetectorNode*) G__getstructoffset())->GetNDetsBehind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoDetectorNode*) G__getstructoffset())->RehashLists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVGeoDetectorNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoDetectorNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVGeoDetectorNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVGeoDetectorNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoDetectorNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoDetectorNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGeoDetectorNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoDetectorNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_352_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGeoDetectorNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetgeometry_352_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVGeoDetectorNode* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVGeoDetectorNode(*(KVGeoDetectorNode*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVGeoDetectorNode G__TKVGeoDetectorNode;
static int G__G__KVMultiDetgeometry_352_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVGeoDetectorNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVGeoDetectorNode*) (soff+(sizeof(KVGeoDetectorNode)*i)))->~G__TKVGeoDetectorNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVGeoDetectorNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVGeoDetectorNode*) (soff))->~G__TKVGeoDetectorNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetgeometry_352_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGeoDetectorNode* dest = (KVGeoDetectorNode*) G__getstructoffset();
   *dest = *(KVGeoDetectorNode*) libp->para[0].ref;
   const KVGeoDetectorNode& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVGeoStrucElement */
static int G__G__KVMultiDetgeometry_353_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGeoStrucElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGeoStrucElement[n];
     } else {
       p = new((void*) gvp) KVGeoStrucElement[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGeoStrucElement;
     } else {
       p = new((void*) gvp) KVGeoStrucElement;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGeoStrucElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGeoStrucElement((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) KVGeoStrucElement((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGeoStrucElement((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KVGeoStrucElement((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->SetOwnsDaughters((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->SetOwnsDaughters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->SetOwnsDetectors((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->SetOwnsDetectors();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->Sort((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->Sort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->SortStructures((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->SortStructures();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->SortDetectors((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->SortDetectors();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->ClearDetectors((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->ClearDetectors();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoStrucElement*) G__getstructoffset())->ClearStructures((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoStrucElement*) G__getstructoffset())->ClearStructures();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoStrucElement*) G__getstructoffset())->Add((KVBase*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoStrucElement*) G__getstructoffset())->Remove((KVBase*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVGeoStrucElement*) G__getstructoffset())->Contains((KVBase*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetStructure((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetStructure((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetStructure((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetStructureTypeList((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetDetector((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetDetectorByType((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetDetectorTypeList((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVGeoStrucElement*) G__getstructoffset())->GetDetectorAny((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetDetectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetStructures());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetParents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((const KVGeoStrucElement*) G__getstructoffset())->Fired((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((const KVGeoStrucElement*) G__getstructoffset())->Fired());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetParentStructure((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((const KVGeoStrucElement*) G__getstructoffset())->GetParentStructure((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVGeoStrucElement::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoStrucElement::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVGeoStrucElement::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVGeoStrucElement::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoStrucElement*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoStrucElement::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGeoStrucElement::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoStrucElement::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_353_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGeoStrucElement::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVGeoStrucElement G__TKVGeoStrucElement;
static int G__G__KVMultiDetgeometry_353_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVGeoStrucElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVGeoStrucElement*) (soff+(sizeof(KVGeoStrucElement)*i)))->~G__TKVGeoStrucElement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVGeoStrucElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVGeoStrucElement*) (soff))->~G__TKVGeoStrucElement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVGroup */
static int G__G__KVMultiDetgeometry_354_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGroup[n];
     } else {
       p = new((void*) gvp) KVGroup[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVGroup;
     } else {
       p = new((void*) gvp) KVGroup;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((KVGroup*) G__getstructoffset())->GetNumberOfDetectorLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVGroup*) G__getstructoffset())->GetDetectorsInLayer((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((KVGroup*) G__getstructoffset())->GetAlignedDetectors((KVDetector*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((KVGroup*) G__getstructoffset())->GetAlignedDetectors((KVDetector*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((KVGroup*) G__getstructoffset())->GetHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->ClearHitDetectors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVGroup*) G__getstructoffset())->GetParticles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->AddHit((KVNucleus*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->RemoveHit((KVNucleus*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVGroup*) G__getstructoffset())->IsRemoving());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->Sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->CountLayers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVGroup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGroup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVGroup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVGroup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGroup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGroup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGroup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGroup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_354_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGroup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVGroup G__TKVGroup;
static int G__G__KVMultiDetgeometry_354_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVGroup*) (soff+(sizeof(KVGroup)*i)))->~G__TKVGroup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVGroup*) (soff))->~G__TKVGroup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVCalibrator */
static int G__G__KVMultiDetgeometry_355_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVCalibrator*) G__getstructoffset())->GetNumberParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->SetNumberParams((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVCalibrator*) G__getstructoffset())->GetParameter((UShort_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVCalibrator*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVCalibrator*) G__getstructoffset())->GetDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->SetParameter((UShort_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->SetDetector((KVDetector*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->SetNameFromDetector();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->SetStatus((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("SetParameters: more than 56 var args\n");
   }
      ((KVCalibrator*) G__getstructoffset())->SetParameters((Double_t) G__double(libp->para[0]), dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[1], lval[2], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVCalibrator*) G__getstructoffset())->Compute((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVCalibrator*) G__getstructoffset())->operator()((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVCalibrator*) G__getstructoffset())->Invert((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((const KVCalibrator*) G__getstructoffset())->MakeGraph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((const KVCalibrator*) G__getstructoffset())->MakeGraph((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVCalibrator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVCalibrator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVCalibrator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVCalibrator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVCalibrator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVCalibrator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVCalibrator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVCalibrator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_355_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVCalibrator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVCalibrator G__TKVCalibrator;
static int G__G__KVMultiDetgeometry_355_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVCalibrator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVCalibrator*) (soff+(sizeof(KVCalibrator)*i)))->~G__TKVCalibrator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVCalibrator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVCalibrator*) (soff))->~G__TKVCalibrator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetgeometry_355_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVCalibrator* dest = (KVCalibrator*) G__getstructoffset();
   *dest = *(KVCalibrator*) libp->para[0].ref;
   const KVCalibrator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVLayer */
static int G__G__KVMultiDetgeometry_359_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLayer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLayer[n];
     } else {
       p = new((void*) gvp) KVLayer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLayer;
     } else {
       p = new((void*) gvp) KVLayer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVLayer*) G__getstructoffset())->GetGeoVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLayer*) G__getstructoffset())->AddToGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVLayer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLayer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVLayer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVLayer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLayer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLayer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVLayer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLayer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_359_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVLayer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVLayer G__TKVLayer;
static int G__G__KVMultiDetgeometry_359_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVLayer*) (soff+(sizeof(KVLayer)*i)))->~G__TKVLayer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVLayer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVLayer*) (soff))->~G__TKVLayer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTelescope */
static int G__G__KVMultiDetgeometry_361_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTelescope* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTelescope[n];
     } else {
       p = new((void*) gvp) KVTelescope[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTelescope;
     } else {
       p = new((void*) gvp) KVTelescope;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVTelescope*) G__getstructoffset())->GetDetector((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVTelescope*) G__getstructoffset())->GetDetectorRank((KVDetector*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTelescope*) G__getstructoffset())->GetSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVTelescope*) G__getstructoffset())->DetectParticle((KVNucleus*) G__int(libp->para[0]), (KVNameValueList*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVTelescope*) G__getstructoffset())->DetectParticle((KVNucleus*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTelescope*) G__getstructoffset())->ResetDetectors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTelescope*) G__getstructoffset())->SetDepth((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const KVTelescope*) G__getstructoffset())->GetDepth((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTelescope*) G__getstructoffset())->GetTotalLengthInCM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTelescope*) G__getstructoffset())->GetDepthInCM((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const KVTelescope*) G__getstructoffset())->GetDepth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVTelescope*) G__getstructoffset())->GetGeoVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTelescope*) G__getstructoffset())->AddToGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTelescope::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTelescope::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTelescope::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTelescope::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTelescope*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTelescope::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTelescope::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTelescope::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_361_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTelescope::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTelescope G__TKVTelescope;
static int G__G__KVMultiDetgeometry_361_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTelescope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTelescope*) (soff+(sizeof(KVTelescope)*i)))->~G__TKVTelescope();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTelescope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTelescope*) (soff))->~G__TKVTelescope();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVGeoNavigator */
static int G__G__KVMultiDetgeometry_379_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVGeoNavigator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVGeoNavigator((TGeoManager*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVGeoNavigator((TGeoManager*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->SetStructureNameFormat((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->SetDetectorNameFormat((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVGeoNavigator*) G__getstructoffset())->GetDetectorNameFormat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->SetNameCorrespondanceList((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->SetNameCorrespondanceList((TEnv*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVGeoNavigator*) G__getstructoffset())->GetNameCorrespondance((const Char_t*) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVGeoNavigator*) G__getstructoffset())->PropagateEvent((KVEvent*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVGeoNavigator*) G__getstructoffset())->PropagateEvent((KVEvent*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVGeoNavigator*) G__getstructoffset())->PropagateParticle((KVNucleus*) G__int(libp->para[0]), (TVector3*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVGeoNavigator*) G__getstructoffset())->PropagateParticle((KVNucleus*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->ParticleEntersNewVolume((KVNucleus*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoNavigator*) G__getstructoffset())->GetGeometry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoNavigator*) G__getstructoffset())->GetCurrentVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoNavigator*) G__getstructoffset())->GetCurrentNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoNavigator*) G__getstructoffset())->GetCurrentMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVGeoNavigator*) G__getstructoffset())->GetStepSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const KVGeoNavigator*) G__getstructoffset())->GetEntryPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TVector3& obj = ((const KVGeoNavigator*) G__getstructoffset())->GetExitPoint();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVGeoNavigator*) G__getstructoffset())->GetCurrentDetectorNameAndVolume(*(KVString*) libp->para[0].ref, *(Bool_t*) G__Boolref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVGeoNavigator*) G__getstructoffset())->GetCurrentDetectorNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString* pobj;
         const TString xobj = ((const KVGeoNavigator*) G__getstructoffset())->GetCurrentPath();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVGeoNavigator*) G__getstructoffset())->StopPropagation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVGeoNavigator*) G__getstructoffset())->SetStopPropagation((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVGeoNavigator*) G__getstructoffset())->SetStopPropagation();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->ExtractDetectorNameFromPath(*(KVString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TClonesArray& obj = ((const KVGeoNavigator*) G__getstructoffset())->CurrentStructures();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVGeoNavigator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoNavigator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVGeoNavigator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVGeoNavigator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVGeoNavigator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoNavigator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGeoNavigator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVGeoNavigator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_379_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVGeoNavigator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVGeoNavigator G__TKVGeoNavigator;
static int G__G__KVMultiDetgeometry_379_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVGeoNavigator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVGeoNavigator*) (soff+(sizeof(KVGeoNavigator)*i)))->~G__TKVGeoNavigator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVGeoNavigator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVGeoNavigator*) (soff))->~G__TKVGeoNavigator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVRangeTableGeoNavigator */
static int G__G__KVMultiDetgeometry_380_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVRangeTableGeoNavigator* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVRangeTableGeoNavigator((TGeoManager*) G__int(libp->para[0]), (KVIonRangeTable*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVRangeTableGeoNavigator((TGeoManager*) G__int(libp->para[0]), (KVIonRangeTable*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRangeTableGeoNavigator*) G__getstructoffset())->SetCutOffKEForPropagation((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVRangeTableGeoNavigator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRangeTableGeoNavigator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVRangeTableGeoNavigator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVRangeTableGeoNavigator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRangeTableGeoNavigator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRangeTableGeoNavigator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVRangeTableGeoNavigator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRangeTableGeoNavigator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_380_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVRangeTableGeoNavigator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVRangeTableGeoNavigator G__TKVRangeTableGeoNavigator;
static int G__G__KVMultiDetgeometry_380_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVRangeTableGeoNavigator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVRangeTableGeoNavigator*) (soff+(sizeof(KVRangeTableGeoNavigator)*i)))->~G__TKVRangeTableGeoNavigator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVRangeTableGeoNavigator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVRangeTableGeoNavigator*) (soff))->~G__TKVRangeTableGeoNavigator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVASGroup */
static int G__G__KVMultiDetgeometry_381_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVASGroup* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVASGroup[n];
     } else {
       p = new((void*) gvp) KVASGroup[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVASGroup;
     } else {
       p = new((void*) gvp) KVASGroup;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVASGroup*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVASGroup*) G__getstructoffset())->GetTelescopesWithAngles((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVASGroup*) G__getstructoffset())->DetectParticle((KVNucleus*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVASGroup*) G__getstructoffset())->SetDimensions((KVPosition*) G__int(libp->para[0]), (KVPosition*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVASGroup*) G__getstructoffset())->SetDimensions();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((KVASGroup*) G__getstructoffset())->GetNumberOfLayers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const KVASGroup*) G__getstructoffset())->GetLayerNearestTarget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const KVASGroup*) G__getstructoffset())->GetLayerFurthestTarget());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVASGroup*) G__getstructoffset())->GetTelescopesInLayer((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((KVASGroup*) G__getstructoffset())->GetDetectorLayer((KVDetector*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVASGroup*) G__getstructoffset())->GetTelescopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVASGroup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVASGroup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVASGroup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVASGroup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVASGroup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVASGroup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVASGroup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVASGroup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_381_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVASGroup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVASGroup G__TKVASGroup;
static int G__G__KVMultiDetgeometry_381_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVASGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVASGroup*) (soff+(sizeof(KVASGroup)*i)))->~G__TKVASGroup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVASGroup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVASGroup*) (soff))->~G__TKVASGroup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVRing */
static int G__G__KVMultiDetgeometry_382_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVRing* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVRing[n];
     } else {
       p = new((void*) gvp) KVRing[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVRing;
     } else {
       p = new((void*) gvp) KVRing;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVRing*) G__getstructoffset())->GetTelescopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVRing*) G__getstructoffset())->GetTelescope((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVRing*) G__getstructoffset())->GetTelescope((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVRing*) G__getstructoffset())->GetGeoVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRing*) G__getstructoffset())->AddToGeometry();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVRing::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRing::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVRing::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVRing::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRing*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRing::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVRing::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRing::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetgeometry_382_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVRing::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVRing G__TKVRing;
static int G__G__KVMultiDetgeometry_382_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVRing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVRing*) (soff+(sizeof(KVRing)*i)))->~G__TKVRing();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVRing*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVRing*) (soff))->~G__TKVRing();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* KVDetector */

/* KVACQParam */

/* KVGeoDetectorNode */

/* KVGeoStrucElement */

/* KVGroup */

/* KVCalibrator */

/* KVLayer */

/* KVTelescope */

/* KVGeoNavigator */

/* KVRangeTableGeoNavigator */

/* KVASGroup */

/* KVRing */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__KVMultiDetgeometry {
 public:
  G__Sizep2memfuncG__KVMultiDetgeometry(): p(&G__Sizep2memfuncG__KVMultiDetgeometry::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__KVMultiDetgeometry::*p)();
};

size_t G__get_sizep2memfuncG__KVMultiDetgeometry()
{
  G__Sizep2memfuncG__KVMultiDetgeometry a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__KVMultiDetgeometry() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector))) {
     KVDetector *G__Lderived;
     G__Lderived=(KVDetector*)0x1000;
     {
       KVMaterial *G__Lpbase=(KVMaterial*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVMaterial),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVPosition *G__Lpbase=(KVPosition*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVPosition),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam))) {
     KVACQParam *G__Lderived;
     G__Lderived=(KVACQParam*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode))) {
     KVGeoDetectorNode *G__Lderived;
     G__Lderived=(KVGeoDetectorNode*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement))) {
     KVGeoStrucElement *G__Lderived;
     G__Lderived=(KVGeoStrucElement*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup))) {
     KVGroup *G__Lderived;
     G__Lderived=(KVGroup*)0x1000;
     {
       KVGeoStrucElement *G__Lpbase=(KVGeoStrucElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator))) {
     KVCalibrator *G__Lderived;
     G__Lderived=(KVCalibrator*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer))) {
     KVLayer *G__Lderived;
     G__Lderived=(KVLayer*)0x1000;
     {
       KVGeoStrucElement *G__Lpbase=(KVGeoStrucElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope))) {
     KVTelescope *G__Lderived;
     G__Lderived=(KVTelescope*)0x1000;
     {
       KVGeoStrucElement *G__Lpbase=(KVGeoStrucElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVPosition *G__Lpbase=(KVPosition*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVPosition),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator))) {
     KVGeoNavigator *G__Lderived;
     G__Lderived=(KVGeoNavigator*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator))) {
     KVRangeTableGeoNavigator *G__Lderived;
     G__Lderived=(KVRangeTableGeoNavigator*)0x1000;
     {
       KVGeoNavigator *G__Lpbase=(KVGeoNavigator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup))) {
     KVASGroup *G__Lderived;
     G__Lderived=(KVASGroup*)0x1000;
     {
       KVGroup *G__Lpbase=(KVGroup*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVGeoStrucElement *G__Lpbase=(KVGeoStrucElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVPosition *G__Lpbase=(KVPosition*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVPosition),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing))) {
     KVRing *G__Lderived;
     G__Lderived=(KVRing*)0x1000;
     {
       KVGeoStrucElement *G__Lpbase=(KVGeoStrucElement*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVPosition *G__Lpbase=(KVPosition*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing),G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVPosition),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__KVMultiDetgeometry() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UChar_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary8_t",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UShort_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UInt_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<Long64_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlElongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* KVDetector */
static void G__setup_memvarKVDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector));
   { KVDetector *p; p=(KVDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVPosition),-1,-1,4,"fEWPosition=",0,"position of entrance window");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVUniqueNameList),-1,-1,4,"fParentStrucList=",0,"list of geometry structures which directly contain this detector");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode),-1,-1,4,"fNode=",0,"positioning information relative to other detectors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"fDetCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fActiveLayer=",0,"The active absorber in the detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,4,"fIDTelescopes=",0,"->list of ID telescopes to which detector belongs");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,4,"fIDTelAlign=",0,"->list of ID telescopes made of this detector and all aligned detectors placed in front of it");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList),-1,-1,4,"fIDTele4Ident=",0,"!list of ID telescopes used for particle ID");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA),-1,-2,4,"kIsAnalysed=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA),-1,-2,4,"kActiveSet=32768LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA),-1,-2,4,"kUnidentifiedParticle=65536LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA),-1,-2,4,"kIdentifiedParticle=131072LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdentP=",0,"! temporary counters, determine state of identified/unidentified particle flags");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fUnidentP=",0,"! temporary counters, determine state of identified/unidentified particle flags");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TString),-1,-2,4,"fKVDetectorFiredACQParameterListFormatString=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TString),-1,-1,2,"fFName=",0,"!dynamically generated full name of detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,2,"fCalibrators=",0,"list of associated calibrator objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,2,"fACQParams=",0,"list of raw data parameters read from coders");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,2,"fParticles=",0,"!list of particles hitting detector in an event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,2,"fAbsorbers=",0,"->list of absorbers making up the detector");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fSegment=",0,"used in particle reconstruction");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fGain=",0,"gain of amplifier");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCalWarning=",0,"!just a counter so that missing calibrator warning is given only once");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fTotThickness=",0,"! used to store value calculated by GetTotalThicknessInCM");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDepthInTelescope=",0,"! used to store depth of detector in parent telescope");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR),G__defined_typename("Binary8_t"),-1,2,"fFiredMask=",0,"bitmask used by Fired to determine which parameters to take into account");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TF1),-1,-1,2,"fELossF=",0,"! parametric function dE in active layer vs. incident energy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TF1),-1,-1,2,"fEResF=",0,"! parametric function Eres residual energy after all layers of detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TF1),-1,-1,2,"fRangeF=",0,"! parametric function range of particles in detector");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fEResforEinc=",0,"! used by GetIncidentEnergy & GetCorrectedEnergy");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList),-1,-1,2,"fAlignedDetectors[2]=",0,"! stores lists of aligned detectors in both directions");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fSimMode=",0,"! =kTRUE when using to simulate detector response, =kFALSE when analysing data");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPresent=",0,"! =kTRUE if detector is present, =kFALSE if it has been removed");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDetecting=",0,"! =kTRUE if detector is \"detecting\", =kFALSE if not");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVACQParam */
static void G__setup_memvarKVACQParam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam));
   { KVACQParam *p; p=(KVACQParam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,82,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fChannel=",0,"!pointer to raw data i.e. value read from coder (channel number)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),-1,-1,4,"fDet=",0,"Detector associated with this acquisition parameter");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,4,"fData=",0,"!Dummy used when reading back events from a TTree etc.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPied=",0,"Pedestal value for the current run");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDeltaPied=",0,"Pedestal correction value for the current run");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fWorks=",0,"kFALSE if acquisition parameter was not working");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fNbBits=",0,"number of bits (<=16) actually used by parameter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVGeoDetectorNode */
static void G__setup_memvarKVGeoDetectorNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode));
   { KVGeoDetectorNode *p; p=(KVGeoDetectorNode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection),-1,-1,4,"fInFront=",0,"list of detectors in front");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection),-1,-1,4,"fBehind=",0,"list of detectors behind");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVGeoStrucElement */
static void G__setup_memvarKVGeoStrucElement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement));
   { KVGeoStrucElement *p; p=(KVGeoStrucElement*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVUniqueNameList),-1,-1,2,"fDetectors=",0,"detectors in this structure element");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVUniqueNameList),-1,-1,2,"fStructures=",0,"daughter structures");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVUniqueNameList),-1,-1,2,"fParentStrucList=",0,"parent structures");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVGroup */
static void G__setup_memvarKVGroup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup));
   { KVGroup *p; p=(KVGroup*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroupcLcLdA),-1,-2,2,"kIsRemoving=16384LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList),-1,-1,2,"fReconstructedNuclei=",0,"!Particles reconstructed in this group");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroupcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kForwards=%lldLL",(long long)KVGroup::kForwards).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroupcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kBackwards=%lldLL",(long long)KVGroup::kBackwards).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVCalibrator */
static void G__setup_memvarKVCalibrator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator));
   { KVCalibrator *p; p=(KVCalibrator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fParamNumber=",0,"number of parameters in the calibration formula");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,2,"fPar=",0,"[fParamNumber] array of parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector),-1,-1,2,"fDetector=",0,"Detector to which this calibration corresponds");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fReady=",0,"=kTRUE if the detector is calibrated i.e. if the formula has been set up");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVLayer */
static void G__setup_memvarKVLayer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer));
   { KVLayer *p; p=(KVLayer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTelescope */
static void G__setup_memvarKVTelescope(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope));
   { KVTelescope *p; p=(KVTelescope*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNdets=",0,"number of detectors in telescope");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDepth=",0,"[fNdets] depth of each element starting from nearest target");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVGeoNavigator */
static void G__setup_memvarKVGeoNavigator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator));
   { KVGeoNavigator *p; p=(KVGeoNavigator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoManager),-1,-1,4,"fGeometry=",0,"geometry to navigate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume),-1,-1,4,"fCurrentVolume=",0,"current volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoNode),-1,-1,4,"fCurrentNode=",0,"current node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoNode),-1,-1,4,"fCurrentDetectorNode=",0,"node for current detector");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoHMatrix),-1,-1,4,"fCurrentMatrix=",0,"current global transformation matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TString),-1,-1,4,"fCurrentPath=",0,"current full path to physical node");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClonesArray),-1,-1,4,"fCurrentStructures=",0,"list of current structures deduced from path");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurStrucNumber=",0,"number of current parent structures");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoNode),-1,-1,4,"fMotherNode=",0,"mother node of current node");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fStepSize=",0,"distance to travel in volume");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3),-1,-1,4,"fEntryPoint=",0,"position of particle on entering volume");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3),-1,-1,4,"fExitPoint=",0,"position of particle on exiting volume");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStopPropagation=",0,"flag set by user when particle propagation should stop");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVNameValueList),-1,-1,2,"fStrucNameFmt=",0,"list of user-defined formats for structure names");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVString),-1,-1,2,"fDetNameFmt=",0,"user-defined format for detector names");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TEnv),-1,-1,2,"fDetStrucNameCorrespList=",0,"list(s) of correspondance for renaming structures/detectors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVRangeTableGeoNavigator */
static void G__setup_memvarKVRangeTableGeoNavigator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator));
   { KVRangeTableGeoNavigator *p; p=(KVRangeTableGeoNavigator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVIonRangeTable),-1,-1,4,"fRangeTable=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCutOffEnergy=",0,"cut-off KE in MeV below which we stop propagation");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVASGroup */
static void G__setup_memvarKVASGroup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup));
   { KVASGroup *p; p=(KVASGroup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fNumberOfLayers=",0,"number of different layers in group");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fLayNumMin=",0,"minimum layer number (nearest to target)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fLayNumMax=",0,"maximum layer number (furthest from target)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVRing */
static void G__setup_memvarKVRing(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing));
   { KVRing *p; p=(KVRing*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__KVMultiDetgeometry() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncKVDetector(void) {
   /* KVDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector));
   G__memfunc_setup("ROOTGeo",607,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMatrix",929,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TGeoHMatrix' - 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetShape",797,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'TGeoBBox' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMatrix",917,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoHMatrix), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetShape",785,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoBBox), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ELossActive",1090,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EResDet",652,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RangeDet",778,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVDetector",987,G__G__KVMultiDetgeometry_345_0_9, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVDetector",987,G__G__KVMultiDetgeometry_345_0_10, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - type f - 'Float_t' 10 '0.0' thick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVDetector",987,G__G__KVMultiDetgeometry_345_0_11, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 1, 1, 1, 0, "u 'KVDetector' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__G__KVMultiDetgeometry_345_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMaterial",1115,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddAbsorber",1081,G__G__KVMultiDetgeometry_345_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVMaterial' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveLayer",1413,G__G__KVMultiDetgeometry_345_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVMaterial' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveLayer",1413,G__G__KVMultiDetgeometry_345_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - actif", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveLayer",1401,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVMaterial), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAbsorber",1104,G__G__KVMultiDetgeometry_345_0_19, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVMaterial), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAbsorber",1104,G__G__KVMultiDetgeometry_345_0_20, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVMaterial), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfAbsorbers",1812,G__G__KVMultiDetgeometry_345_0_21, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetArrayName",1184,G__G__KVMultiDetgeometry_345_0_22, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDepthInTelescope",1904,G__G__KVMultiDetgeometry_345_0_23, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTotalThicknessInCM",2071,G__G__KVMultiDetgeometry_345_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNode",678,G__G__KVMultiDetgeometry_345_0_25, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaterialName",1488,G__G__KVMultiDetgeometry_345_0_26, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetectParticle",1421,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVNucleus' - 0 - - U 'TVector3' - 0 '0' norm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetELostByParticle",1782,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"U 'KVNucleus' - 0 - - U 'TVector3' - 0 '0' norm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParticleEIncFromERes",2230,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"U 'KVNucleus' - 0 - - U 'TVector3' - 0 '0' norm", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGain",683,G__G__KVMultiDetgeometry_345_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGain",671,G__G__KVMultiDetgeometry_345_0_31, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__G__KVMultiDetgeometry_345_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergy",918,G__G__KVMultiDetgeometry_345_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEnergyLoss",1323,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEnergyLoss",1335,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCorrectedEnergy",1829,G__G__KVMultiDetgeometry_345_0_36, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"U 'KVNucleus' - 0 - - d - 'Double_t' 0 '-1.' e "
"g - 'Bool_t' 0 'kTRUE' transmission", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindZmin",799,G__G__KVMultiDetgeometry_345_0_37, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '-1.' ELOSS c - 'Char_t' 0 '-1' mass_formula", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddACQParam",975,G__G__KVMultiDetgeometry_345_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVACQParam' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetACQParam",998,G__G__KVMultiDetgeometry_345_0_39, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetACQParamList",1410,G__G__KVMultiDetgeometry_345_0_40, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetACQData",879,G__G__KVMultiDetgeometry_345_0_41, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPedestal",1106,G__G__KVMultiDetgeometry_345_0_42, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedestal",1118,G__G__KVMultiDetgeometry_345_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddCalibrator",1292,G__G__KVMultiDetgeometry_345_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'KVCalibrator' - 0 - cal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibrator",1315,G__G__KVMultiDetgeometry_345_0_45, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator), -1, 0, 2, 1, 1, 8, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibrator",1315,G__G__KVMultiDetgeometry_345_0_46, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfCalibrators",2023,G__G__KVMultiDetgeometry_345_0_47, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsCalibrated",1191,G__G__KVMultiDetgeometry_345_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__KVMultiDetgeometry_345_0_50, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddHit",558,G__G__KVMultiDetgeometry_345_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVNucleus' - 0 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHits",696,G__G__KVMultiDetgeometry_345_0_53, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearHits",895,G__G__KVMultiDetgeometry_345_0_54, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNHits",774,G__G__KVMultiDetgeometry_345_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSegment",1011,G__G__KVMultiDetgeometry_345_0_56, 114, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSegment",1023,G__G__KVMultiDetgeometry_345_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsAnalysed",1005,G__G__KVMultiDetgeometry_345_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAnalysed",1117,G__G__KVMultiDetgeometry_345_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fired",490,G__G__KVMultiDetgeometry_345_0_60, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"any\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FiredP",570,G__G__KVMultiDetgeometry_345_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"any\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetACQParams",1125,G__G__KVMultiDetgeometry_345_0_62, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetCalibrators",1442,G__G__KVMultiDetgeometry_345_0_63, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveCalibrators",1764,G__G__KVMultiDetgeometry_345_0_64, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddIDTelescope",1338,G__G__KVMultiDetgeometry_345_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - idt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIDTelescopes",1476,G__G__KVMultiDetgeometry_345_0_66, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignedIDTelescopes",2168,G__G__KVMultiDetgeometry_345_0_67, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescopesForIdentification",3080,G__G__KVMultiDetgeometry_345_0_68, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IncrementUnidentifiedParticles",3108,G__G__KVMultiDetgeometry_345_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IncrementIdentifiedParticles",2881,G__G__KVMultiDetgeometry_345_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BelongsToUnidentifiedParticle",2969,G__G__KVMultiDetgeometry_345_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BelongsToIdentifiedParticle",2742,G__G__KVMultiDetgeometry_345_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeDetector",1208,G__G__KVMultiDetgeometry_345_0_73, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - name f - 'Float_t' 0 - thick", (char*)NULL, (void*) G__func2void( (KVDetector* (*)(const Char_t*, Float_t))(&KVDetector::MakeDetector) ), 0);
   G__memfunc_setup("GetNormal",905,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3), -1, 1, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeoVolume",1203,G__G__KVMultiDetgeometry_345_0_75, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddToGeometry",1304,G__G__KVMultiDetgeometry_345_0_76, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetVerticesInOwnFrame",2107,G__G__KVMultiDetgeometry_345_0_77, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'TVector3' - 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEntranceWindowSurfaceArea",2826,G__G__KVMultiDetgeometry_345_0_78, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFiredBitmask",1505,G__G__KVMultiDetgeometry_345_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'KVString' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetFiredBitmask",1493,G__G__KVMultiDetgeometry_345_0_80, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR), G__defined_typename("Binary8_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFiredACQParameterListFormatString",3580,G__G__KVMultiDetgeometry_345_0_81, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetCalcACQParam",1369,G__G__KVMultiDetgeometry_345_0_82, 115, -1, G__defined_typename("Short_t"), 0, 2, 1, 1, 8, 
"U 'KVACQParam' - 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMaxDeltaE",1141,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEIncOfMaxDeltaE",1673,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaE",847,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Einc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTotalDeltaE",1363,G__G__KVMultiDetgeometry_345_0_86, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Einc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetERes",655,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Einc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIncidentEnergy",1720,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 '-1.0' delta_e i 'KVMaterial::SolType' - 0 'kEmax' type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDeltaEFromERes",1618,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Eres", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIncidentEnergyFromERes",2491,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Eres", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRange",781,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Einc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLinearRange",1384,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"d - 'Double_t' 0 - Einc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPunchThroughEnergy",2153,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPunchThroughEnergyVsZ",2554,G__G__KVMultiDetgeometry_345_0_94, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGraph), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 'KVNucleus::kBetaMass' massform", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPunchThroughEsurAVsZ",2416,G__G__KVMultiDetgeometry_345_0_95, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGraph), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 'KVNucleus::kBetaMass' massform", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEResFunction",1493,G__G__KVMultiDetgeometry_345_0_96, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TF1), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetELossFunction",1612,G__G__KVMultiDetgeometry_345_0_97, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TF1), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetRangeFunction",1619,G__G__KVMultiDetgeometry_345_0_98, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TF1), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSmallestEmaxValid",2016,G__G__KVMultiDetgeometry_345_0_99, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetEResAfterDetector",1991,G__G__KVMultiDetgeometry_345_0_100, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetEResAfterDetector",1979,G__G__KVMultiDetgeometry_345_0_101, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadDefinitionFromFile",2201,G__G__KVMultiDetgeometry_345_0_102, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAlignedDetectors",1921,G__G__KVMultiDetgeometry_345_0_103, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '1' direction", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetAlignedDetectors",2148,G__G__KVMultiDetgeometry_345_0_104, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '1' direction", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSimMode",986,G__G__KVMultiDetgeometry_345_0_105, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' on", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSimMode",874,G__G__KVMultiDetgeometry_345_0_106, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsPresent",925,G__G__KVMultiDetgeometry_345_0_107, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPresent",1037,G__G__KVMultiDetgeometry_345_0_108, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDetecting",1107,G__G__KVMultiDetgeometry_345_0_109, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetecting",1219,G__G__KVMultiDetgeometry_345_0_110, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOK",342,G__G__KVMultiDetgeometry_345_0_111, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DeduceACQParameters",1843,G__G__KVMultiDetgeometry_345_0_112, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' - i - 'Int_t' 0 '-1' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGroup",813,G__G__KVMultiDetgeometry_345_0_113, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGroupNumber",1430,G__G__KVMultiDetgeometry_345_0_114, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParentStructure",1860,G__G__KVMultiDetgeometry_345_0_115, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVGeoStrucElement' - 0 - elem", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveParentStructure",2217,G__G__KVMultiDetgeometry_345_0_116, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVGeoStrucElement' - 0 - elem", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParentStructure",1883,G__G__KVMultiDetgeometry_345_0_117, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 2, 1, 1, 8, 
"C - 'Char_t' 10 - type C - 'Char_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveLayerMatrix",2042,G__G__KVMultiDetgeometry_345_0_118, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoHMatrix' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveLayerShape",1910,G__G__KVMultiDetgeometry_345_0_119, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoBBox' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveLayerMatrix",2030,G__G__KVMultiDetgeometry_345_0_120, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoHMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveLayerShape",1898,G__G__KVMultiDetgeometry_345_0_121, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoBBox), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntranceWindowMatrix",2377,G__G__KVMultiDetgeometry_345_0_122, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoHMatrix' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEntranceWindowShape",2245,G__G__KVMultiDetgeometry_345_0_123, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoBBox' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntranceWindowMatrix",2365,G__G__KVMultiDetgeometry_345_0_124, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoHMatrix), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntranceWindowShape",2233,G__G__KVMultiDetgeometry_345_0_125, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoBBox), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandomPointOnEntranceWindow",3056,G__G__KVMultiDetgeometry_345_0_126, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCentreOfEntranceWindow",2526,G__G__KVMultiDetgeometry_345_0_127, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntranceWindow",1736,G__G__KVMultiDetgeometry_345_0_128, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVPosition), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_345_0_129, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_345_0_130, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_345_0_131, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_345_0_132, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_345_0_136, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_345_0_137, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_345_0_138, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_345_0_139, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_345_0_140, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVDetector::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVDetector", 1113, G__G__KVMultiDetgeometry_345_0_141, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVACQParam(void) {
   /* KVACQParam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam));
   G__memfunc_setup("init",436,G__G__KVMultiDetgeometry_346_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVACQParam",871,G__G__KVMultiDetgeometry_346_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVACQParam",871,G__G__KVMultiDetgeometry_346_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVACQParam",871,G__G__KVMultiDetgeometry_346_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam), -1, 0, 1, 1, 1, 0, "u 'KVACQParam' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetector",1126,G__G__KVMultiDetgeometry_346_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - kd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__KVMultiDetgeometry_346_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConnectData",1092,G__G__KVMultiDetgeometry_346_0_8, 82, -1, G__defined_typename("UShort_t"), 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetData",678,G__G__KVMultiDetgeometry_346_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "r - 'UShort_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCoderData",1159,G__G__KVMultiDetgeometry_346_0_10, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__G__KVMultiDetgeometry_346_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fired",490,G__G__KVMultiDetgeometry_346_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' what", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPedestal",1118,G__G__KVMultiDetgeometry_346_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPedestal",1106,G__G__KVMultiDetgeometry_346_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDeltaPedestal",1608,G__G__KVMultiDetgeometry_346_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltaPedestal",1596,G__G__KVMultiDetgeometry_346_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDataAddress",1376,G__G__KVMultiDetgeometry_346_0_18, 82, -1, G__defined_typename("UShort_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsWorking",925,G__G__KVMultiDetgeometry_346_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWorking",1037,G__G__KVMultiDetgeometry_346_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' on", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNbBits",878,G__G__KVMultiDetgeometry_346_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNbBits",866,G__G__KVMultiDetgeometry_346_0_24, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UseInternalDataMember",2108,G__G__KVMultiDetgeometry_346_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_346_0_26, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVACQParam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_346_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVACQParam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_346_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVACQParam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_346_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVACQParam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_346_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_346_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVACQParam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_346_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVACQParam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_346_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVACQParam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_346_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVACQParam::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVACQParam", 997, G__G__KVMultiDetgeometry_346_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetgeometry_346_0_39, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVACQParam), -1, 1, 1, 1, 1, 0, "u 'KVACQParam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVGeoDetectorNode(void) {
   /* KVGeoDetectorNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVGeoDetectorNode",1660,G__G__KVMultiDetgeometry_352_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVGeoDetectorNode",1660,G__G__KVMultiDetgeometry_352_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInFront",969,G__G__KVMultiDetgeometry_352_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddBehind",851,G__G__KVMultiDetgeometry_352_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsInFrontOf",1073,G__G__KVMultiDetgeometry_352_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBehind",774,G__G__KVMultiDetgeometry_352_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorsInFront",1933,G__G__KVMultiDetgeometry_352_0_8, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorsBehind",1815,G__G__KVMultiDetgeometry_352_0_9, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDetsInFront",1470,G__G__KVMultiDetgeometry_352_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNDetsBehind",1352,G__G__KVMultiDetgeometry_352_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RehashLists",1130,G__G__KVMultiDetgeometry_352_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_352_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVGeoDetectorNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_352_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoDetectorNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_352_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVGeoDetectorNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_352_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVGeoDetectorNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_352_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_352_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoDetectorNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_352_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGeoDetectorNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_352_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoDetectorNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_352_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGeoDetectorNode::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVGeoDetectorNode", 1660, G__G__KVMultiDetgeometry_352_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode), -1, 0, 1, 1, 1, 0, "u 'KVGeoDetectorNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVGeoDetectorNode", 1786, G__G__KVMultiDetgeometry_352_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetgeometry_352_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode), -1, 1, 1, 1, 1, 0, "u 'KVGeoDetectorNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVGeoStrucElement(void) {
   /* KVGeoStrucElement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParentStructure",1860,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'KVGeoStrucElement' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveParentStructure",2217,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'KVGeoStrucElement' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVGeoStrucElement",1687,G__G__KVMultiDetgeometry_353_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVGeoStrucElement",1687,G__G__KVMultiDetgeometry_353_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 '\"\"' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwnsDaughters",1658,G__G__KVMultiDetgeometry_353_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetOwnsDetectors",1664,G__G__KVMultiDetgeometry_353_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,G__G__KVMultiDetgeometry_353_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kSortAscending' order", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortStructures",1516,G__G__KVMultiDetgeometry_353_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kSortAscending' order", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SortDetectors",1365,G__G__KVMultiDetgeometry_353_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kSortAscending' order", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearDetectors",1428,G__G__KVMultiDetgeometry_353_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"\"' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearStructures",1579,G__G__KVMultiDetgeometry_353_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"\"' type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__KVMultiDetgeometry_353_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Remove",622,G__G__KVMultiDetgeometry_353_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Contains",831,G__G__KVMultiDetgeometry_353_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'KVBase' - 0 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStructure",1265,G__G__KVMultiDetgeometry_353_0_17, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructure",1265,G__G__KVMultiDetgeometry_353_0_18, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 2, 1, 1, 8, 
"C - 'Char_t' 10 - type i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructure",1265,G__G__KVMultiDetgeometry_353_0_19, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 2, 1, 1, 8, 
"C - 'Char_t' 10 - type C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructureTypeList",2095,G__G__KVMultiDetgeometry_353_0_20, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__KVMultiDetgeometry_353_0_21, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorByType",1719,G__G__KVMultiDetgeometry_353_0_22, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorTypeList",1944,G__G__KVMultiDetgeometry_353_0_23, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorAny",1410,G__G__KVMultiDetgeometry_353_0_24, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectors",1229,G__G__KVMultiDetgeometry_353_0_25, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStructures",1380,G__G__KVMultiDetgeometry_353_0_26, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParents",1021,G__G__KVMultiDetgeometry_353_0_27, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fired",490,G__G__KVMultiDetgeometry_353_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"any\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetParentStructure",1883,G__G__KVMultiDetgeometry_353_0_29, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement), -1, 0, 2, 1, 1, 8, 
"C - 'Char_t' 10 - type C - 'Char_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_353_0_31, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVGeoStrucElement::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_353_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoStrucElement::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_353_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVGeoStrucElement::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_353_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVGeoStrucElement::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_353_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_353_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoStrucElement::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_353_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGeoStrucElement::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_353_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoStrucElement::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_353_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGeoStrucElement::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVGeoStrucElement", 1813, G__G__KVMultiDetgeometry_353_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVGroup(void) {
   /* KVGroup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup));
   G__memfunc_setup("KVGroup",686,G__G__KVMultiDetgeometry_354_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGroup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__G__KVMultiDetgeometry_354_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumber",917,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - num", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberOfDetectorLayers",2536,G__G__KVMultiDetgeometry_354_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__KVMultiDetgeometry_354_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorsInLayer",1921,G__G__KVMultiDetgeometry_354_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - lay", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAlignedDetectors",1921,G__G__KVMultiDetgeometry_354_0_7, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 2, 1, 1, 0, 
"U 'KVDetector' - 0 - - b - 'UChar_t' 0 'kBackwards' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetHits",696,G__G__KVMultiDetgeometry_354_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearHitDetectors",1721,G__G__KVMultiDetgeometry_354_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParticles",1223,G__G__KVMultiDetgeometry_354_0_10, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddHit",558,G__G__KVMultiDetgeometry_354_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVNucleus' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveHit",915,G__G__KVMultiDetgeometry_354_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVNucleus' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsRemoving",1027,G__G__KVMultiDetgeometry_354_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,G__G__KVMultiDetgeometry_354_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CountLayers",1145,G__G__KVMultiDetgeometry_354_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_354_0_16, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVGroup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_354_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGroup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_354_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVGroup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_354_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVGroup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_354_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_354_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGroup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_354_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGroup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_354_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGroup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_354_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGroup::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVGroup", 812, G__G__KVMultiDetgeometry_354_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVCalibrator(void) {
   /* KVCalibrator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator));
   G__memfunc_setup("init",436,G__G__KVMultiDetgeometry_355_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsEqual",692,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumberParams",1517,G__G__KVMultiDetgeometry_355_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNumberParams",1529,G__G__KVMultiDetgeometry_355_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - npar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameter",1217,G__G__KVMultiDetgeometry_355_0_9, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "r - 'UShort_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__G__KVMultiDetgeometry_355_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetector",1114,G__G__KVMultiDetgeometry_355_0_11, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameter",1229,G__G__KVMultiDetgeometry_355_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - i f - 'Float_t' 0 - par_val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDetector",1126,G__G__KVMultiDetgeometry_355_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - kvd", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNameFromDetector",1915,G__G__KVMultiDetgeometry_355_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStatus",944,G__G__KVMultiDetgeometry_355_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - ready", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,G__G__KVMultiDetgeometry_355_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetParameters",1344,G__G__KVMultiDetgeometry_355_0_18, 121, -1, -1, 0, 1, 8, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,G__G__KVMultiDetgeometry_355_0_19, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("operator()",957,G__G__KVMultiDetgeometry_355_0_20, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Invert",632,G__G__KVMultiDetgeometry_355_0_21, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("MakeGraph",880,G__G__KVMultiDetgeometry_355_0_22, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGraph), -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - xmin d - 'Double_t' 0 - xmax "
"i - 'Int_t' 0 '50' npoints", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_355_0_24, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVCalibrator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_355_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVCalibrator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_355_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVCalibrator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_355_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVCalibrator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_355_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_355_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVCalibrator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_355_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVCalibrator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_355_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVCalibrator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_355_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVCalibrator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVCalibrator", 1314, G__G__KVMultiDetgeometry_355_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetgeometry_355_0_37, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVCalibrator), -1, 1, 1, 1, 1, 0, "u 'KVCalibrator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVLayer(void) {
   /* KVLayer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer));
   G__memfunc_setup("KVLayer",670,G__G__KVMultiDetgeometry_359_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVLayer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeoVolume",1203,G__G__KVMultiDetgeometry_359_0_5, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddToGeometry",1304,G__G__KVMultiDetgeometry_359_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_359_0_7, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVLayer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_359_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLayer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_359_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVLayer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_359_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVLayer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_359_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_359_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLayer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_359_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVLayer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_359_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLayer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_359_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVLayer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVLayer", 796, G__G__KVMultiDetgeometry_359_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTelescope(void) {
   /* KVTelescope */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTelescope",1093,G__G__KVMultiDetgeometry_361_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - element", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetector",1114,G__G__KVMultiDetgeometry_361_0_4, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVDetector), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorRank",1510,G__G__KVMultiDetgeometry_361_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSize",699,G__G__KVMultiDetgeometry_361_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetectParticle",1421,G__G__KVMultiDetgeometry_361_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVNucleus' - 0 - kvp U 'KVNameValueList' - 0 '0' nvl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ResetDetectors",1456,G__G__KVMultiDetgeometry_361_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDepth",801,G__G__KVMultiDetgeometry_361_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - ndet f - 'Float_t' 0 - depth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDepth",789,G__G__KVMultiDetgeometry_361_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ndet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTotalLengthInCM",1741,G__G__KVMultiDetgeometry_361_0_11, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDepthInCM",1116,G__G__KVMultiDetgeometry_361_0_12, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ndet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDepth",789,G__G__KVMultiDetgeometry_361_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeoVolume",1203,G__G__KVMultiDetgeometry_361_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddToGeometry",1304,G__G__KVMultiDetgeometry_361_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAzimuthalAngle",1730,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ph", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPolarAngle",1297,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - th", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPolarWidth",1322,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - pw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPolarMinMax",1396,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAzimuthalWidth",1755,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - aw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAzimuthalMinMax",1829,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - min d - 'Double_t' 0 - max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_361_0_22, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTelescope::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_361_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTelescope::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_361_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTelescope::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_361_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTelescope::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_361_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_361_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTelescope::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_361_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTelescope::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_361_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTelescope::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_361_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTelescope::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTelescope", 1219, G__G__KVMultiDetgeometry_361_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVGeoNavigator(void) {
   /* KVGeoNavigator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator));
   G__memfunc_setup("FormatStructureName",1979,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"C - 'Char_t' 10 - type i - 'Int_t' 0 - number "
"u 'KVString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FormatDetectorName",1828,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"C - 'Char_t' 10 - basename u 'KVString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVGeoNavigator",1383,G__G__KVMultiDetgeometry_379_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVGeoNavigator), -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStructureNameFormat",2279,G__G__KVMultiDetgeometry_379_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - type C - 'Char_t' 10 - fmt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorNameFormat",2128,G__G__KVMultiDetgeometry_379_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - fmt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDetectorNameFormat",2116,G__G__KVMultiDetgeometry_379_0_6, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameCorrespondanceList",2559,G__G__KVMultiDetgeometry_379_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNameCorrespondanceList",2559,G__G__KVMultiDetgeometry_379_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TEnv' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNameCorrespondance",2135,G__G__KVMultiDetgeometry_379_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateEvent",1445,G__G__KVMultiDetgeometry_379_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVEvent' - 0 - - U 'TVector3' - 0 '0' TheOrigin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PropagateParticle",1751,G__G__KVMultiDetgeometry_379_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVNucleus' - 0 - - U 'TVector3' - 0 '0' TheOrigin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ParticleEntersNewVolume",2375,G__G__KVMultiDetgeometry_379_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVNucleus' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeometry",1132,G__G__KVMultiDetgeometry_379_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoManager), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentVolume",1659,G__G__KVMultiDetgeometry_379_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentNode",1417,G__G__KVMultiDetgeometry_379_0_15, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoNode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentMatrix",1656,G__G__KVMultiDetgeometry_379_0_16, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoHMatrix), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStepSize",1111,G__G__KVMultiDetgeometry_379_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEntryPoint",1340,G__G__KVMultiDetgeometry_379_0_18, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetExitPoint",1220,G__G__KVMultiDetgeometry_379_0_19, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TVector3), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentDetectorNameAndVolume",3145,G__G__KVMultiDetgeometry_379_0_20, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume), -1, 0, 2, 1, 1, 0, 
"u 'KVString' - 1 - - g - 'Bool_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentDetectorNode",2243,G__G__KVMultiDetgeometry_379_0_21, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoNode), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCurrentPath",1424,G__G__KVMultiDetgeometry_379_0_22, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TString), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("StopPropagation",1578,G__G__KVMultiDetgeometry_379_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStopPropagation",1878,G__G__KVMultiDetgeometry_379_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' stop", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ExtractDetectorNameFromPath",2743,G__G__KVMultiDetgeometry_379_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'KVString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CurrentStructures",1831,G__G__KVMultiDetgeometry_379_0_26, 117, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClonesArray), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_379_0_27, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVGeoNavigator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_379_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoNavigator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_379_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVGeoNavigator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_379_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVGeoNavigator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_379_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_379_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoNavigator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_379_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGeoNavigator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_379_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVGeoNavigator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_379_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVGeoNavigator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVGeoNavigator", 1509, G__G__KVMultiDetgeometry_379_0_39, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVRangeTableGeoNavigator(void) {
   /* KVRangeTableGeoNavigator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator));
   G__memfunc_setup("KVRangeTableGeoNavigator",2364,G__G__KVMultiDetgeometry_380_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator), -1, 0, 2, 1, 1, 0, 
"U 'TGeoManager' - 0 - - U 'KVIonRangeTable' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCutOffKEForPropagation",2478,G__G__KVMultiDetgeometry_380_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ParticleEntersNewVolume",2375,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'KVNucleus' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("PropagateParticle",1751,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVNucleus' - 0 - - U 'TVector3' - 0 '0' TheOrigin", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_380_0_5, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVRangeTableGeoNavigator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_380_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRangeTableGeoNavigator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_380_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVRangeTableGeoNavigator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_380_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVRangeTableGeoNavigator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_380_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_380_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRangeTableGeoNavigator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_380_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVRangeTableGeoNavigator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_380_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRangeTableGeoNavigator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_380_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVRangeTableGeoNavigator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVRangeTableGeoNavigator", 2490, G__G__KVMultiDetgeometry_380_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVASGroup(void) {
   /* KVASGroup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup));
   G__memfunc_setup("KVASGroup",834,G__G__KVMultiDetgeometry_381_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVASGroup), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__G__KVMultiDetgeometry_381_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescopesWithAngles",2349,G__G__KVMultiDetgeometry_381_0_3, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 0 - theta f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DetectParticle",1421,G__G__KVMultiDetgeometry_381_0_4, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVNameValueList), -1, 0, 1, 1, 1, 0, "U 'KVNucleus' - 0 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDimensions",1349,G__G__KVMultiDetgeometry_381_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVPosition' - 0 - - U 'KVPosition' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDimensions",1349,G__G__KVMultiDetgeometry_381_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfLayers",1710,G__G__KVMultiDetgeometry_381_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CountLayers",1145,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetLayerNearestTarget",2134,G__G__KVMultiDetgeometry_381_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLayerFurthestTarget",2265,G__G__KVMultiDetgeometry_381_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescopesInLayer",2027,G__G__KVMultiDetgeometry_381_0_12, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - nlayer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfDetectorLayers",2536,(G__InterfaceMethod) NULL,104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetectorsInLayer",1921,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - lay", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDetectorLayer",1623,G__G__KVMultiDetgeometry_381_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlignedDetectors",1921,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TList), -1, 0, 2, 1, 1, 0, 
"U 'KVDetector' - 0 - - b - 'UChar_t' 0 'kBackwards' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Contains",831,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'KVBase' - 0 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTelescopes",1335,G__G__KVMultiDetgeometry_381_0_19, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_381_0_20, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVASGroup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_381_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVASGroup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_381_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVASGroup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_381_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVASGroup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_381_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_381_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVASGroup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_381_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVASGroup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_381_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVASGroup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_381_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVASGroup::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVASGroup", 960, G__G__KVMultiDetgeometry_381_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVRing(void) {
   /* KVRing */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVRing",561,G__G__KVMultiDetgeometry_382_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVRing), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTelescopes",1335,G__G__KVMultiDetgeometry_382_0_4, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVSeqCollection), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescope",1220,G__G__KVMultiDetgeometry_382_0_5, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope), -1, 0, 1, 1, 1, 8, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTelescope",1220,G__G__KVMultiDetgeometry_382_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_KVTelescope), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetSolidAngle",1282,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeoVolume",1203,G__G__KVMultiDetgeometry_382_0_10, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddToGeometry",1304,G__G__KVMultiDetgeometry_382_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetgeometry_382_0_12, 85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVRing::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetgeometry_382_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRing::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetgeometry_382_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVRing::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetgeometry_382_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVRing::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetgeometryLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetgeometry_382_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetgeometry_382_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRing::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetgeometry_382_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVRing::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetgeometry_382_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRing::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetgeometry_382_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVRing::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVRing", 687, G__G__KVMultiDetgeometry_382_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__KVMultiDetgeometry() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__KVMultiDetgeometry() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__KVMultiDetgeometry() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__KVMultiDetgeometryLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVString = { "KVString" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVBase = { "KVBase" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVSeqCollection = { "KVSeqCollection" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVUniqueNameList = { "KVUniqueNameList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVList = { "KVList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVIonRangeTable = { "KVIonRangeTable" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVNucleus = { "KVNucleus" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVMaterial = { "KVMaterial" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVMaterialcLcLSolType = { "KVMaterial::SolType" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TGeoHMatrix = { "TGeoHMatrix" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TGeoBBox = { "TGeoBBox" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVPosition = { "KVPosition" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TEnv = { "TEnv" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVNameValueList = { "KVNameValueList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVDetector = { "KVDetector" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVACQParam = { "KVACQParam" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR = { "Binary_t<unsigned char>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPshortgR = { "Binary_t<unsigned short>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPintgR = { "Binary_t<unsigned int>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_Binary_tlElongsPlonggR = { "Binary_t<long long>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVGeoDetectorNode = { "KVGeoDetectorNode" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVGeoStrucElement = { "KVGeoStrucElement" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVGroup = { "KVGroup" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVCalibrator = { "KVCalibrator" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA = { "KVDetector::$" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVLayer = { "KVLayer" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVGroupcLcLdA = { "KVGroup::$" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVTelescope = { "KVTelescope" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVEvent = { "KVEvent" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_TGeoNode = { "TGeoNode" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVGeoNavigator = { "KVGeoNavigator" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator = { "KVRangeTableGeoNavigator" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVASGroup = { "KVASGroup" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetgeometryLN_KVRing = { "KVRing" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__KVMultiDetgeometry() {
  G__G__KVMultiDetgeometryLN_TClass.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TBuffer.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMemberInspector.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TObject.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TNamed.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TString.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TList.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TClonesArray.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVString.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVBase.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVSeqCollection.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVUniqueNameList.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVList.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TF1.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TVector3.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVIonRangeTable.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVNucleus.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TGeoVolume.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVMaterial.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVMaterialcLcLSolType.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TGeoHMatrix.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TGeoBBox.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVPosition.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TEnv.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVNameValueList.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVDetector.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVACQParam.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPshortgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPintgR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_Binary_tlElongsPlonggR.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVGeoDetectorNode.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVGeoStrucElement.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVGroup.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVCalibrator.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TGraph.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVLayer.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVGroupcLcLdA.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVTelescope.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVEvent.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TGeoManager.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_TGeoNode.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVGeoNavigator.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVASGroup.tagnum = -1 ;
  G__G__KVMultiDetgeometryLN_KVRing.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__KVMultiDetgeometry() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TString);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVString);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVBase);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVSeqCollection);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVUniqueNameList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TF1);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TVector3);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVIonRangeTable);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVNucleus);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVMaterial);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVMaterialcLcLSolType);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TGeoHMatrix);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TGeoBBox);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVPosition);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TEnv);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVNameValueList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVDetector),sizeof(KVDetector),-1,325376,"Base class for the description of detectors in multidetector arrays",G__setup_memvarKVDetector,G__setup_memfuncKVDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVACQParam),sizeof(KVACQParam),-1,325376,"Data acquisition parameters read from raw DLT's",G__setup_memvarKVACQParam,G__setup_memfuncKVACQParam);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPchargR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPshortgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_Binary_tlEunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_Binary_tlElongsPlonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVGeoDetectorNode),sizeof(KVGeoDetectorNode),-1,324864,"Stores lists of detectors in front and behind this node",G__setup_memvarKVGeoDetectorNode,G__setup_memfuncKVGeoDetectorNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVGeoStrucElement),sizeof(KVGeoStrucElement),-1,324864,"A multidetector array geometry structural element",G__setup_memvarKVGeoStrucElement,G__setup_memfuncKVGeoStrucElement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVGroup),sizeof(KVGroup),-1,324864,"Group of detectors having similar angular positions.",G__setup_memvarKVGroup,G__setup_memfuncKVGroup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVCalibrator),sizeof(KVCalibrator),-1,128771,"Base class for calibration of detectors",G__setup_memvarKVCalibrator,G__setup_memfuncKVCalibrator);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TGraph);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVDetectorcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVLayer),sizeof(KVLayer),-1,324864,"Layer of telescopes at the \"same distance\" from the target in a multidetector array",G__setup_memvarKVLayer,G__setup_memfuncKVLayer);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVGroupcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVTelescope),sizeof(KVTelescope),-1,324864,"Multi-layered telescopes composed of different absorbers",G__setup_memvarKVTelescope,G__setup_memfuncKVTelescope);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVEvent);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TGeoManager);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_TGeoNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVGeoNavigator),sizeof(KVGeoNavigator),-1,324608,"Propagate particles of an event through a TGeo geometry",G__setup_memvarKVGeoNavigator,G__setup_memfuncKVGeoNavigator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVRangeTableGeoNavigator),sizeof(KVRangeTableGeoNavigator),-1,324608,"Propagate particles through a geometry and calculate their energy losses",G__setup_memvarKVRangeTableGeoNavigator,G__setup_memfuncKVRangeTableGeoNavigator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVASGroup),sizeof(KVASGroup),-1,324864,"Group in axially-symmetric multidetector",G__setup_memvarKVASGroup,G__setup_memfuncKVASGroup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetgeometryLN_KVRing),sizeof(KVRing),-1,324864,"Class representing one ring of an axially symmetric multidetector array",G__setup_memvarKVRing,G__setup_memfuncKVRing);
}
extern "C" void G__cpp_setupG__KVMultiDetgeometry(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__KVMultiDetgeometry()");
  G__set_cpp_environmentG__KVMultiDetgeometry();
  G__cpp_setup_tagtableG__KVMultiDetgeometry();

  G__cpp_setup_inheritanceG__KVMultiDetgeometry();

  G__cpp_setup_typetableG__KVMultiDetgeometry();

  G__cpp_setup_memvarG__KVMultiDetgeometry();

  G__cpp_setup_memfuncG__KVMultiDetgeometry();
  G__cpp_setup_globalG__KVMultiDetgeometry();
  G__cpp_setup_funcG__KVMultiDetgeometry();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__KVMultiDetgeometry();
  return;
}
class G__cpp_setup_initG__KVMultiDetgeometry {
  public:
    G__cpp_setup_initG__KVMultiDetgeometry() { G__add_setup_func("G__KVMultiDetgeometry",(G__incsetup)(&G__cpp_setupG__KVMultiDetgeometry)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__KVMultiDetgeometry() { G__remove_setup_func("G__KVMultiDetgeometry"); }
};
G__cpp_setup_initG__KVMultiDetgeometry G__cpp_setup_initializerG__KVMultiDetgeometry;

