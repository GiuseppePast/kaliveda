//
// File generated by rootcint at Fri Jul 17 15:50:45 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__KVMultiDetcalibration
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__KVMultiDetcalibration.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void KVPulseHeightDefect_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVPulseHeightDefect(void *p = 0);
   static void *newArray_KVPulseHeightDefect(Long_t size, void *p);
   static void delete_KVPulseHeightDefect(void *p);
   static void deleteArray_KVPulseHeightDefect(void *p);
   static void destruct_KVPulseHeightDefect(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVPulseHeightDefect*)
   {
      ::KVPulseHeightDefect *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVPulseHeightDefect >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVPulseHeightDefect", ::KVPulseHeightDefect::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/calibration/KVPulseHeightDefect.h", 17,
                  typeid(::KVPulseHeightDefect), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVPulseHeightDefect::Dictionary, isa_proxy, 4,
                  sizeof(::KVPulseHeightDefect) );
      instance.SetNew(&new_KVPulseHeightDefect);
      instance.SetNewArray(&newArray_KVPulseHeightDefect);
      instance.SetDelete(&delete_KVPulseHeightDefect);
      instance.SetDeleteArray(&deleteArray_KVPulseHeightDefect);
      instance.SetDestructor(&destruct_KVPulseHeightDefect);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVPulseHeightDefect*)
   {
      return GenerateInitInstanceLocal((::KVPulseHeightDefect*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVPulseHeightDefect*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVLinCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVLinCal(void *p = 0);
   static void *newArray_KVLinCal(Long_t size, void *p);
   static void delete_KVLinCal(void *p);
   static void deleteArray_KVLinCal(void *p);
   static void destruct_KVLinCal(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVLinCal*)
   {
      ::KVLinCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVLinCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVLinCal", ::KVLinCal::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/calibration/KVLinCal.h", 25,
                  typeid(::KVLinCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVLinCal::Dictionary, isa_proxy, 4,
                  sizeof(::KVLinCal) );
      instance.SetNew(&new_KVLinCal);
      instance.SetNewArray(&newArray_KVLinCal);
      instance.SetDelete(&delete_KVLinCal);
      instance.SetDeleteArray(&deleteArray_KVLinCal);
      instance.SetDestructor(&destruct_KVLinCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVLinCal*)
   {
      return GenerateInitInstanceLocal((::KVLinCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVLinCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVRecombination_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVRecombination(void *p = 0);
   static void *newArray_KVRecombination(Long_t size, void *p);
   static void delete_KVRecombination(void *p);
   static void deleteArray_KVRecombination(void *p);
   static void destruct_KVRecombination(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVRecombination*)
   {
      ::KVRecombination *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVRecombination >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVRecombination", ::KVRecombination::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/calibration/KVRecombination.h", 10,
                  typeid(::KVRecombination), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVRecombination::Dictionary, isa_proxy, 4,
                  sizeof(::KVRecombination) );
      instance.SetNew(&new_KVRecombination);
      instance.SetNewArray(&newArray_KVRecombination);
      instance.SetDelete(&delete_KVRecombination);
      instance.SetDeleteArray(&deleteArray_KVRecombination);
      instance.SetDestructor(&destruct_KVRecombination);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVRecombination*)
   {
      return GenerateInitInstanceLocal((::KVRecombination*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVRecombination*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr KVPulseHeightDefect::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVPulseHeightDefect::Class_Name()
{
   return "KVPulseHeightDefect";
}

//______________________________________________________________________________
const char *KVPulseHeightDefect::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVPulseHeightDefect*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVPulseHeightDefect::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVPulseHeightDefect*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVPulseHeightDefect::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVPulseHeightDefect*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVPulseHeightDefect::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVPulseHeightDefect*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVLinCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVLinCal::Class_Name()
{
   return "KVLinCal";
}

//______________________________________________________________________________
const char *KVLinCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVLinCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVLinCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVLinCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVLinCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVLinCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVLinCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVLinCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVRecombination::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVRecombination::Class_Name()
{
   return "KVRecombination";
}

//______________________________________________________________________________
const char *KVRecombination::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVRecombination*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVRecombination::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVRecombination*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVRecombination::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVRecombination*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVRecombination::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVRecombination*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void KVLinCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVLinCal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVLinCal::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVLinCal::Class(),this);
   }
}

//______________________________________________________________________________
void KVLinCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVLinCal.
      TClass *R__cl = ::KVLinCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fACQParam", &fACQParam);
      R__insp.InspectMember(fACQParam, "fACQParam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedCorr", &fPedCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPar", &fPar);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVLinCal(void *p) {
      return  p ? new(p) ::KVLinCal : new ::KVLinCal;
   }
   static void *newArray_KVLinCal(Long_t nElements, void *p) {
      return p ? new(p) ::KVLinCal[nElements] : new ::KVLinCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVLinCal(void *p) {
      delete ((::KVLinCal*)p);
   }
   static void deleteArray_KVLinCal(void *p) {
      delete [] ((::KVLinCal*)p);
   }
   static void destruct_KVLinCal(void *p) {
      typedef ::KVLinCal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVLinCal

//______________________________________________________________________________
void KVPulseHeightDefect::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVPulseHeightDefect.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVPulseHeightDefect::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVPulseHeightDefect::Class(),this);
   }
}

//______________________________________________________________________________
void KVPulseHeightDefect::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVPulseHeightDefect.
      TClass *R__cl = ::KVPulseHeightDefect::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMoulton", &fMoulton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeltaEphd", &fDeltaEphd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wrong", &wrong);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVPulseHeightDefect(void *p) {
      return  p ? new(p) ::KVPulseHeightDefect : new ::KVPulseHeightDefect;
   }
   static void *newArray_KVPulseHeightDefect(Long_t nElements, void *p) {
      return p ? new(p) ::KVPulseHeightDefect[nElements] : new ::KVPulseHeightDefect[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVPulseHeightDefect(void *p) {
      delete ((::KVPulseHeightDefect*)p);
   }
   static void deleteArray_KVPulseHeightDefect(void *p) {
      delete [] ((::KVPulseHeightDefect*)p);
   }
   static void destruct_KVPulseHeightDefect(void *p) {
      typedef ::KVPulseHeightDefect current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVPulseHeightDefect

//______________________________________________________________________________
void KVRecombination::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVRecombination.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVRecombination::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVRecombination::Class(),this);
   }
}

//______________________________________________________________________________
void KVRecombination::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVRecombination.
      TClass *R__cl = ::KVRecombination::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParlog", &fParlog);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDeltaEphd", &fDeltaEphd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wrong", &wrong);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVRecombination(void *p) {
      return  p ? new(p) ::KVRecombination : new ::KVRecombination;
   }
   static void *newArray_KVRecombination(Long_t nElements, void *p) {
      return p ? new(p) ::KVRecombination[nElements] : new ::KVRecombination[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVRecombination(void *p) {
      delete ((::KVRecombination*)p);
   }
   static void deleteArray_KVRecombination(void *p) {
      delete [] ((::KVRecombination*)p);
   }
   static void destruct_KVRecombination(void *p) {
      typedef ::KVRecombination current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVRecombination

/********************************************************
* G__KVMultiDetcalibration.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__KVMultiDetcalibration();

extern "C" void G__set_cpp_environmentG__KVMultiDetcalibration() {
  G__cpp_reset_tagtableG__KVMultiDetcalibration();
}
#include <new>
extern "C" int G__cpp_dllrevG__KVMultiDetcalibration() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* KVPulseHeightDefect */
static int G__G__KVMultiDetcalibration_364_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVPulseHeightDefect*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVPulseHeightDefect* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVPulseHeightDefect[n];
     } else {
       p = new((void*) gvp) KVPulseHeightDefect[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVPulseHeightDefect;
     } else {
       p = new((void*) gvp) KVPulseHeightDefect;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVPulseHeightDefect* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVPulseHeightDefect((KVDetector*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVPulseHeightDefect((KVDetector*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVPulseHeightDefect*) G__getstructoffset())->SetZ((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVPulseHeightDefect*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVPulseHeightDefect*) G__getstructoffset())->PHDMoulton((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVPulseHeightDefect*) G__getstructoffset())->GetMoultonPHDFunction((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVPulseHeightDefect*) G__getstructoffset())->ELossActive((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((KVPulseHeightDefect*) G__getstructoffset())->GetELossFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((KVPulseHeightDefect*) G__getstructoffset())->GetELossFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVPulseHeightDefect::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVPulseHeightDefect::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVPulseHeightDefect::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVPulseHeightDefect::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVPulseHeightDefect*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVPulseHeightDefect::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVPulseHeightDefect::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVPulseHeightDefect::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_364_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVPulseHeightDefect::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetcalibration_364_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVPulseHeightDefect* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVPulseHeightDefect(*(KVPulseHeightDefect*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVPulseHeightDefect G__TKVPulseHeightDefect;
static int G__G__KVMultiDetcalibration_364_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVPulseHeightDefect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVPulseHeightDefect*) (soff+(sizeof(KVPulseHeightDefect)*i)))->~G__TKVPulseHeightDefect();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVPulseHeightDefect*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVPulseHeightDefect*) (soff))->~G__TKVPulseHeightDefect();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetcalibration_364_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVPulseHeightDefect* dest = (KVPulseHeightDefect*) G__getstructoffset();
   *dest = *(KVPulseHeightDefect*) libp->para[0].ref;
   const KVPulseHeightDefect& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVLinCal */
static int G__G__KVMultiDetcalibration_365_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLinCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLinCal[n];
     } else {
       p = new((void*) gvp) KVLinCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLinCal;
     } else {
       p = new((void*) gvp) KVLinCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLinCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVLinCal((KVDetector*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVLinCal((KVDetector*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLinCal*) G__getstructoffset())->WithPedestalCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVLinCal*) G__getstructoffset())->WithPedestalCorrection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLinCal*) G__getstructoffset())->SetChannelParameter((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVLinCal*) G__getstructoffset())->GetChannelParameter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVLinCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLinCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVLinCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVLinCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLinCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLinCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVLinCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLinCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_365_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVLinCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetcalibration_365_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVLinCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVLinCal(*(KVLinCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVLinCal G__TKVLinCal;
static int G__G__KVMultiDetcalibration_365_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVLinCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVLinCal*) (soff+(sizeof(KVLinCal)*i)))->~G__TKVLinCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVLinCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVLinCal*) (soff))->~G__TKVLinCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetcalibration_365_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLinCal* dest = (KVLinCal*) G__getstructoffset();
   *dest = *(KVLinCal*) libp->para[0].ref;
   const KVLinCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVRecombination */
static int G__G__KVMultiDetcalibration_366_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRecombination*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVRecombination* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVRecombination[n];
     } else {
       p = new((void*) gvp) KVRecombination[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVRecombination;
     } else {
       p = new((void*) gvp) KVRecombination;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVRecombination* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVRecombination((KVDetector*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVRecombination((KVDetector*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRecombination*) G__getstructoffset())->SetZandA((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVRecombination*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVRecombination*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVRecombination*) G__getstructoffset())->PHDParlog((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVRecombination*) G__getstructoffset())->GetParlogPHDFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVRecombination*) G__getstructoffset())->ELossActive((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((KVRecombination*) G__getstructoffset())->GetELossFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((KVRecombination*) G__getstructoffset())->GetELossFunction((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVRecombination::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRecombination::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVRecombination::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVRecombination::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVRecombination*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRecombination::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVRecombination::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVRecombination::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetcalibration_366_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVRecombination::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetcalibration_366_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVRecombination* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVRecombination(*(KVRecombination*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVRecombination G__TKVRecombination;
static int G__G__KVMultiDetcalibration_366_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVRecombination*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVRecombination*) (soff+(sizeof(KVRecombination)*i)))->~G__TKVRecombination();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVRecombination*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVRecombination*) (soff))->~G__TKVRecombination();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetcalibration_366_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVRecombination* dest = (KVRecombination*) G__getstructoffset();
   *dest = *(KVRecombination*) libp->para[0].ref;
   const KVRecombination& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* KVPulseHeightDefect */

/* KVLinCal */

/* KVRecombination */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__KVMultiDetcalibration {
 public:
  G__Sizep2memfuncG__KVMultiDetcalibration(): p(&G__Sizep2memfuncG__KVMultiDetcalibration::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__KVMultiDetcalibration::*p)();
};

size_t G__get_sizep2memfuncG__KVMultiDetcalibration()
{
  G__Sizep2memfuncG__KVMultiDetcalibration a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__KVMultiDetcalibration() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect))) {
     KVPulseHeightDefect *G__Lderived;
     G__Lderived=(KVPulseHeightDefect*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal))) {
     KVLinCal *G__Lderived;
     G__Lderived=(KVLinCal*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination))) {
     KVRecombination *G__Lderived;
     G__Lderived=(KVRecombination*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination),G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__KVMultiDetcalibration() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UChar_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPchargR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UShort_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UInt_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<Long64_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_Binary_tlElongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* KVPulseHeightDefect */
static void G__setup_memvarKVPulseHeightDefect(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect));
   { KVPulseHeightDefect *p; p=(KVPulseHeightDefect*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1),-1,-1,4,"fMoulton=",0,"!Moulton formula for PHD =  f(E,Z)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1),-1,-1,4,"fDeltaEphd=",0,"!deltaE calculated including PHD");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fZ=",0,"!Z of nucleus to be calibrated");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"wrong=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVLinCal */
static void G__setup_memvarKVLinCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal));
   { KVLinCal *p; p=(KVLinCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVString),-1,-1,4,"fACQParam=",0,"acquisition parameter to use for calibration");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPedCorr=",0,"true if pedestal correction is required");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVACQParam),-1,-1,4,"fPar=",0,"!non-persistent pointer to DAQ parameter named in fACQParam");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVRecombination */
static void G__setup_memvarKVRecombination(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination));
   { KVRecombination *p; p=(KVRecombination*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1),-1,-1,4,"fParlog=",0,"! Parlog formula for PHD = f(E,Z,A)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1),-1,-1,4,"fDeltaEphd=",0,"! deltaE calculated including PHD");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fZ=",0,"! Z of nucleus to be calibrated");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fA=",0,"! A of nucleus to be calibrated");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"wrong=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__KVMultiDetcalibration() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncKVPulseHeightDefect(void) {
   /* KVPulseHeightDefect */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect));
   G__memfunc_setup("init",436,G__G__KVMultiDetcalibration_364_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVPulseHeightDefect",1870,G__G__KVMultiDetcalibration_364_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVPulseHeightDefect",1870,G__G__KVMultiDetcalibration_364_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect), -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ",390,G__G__KVMultiDetcalibration_364_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__KVMultiDetcalibration_364_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PHDMoulton",970,G__G__KVMultiDetcalibration_364_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMoultonPHDFunction",2096,G__G__KVMultiDetcalibration_364_0_10, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ELossActive",1090,G__G__KVMultiDetcalibration_364_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetELossFunction",1612,G__G__KVMultiDetcalibration_364_0_12, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"g - 'Bool_t' 0 'kFALSE' Wrong", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetcalibration_364_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVPulseHeightDefect::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetcalibration_364_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVPulseHeightDefect::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetcalibration_364_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVPulseHeightDefect::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetcalibration_364_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVPulseHeightDefect::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetcalibration_364_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetcalibration_364_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVPulseHeightDefect::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetcalibration_364_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVPulseHeightDefect::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetcalibration_364_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVPulseHeightDefect::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetcalibration_364_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVPulseHeightDefect::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVPulseHeightDefect", 1870, G__G__KVMultiDetcalibration_364_0_25, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect), -1, 0, 1, 1, 1, 0, "u 'KVPulseHeightDefect' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVPulseHeightDefect", 1996, G__G__KVMultiDetcalibration_364_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetcalibration_364_0_27, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect), -1, 1, 1, 1, 1, 0, "u 'KVPulseHeightDefect' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVLinCal(void) {
   /* KVLinCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal));
   G__memfunc_setup("GetParam",785,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVACQParam), -1, 0, 0, 1, 4, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVLinCal",724,G__G__KVMultiDetcalibration_365_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVLinCal",724,G__G__KVMultiDetcalibration_365_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal), -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WithPedestalCorrection",2278,G__G__KVMultiDetcalibration_365_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WithPedestalCorrection",2278,G__G__KVMultiDetcalibration_365_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannelParameter",1926,G__G__KVMultiDetcalibration_365_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannelParameter",1914,G__G__KVMultiDetcalibration_365_0_10, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetcalibration_365_0_11, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVLinCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetcalibration_365_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLinCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetcalibration_365_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVLinCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetcalibration_365_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVLinCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetcalibration_365_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetcalibration_365_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLinCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetcalibration_365_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVLinCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetcalibration_365_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLinCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetcalibration_365_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVLinCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVLinCal", 724, G__G__KVMultiDetcalibration_365_0_23, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal), -1, 0, 1, 1, 1, 0, "u 'KVLinCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVLinCal", 850, G__G__KVMultiDetcalibration_365_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetcalibration_365_0_25, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVLinCal), -1, 1, 1, 1, 1, 0, "u 'KVLinCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVRecombination(void) {
   /* KVRecombination */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination));
   G__memfunc_setup("init",436,G__G__KVMultiDetcalibration_366_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVRecombination",1515,G__G__KVMultiDetcalibration_366_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVRecombination",1515,G__G__KVMultiDetcalibration_366_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination), -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - E", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZandA",762,G__G__KVMultiDetcalibration_366_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - z i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__KVMultiDetcalibration_366_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__G__KVMultiDetcalibration_366_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PHDParlog",833,G__G__KVMultiDetcalibration_366_0_10, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParlogPHDFunction",1959,G__G__KVMultiDetcalibration_366_0_11, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ELossActive",1090,G__G__KVMultiDetcalibration_366_0_12, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetELossFunction",1612,G__G__KVMultiDetcalibration_366_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TF1), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A "
"g - 'Bool_t' 0 'kFALSE' Wrong", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetcalibration_366_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVRecombination::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetcalibration_366_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRecombination::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetcalibration_366_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVRecombination::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetcalibration_366_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVRecombination::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetcalibration_366_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetcalibration_366_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRecombination::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetcalibration_366_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVRecombination::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetcalibration_366_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVRecombination::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetcalibration_366_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVRecombination::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVRecombination", 1515, G__G__KVMultiDetcalibration_366_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination), -1, 0, 1, 1, 1, 0, "u 'KVRecombination' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVRecombination", 1641, G__G__KVMultiDetcalibration_366_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetcalibration_366_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetcalibrationLN_KVRecombination), -1, 1, 1, 1, 1, 0, "u 'KVRecombination' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__KVMultiDetcalibration() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__KVMultiDetcalibration() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__KVMultiDetcalibration() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVString = { "KVString" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVBase = { "KVBase" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVDetector = { "KVDetector" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVACQParam = { "KVACQParam" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPchargR = { "Binary_t<unsigned char>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPshortgR = { "Binary_t<unsigned short>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPintgR = { "Binary_t<unsigned int>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_Binary_tlElongsPlonggR = { "Binary_t<long long>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVCalibrator = { "KVCalibrator" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect = { "KVPulseHeightDefect" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVLinCal = { "KVLinCal" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetcalibrationLN_KVRecombination = { "KVRecombination" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__KVMultiDetcalibration() {
  G__G__KVMultiDetcalibrationLN_TClass.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TBuffer.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMemberInspector.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TObject.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TNamed.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVString.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVBase.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TF1.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVDetector.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVACQParam.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPchargR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPshortgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPintgR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_Binary_tlElongsPlonggR.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVCalibrator.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVLinCal.tagnum = -1 ;
  G__G__KVMultiDetcalibrationLN_KVRecombination.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__KVMultiDetcalibration() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVString);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVBase);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TF1);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVDetector);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVACQParam);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPchargR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPshortgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_Binary_tlEunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_Binary_tlElongsPlonggR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVCalibrator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVPulseHeightDefect),sizeof(KVPulseHeightDefect),-1,324864,"Silicon PHD described by Moulton formula",G__setup_memvarKVPulseHeightDefect,G__setup_memfuncKVPulseHeightDefect);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVLinCal),sizeof(KVLinCal),-1,324864,"Simple linear calibration E = a + b*channel",G__setup_memvarKVLinCal,G__setup_memfuncKVLinCal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetcalibrationLN_KVRecombination),sizeof(KVRecombination),-1,324864,"Silicon PHD described by electron-hole recombination model",G__setup_memvarKVRecombination,G__setup_memfuncKVRecombination);
}
extern "C" void G__cpp_setupG__KVMultiDetcalibration(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__KVMultiDetcalibration()");
  G__set_cpp_environmentG__KVMultiDetcalibration();
  G__cpp_setup_tagtableG__KVMultiDetcalibration();

  G__cpp_setup_inheritanceG__KVMultiDetcalibration();

  G__cpp_setup_typetableG__KVMultiDetcalibration();

  G__cpp_setup_memvarG__KVMultiDetcalibration();

  G__cpp_setup_memfuncG__KVMultiDetcalibration();
  G__cpp_setup_globalG__KVMultiDetcalibration();
  G__cpp_setup_funcG__KVMultiDetcalibration();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__KVMultiDetcalibration();
  return;
}
class G__cpp_setup_initG__KVMultiDetcalibration {
  public:
    G__cpp_setup_initG__KVMultiDetcalibration() { G__add_setup_func("G__KVMultiDetcalibration",(G__incsetup)(&G__cpp_setupG__KVMultiDetcalibration)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__KVMultiDetcalibration() { G__remove_setup_func("G__KVMultiDetcalibration"); }
};
G__cpp_setup_initG__KVMultiDetcalibration G__cpp_setup_initializerG__KVMultiDetcalibration;

