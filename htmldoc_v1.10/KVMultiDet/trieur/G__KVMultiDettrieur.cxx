//
// File generated by rootcint at Fri Jul 17 15:49:42 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__KVMultiDettrieur
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__KVMultiDettrieur.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void KVTrieur_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVTrieur(void *p);
   static void deleteArray_KVTrieur(void *p);
   static void destruct_KVTrieur(void *p);
   static void streamer_KVTrieur(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTrieur*)
   {
      ::KVTrieur *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTrieur >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTrieur", ::KVTrieur::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/trieur/KVTrieur.h", 20,
                  typeid(::KVTrieur), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTrieur::Dictionary, isa_proxy, 0,
                  sizeof(::KVTrieur) );
      instance.SetDelete(&delete_KVTrieur);
      instance.SetDeleteArray(&deleteArray_KVTrieur);
      instance.SetDestructor(&destruct_KVTrieur);
      instance.SetStreamerFunc(&streamer_KVTrieur);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTrieur*)
   {
      return GenerateInitInstanceLocal((::KVTrieur*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTrieur*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTrieurTranche_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTrieurTranche(void *p = 0);
   static void *newArray_KVTrieurTranche(Long_t size, void *p);
   static void delete_KVTrieurTranche(void *p);
   static void deleteArray_KVTrieurTranche(void *p);
   static void destruct_KVTrieurTranche(void *p);
   static void streamer_KVTrieurTranche(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTrieurTranche*)
   {
      ::KVTrieurTranche *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTrieurTranche >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTrieurTranche", ::KVTrieurTranche::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/trieur/KVTrieurTranche.h", 16,
                  typeid(::KVTrieurTranche), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTrieurTranche::Dictionary, isa_proxy, 0,
                  sizeof(::KVTrieurTranche) );
      instance.SetNew(&new_KVTrieurTranche);
      instance.SetNewArray(&newArray_KVTrieurTranche);
      instance.SetDelete(&delete_KVTrieurTranche);
      instance.SetDeleteArray(&deleteArray_KVTrieurTranche);
      instance.SetDestructor(&destruct_KVTrieurTranche);
      instance.SetStreamerFunc(&streamer_KVTrieurTranche);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTrieurTranche*)
   {
      return GenerateInitInstanceLocal((::KVTrieurTranche*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTrieurTranche*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTrieurLin_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTrieurLin(void *p = 0);
   static void *newArray_KVTrieurLin(Long_t size, void *p);
   static void delete_KVTrieurLin(void *p);
   static void deleteArray_KVTrieurLin(void *p);
   static void destruct_KVTrieurLin(void *p);
   static void streamer_KVTrieurLin(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTrieurLin*)
   {
      ::KVTrieurLin *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTrieurLin >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTrieurLin", ::KVTrieurLin::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/trieur/KVTrieurLin.h", 15,
                  typeid(::KVTrieurLin), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTrieurLin::Dictionary, isa_proxy, 0,
                  sizeof(::KVTrieurLin) );
      instance.SetNew(&new_KVTrieurLin);
      instance.SetNewArray(&newArray_KVTrieurLin);
      instance.SetDelete(&delete_KVTrieurLin);
      instance.SetDeleteArray(&deleteArray_KVTrieurLin);
      instance.SetDestructor(&destruct_KVTrieurLin);
      instance.SetStreamerFunc(&streamer_KVTrieurLin);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTrieurLin*)
   {
      return GenerateInitInstanceLocal((::KVTrieurLin*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTrieurLin*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTrieurBloc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTrieurBloc(void *p = 0);
   static void *newArray_KVTrieurBloc(Long_t size, void *p);
   static void delete_KVTrieurBloc(void *p);
   static void deleteArray_KVTrieurBloc(void *p);
   static void destruct_KVTrieurBloc(void *p);
   static void streamer_KVTrieurBloc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTrieurBloc*)
   {
      ::KVTrieurBloc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTrieurBloc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTrieurBloc", ::KVTrieurBloc::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/trieur/KVTrieurBloc.h", 16,
                  typeid(::KVTrieurBloc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTrieurBloc::Dictionary, isa_proxy, 0,
                  sizeof(::KVTrieurBloc) );
      instance.SetNew(&new_KVTrieurBloc);
      instance.SetNewArray(&newArray_KVTrieurBloc);
      instance.SetDelete(&delete_KVTrieurBloc);
      instance.SetDeleteArray(&deleteArray_KVTrieurBloc);
      instance.SetDestructor(&destruct_KVTrieurBloc);
      instance.SetStreamerFunc(&streamer_KVTrieurBloc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTrieurBloc*)
   {
      return GenerateInitInstanceLocal((::KVTrieurBloc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTrieurBloc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr KVTrieur::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTrieur::Class_Name()
{
   return "KVTrieur";
}

//______________________________________________________________________________
const char *KVTrieur::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieur*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTrieur::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieur*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTrieur::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieur*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTrieur::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieur*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTrieurTranche::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTrieurTranche::Class_Name()
{
   return "KVTrieurTranche";
}

//______________________________________________________________________________
const char *KVTrieurTranche::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurTranche*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTrieurTranche::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurTranche*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTrieurTranche::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurTranche*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTrieurTranche::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurTranche*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTrieurLin::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTrieurLin::Class_Name()
{
   return "KVTrieurLin";
}

//______________________________________________________________________________
const char *KVTrieurLin::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurLin*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTrieurLin::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurLin*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTrieurLin::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurLin*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTrieurLin::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurLin*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTrieurBloc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTrieurBloc::Class_Name()
{
   return "KVTrieurBloc";
}

//______________________________________________________________________________
const char *KVTrieurBloc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurBloc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTrieurBloc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurBloc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTrieurBloc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurBloc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTrieurBloc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTrieurBloc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void KVTrieur::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTrieur.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KVBase::Streamer(R__b);
      R__b >> nb_cases;
      noms_cases->Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, KVTrieur::IsA());
   } else {
      R__c = R__b.WriteVersion(KVTrieur::IsA(), kTRUE);
      KVBase::Streamer(R__b);
      R__b << nb_cases;
      noms_cases->Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KVTrieur::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTrieur.
      TClass *R__cl = ::KVTrieur::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nb_cases", &nb_cases);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*noms_cases", &noms_cases);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVTrieur(void *p) {
      delete ((::KVTrieur*)p);
   }
   static void deleteArray_KVTrieur(void *p) {
      delete [] ((::KVTrieur*)p);
   }
   static void destruct_KVTrieur(void *p) {
      typedef ::KVTrieur current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVTrieur(TBuffer &buf, void *obj) {
      ((::KVTrieur*)obj)->::KVTrieur::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVTrieur

//______________________________________________________________________________
void KVTrieurLin::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTrieurLin.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KVTrieur::Streamer(R__b);
      R__b >> xmin;
      R__b >> xmax;
      R__b.ReadStaticArray((char*)nom_var);
      R__b.CheckByteCount(R__s, R__c, KVTrieurLin::IsA());
   } else {
      R__c = R__b.WriteVersion(KVTrieurLin::IsA(), kTRUE);
      KVTrieur::Streamer(R__b);
      R__b << xmin;
      R__b << xmax;
      R__b.WriteArray(nom_var, 80);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KVTrieurLin::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTrieurLin.
      TClass *R__cl = ::KVTrieurLin::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmin", &xmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmax", &xmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nom_var[80]", nom_var);
      KVTrieur::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTrieurLin(void *p) {
      return  p ? new(p) ::KVTrieurLin : new ::KVTrieurLin;
   }
   static void *newArray_KVTrieurLin(Long_t nElements, void *p) {
      return p ? new(p) ::KVTrieurLin[nElements] : new ::KVTrieurLin[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTrieurLin(void *p) {
      delete ((::KVTrieurLin*)p);
   }
   static void deleteArray_KVTrieurLin(void *p) {
      delete [] ((::KVTrieurLin*)p);
   }
   static void destruct_KVTrieurLin(void *p) {
      typedef ::KVTrieurLin current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVTrieurLin(TBuffer &buf, void *obj) {
      ((::KVTrieurLin*)obj)->::KVTrieurLin::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVTrieurLin

//______________________________________________________________________________
void KVTrieurTranche::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTrieurTranche.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KVTrieur::Streamer(R__b);
      xtranches.Streamer(R__b);
      R__b.ReadStaticArray((char*)nomVar);
      R__b.CheckByteCount(R__s, R__c, KVTrieurTranche::IsA());
   } else {
      R__c = R__b.WriteVersion(KVTrieurTranche::IsA(), kTRUE);
      KVTrieur::Streamer(R__b);
      xtranches.Streamer(R__b);
      R__b.WriteArray(nomVar, 80);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KVTrieurTranche::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTrieurTranche.
      TClass *R__cl = ::KVTrieurTranche::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xtranches", &xtranches);
      R__insp.InspectMember(xtranches, "xtranches.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nomVar[80]", nomVar);
      KVTrieur::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTrieurTranche(void *p) {
      return  p ? new(p) ::KVTrieurTranche : new ::KVTrieurTranche;
   }
   static void *newArray_KVTrieurTranche(Long_t nElements, void *p) {
      return p ? new(p) ::KVTrieurTranche[nElements] : new ::KVTrieurTranche[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTrieurTranche(void *p) {
      delete ((::KVTrieurTranche*)p);
   }
   static void deleteArray_KVTrieurTranche(void *p) {
      delete [] ((::KVTrieurTranche*)p);
   }
   static void destruct_KVTrieurTranche(void *p) {
      typedef ::KVTrieurTranche current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVTrieurTranche(TBuffer &buf, void *obj) {
      ((::KVTrieurTranche*)obj)->::KVTrieurTranche::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVTrieurTranche

//______________________________________________________________________________
void KVTrieurBloc::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTrieurBloc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      KVTrieur::Streamer(R__b);
      xmin.Streamer(R__b);
      xmax.Streamer(R__b);
      R__b.ReadStaticArray((char*)nomVar);
      R__b.CheckByteCount(R__s, R__c, KVTrieurBloc::IsA());
   } else {
      R__c = R__b.WriteVersion(KVTrieurBloc::IsA(), kTRUE);
      KVTrieur::Streamer(R__b);
      xmin.Streamer(R__b);
      xmax.Streamer(R__b);
      R__b.WriteArray(nomVar, 80);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void KVTrieurBloc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTrieurBloc.
      TClass *R__cl = ::KVTrieurBloc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmin", &xmin);
      R__insp.InspectMember(xmin, "xmin.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmax", &xmax);
      R__insp.InspectMember(xmax, "xmax.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nomVar[80]", nomVar);
      KVTrieur::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTrieurBloc(void *p) {
      return  p ? new(p) ::KVTrieurBloc : new ::KVTrieurBloc;
   }
   static void *newArray_KVTrieurBloc(Long_t nElements, void *p) {
      return p ? new(p) ::KVTrieurBloc[nElements] : new ::KVTrieurBloc[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTrieurBloc(void *p) {
      delete ((::KVTrieurBloc*)p);
   }
   static void deleteArray_KVTrieurBloc(void *p) {
      delete [] ((::KVTrieurBloc*)p);
   }
   static void destruct_KVTrieurBloc(void *p) {
      typedef ::KVTrieurBloc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVTrieurBloc(TBuffer &buf, void *obj) {
      ((::KVTrieurBloc*)obj)->::KVTrieurBloc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVTrieurBloc

/********************************************************
* G__KVMultiDettrieur.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__KVMultiDettrieur();

extern "C" void G__set_cpp_environmentG__KVMultiDettrieur() {
  G__cpp_reset_tagtableG__KVMultiDettrieur();
}
#include <new>
extern "C" int G__cpp_dllrevG__KVMultiDettrieur() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* KVTrieur */
static int G__G__KVMultiDettrieur_199_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVTrieur& obj = ((KVTrieur*) G__getstructoffset())->operator=(*(KVTrieur*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVTrieur*) G__getstructoffset())->GetNomCase((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieur*) G__getstructoffset())->SetNomCase((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieur*) G__getstructoffset())->SetNbCases((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVTrieur*) G__getstructoffset())->GetNbCases());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVTrieur*) G__getstructoffset())->GetNumCase((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("GetNumCase: more than 56 var args\n");
   }
      G__letint(result7, 105, (long) ((KVTrieur*) G__getstructoffset())->GetNumCase((void*) G__int(libp->para[0]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[2], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTrieur::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieur::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTrieur::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTrieur::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieur*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieur::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieur::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieur::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_199_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieur::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTrieur G__TKVTrieur;
static int G__G__KVMultiDettrieur_199_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTrieur*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTrieur*) (soff+(sizeof(KVTrieur)*i)))->~G__TKVTrieur();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTrieur*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTrieur*) (soff))->~G__TKVTrieur();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTrieurTranche */
static int G__G__KVMultiDettrieur_256_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurTranche* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTrieurTranche[n];
     } else {
       p = new((void*) gvp) KVTrieurTranche[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTrieurTranche;
     } else {
       p = new((void*) gvp) KVTrieurTranche;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurTranche* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurTranche((Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVTrieurTranche((Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurTranche* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurTranche((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVTrieurTranche((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurTranche* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurTranche(*(KVTrieurTranche*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVTrieurTranche(*(KVTrieurTranche*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVTrieurTranche& obj = ((KVTrieurTranche*) G__getstructoffset())->operator=(*(KVTrieurTranche*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurTranche*) G__getstructoffset())->SetNomVar((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurTranche*) G__getstructoffset())->SetXmin((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurTranche*) G__getstructoffset())->SetXmax((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVTrieurTranche*) G__getstructoffset())->GetNomVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTrieurTranche*) G__getstructoffset())->GetXmin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTrieurTranche*) G__getstructoffset())->GetXmax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTrieurTranche::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurTranche::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTrieurTranche::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTrieurTranche::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurTranche*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurTranche::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieurTranche::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurTranche::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_256_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieurTranche::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTrieurTranche G__TKVTrieurTranche;
static int G__G__KVMultiDettrieur_256_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTrieurTranche*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTrieurTranche*) (soff+(sizeof(KVTrieurTranche)*i)))->~G__TKVTrieurTranche();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTrieurTranche*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTrieurTranche*) (soff))->~G__TKVTrieurTranche();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTrieurLin */
static int G__G__KVMultiDettrieur_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurLin* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTrieurLin[n];
     } else {
       p = new((void*) gvp) KVTrieurLin[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTrieurLin;
     } else {
       p = new((void*) gvp) KVTrieurLin;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurLin* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurLin((Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVTrieurLin((Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurLin* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurLin((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVTrieurLin((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurLin* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurLin(*(KVTrieurLin*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVTrieurLin(*(KVTrieurLin*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVTrieurLin& obj = ((KVTrieurLin*) G__getstructoffset())->operator=(*(KVTrieurLin*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurLin*) G__getstructoffset())->SetNomVar((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurLin*) G__getstructoffset())->SetXmin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurLin*) G__getstructoffset())->SetXmax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVTrieurLin*) G__getstructoffset())->GetNomVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTrieurLin*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTrieurLin*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTrieurLin::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurLin::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTrieurLin::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTrieurLin::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurLin*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurLin::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieurLin::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurLin::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_257_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieurLin::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTrieurLin G__TKVTrieurLin;
static int G__G__KVMultiDettrieur_257_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTrieurLin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTrieurLin*) (soff+(sizeof(KVTrieurLin)*i)))->~G__TKVTrieurLin();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTrieurLin*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTrieurLin*) (soff))->~G__TKVTrieurLin();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTrieurBloc */
static int G__G__KVMultiDettrieur_258_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurBloc*) G__getstructoffset())->initKVTrieurBloc();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurBloc*) G__getstructoffset())->SetNomsCases();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurBloc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTrieurBloc[n];
     } else {
       p = new((void*) gvp) KVTrieurBloc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTrieurBloc;
     } else {
       p = new((void*) gvp) KVTrieurBloc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurBloc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurBloc((Char_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVTrieurBloc((Char_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurBloc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurBloc((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVTrieurBloc((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTrieurBloc* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTrieurBloc(*(KVTrieurBloc*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVTrieurBloc(*(KVTrieurBloc*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVTrieurBloc& obj = ((KVTrieurBloc*) G__getstructoffset())->operator=(*(KVTrieurBloc*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurBloc*) G__getstructoffset())->SetNomVar((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurBloc*) G__getstructoffset())->SetXmin((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurBloc*) G__getstructoffset())->SetXmax((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVTrieurBloc*) G__getstructoffset())->GetNomVar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTrieurBloc*) G__getstructoffset())->GetXmin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTrieurBloc*) G__getstructoffset())->GetXmax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTrieurBloc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurBloc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTrieurBloc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTrieurBloc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTrieurBloc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurBloc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieurBloc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTrieurBloc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDettrieur_258_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTrieurBloc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTrieurBloc G__TKVTrieurBloc;
static int G__G__KVMultiDettrieur_258_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTrieurBloc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTrieurBloc*) (soff+(sizeof(KVTrieurBloc)*i)))->~G__TKVTrieurBloc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTrieurBloc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTrieurBloc*) (soff))->~G__TKVTrieurBloc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* KVTrieur */

/* KVTrieurTranche */

/* KVTrieurLin */

/* KVTrieurBloc */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__KVMultiDettrieur {
 public:
  G__Sizep2memfuncG__KVMultiDettrieur(): p(&G__Sizep2memfuncG__KVMultiDettrieur::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__KVMultiDettrieur::*p)();
};

size_t G__get_sizep2memfuncG__KVMultiDettrieur()
{
  G__Sizep2memfuncG__KVMultiDettrieur a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__KVMultiDettrieur() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur))) {
     KVTrieur *G__Lderived;
     G__Lderived=(KVTrieur*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche))) {
     KVTrieurTranche *G__Lderived;
     G__Lderived=(KVTrieurTranche*)0x1000;
     {
       KVTrieur *G__Lpbase=(KVTrieur*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin))) {
     KVTrieurLin *G__Lderived;
     G__Lderived=(KVTrieurLin*)0x1000;
     {
       KVTrieur *G__Lpbase=(KVTrieur*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc))) {
     KVTrieurBloc *G__Lderived;
     G__Lderived=(KVTrieurBloc*)0x1000;
     {
       KVTrieur *G__Lpbase=(KVTrieur*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc),G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__KVMultiDettrieur() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* KVTrieur */
static void G__setup_memvarKVTrieur(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur));
   { KVTrieur *p; p=(KVTrieur*)0x1000; if (p) { }
   G__memvar_setup((void*)(&KVTrieur::nb),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieur::nb_crea),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_crea=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieur::nb_dest),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_dest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nb_cases)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nb_cases=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->noms_cases)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClonesArray),-1,-1,1,"noms_cases=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTrieurTranche */
static void G__setup_memvarKVTrieurTranche(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche));
   { KVTrieurTranche *p; p=(KVTrieurTranche*)0x1000; if (p) { }
   G__memvar_setup((void*)(&KVTrieurTranche::nb),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieurTranche::nb_crea),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_crea=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieurTranche::nb_dest),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_dest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xtranches)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,1,"xtranches=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nomVar)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"nomVar[80]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTrieurLin */
static void G__setup_memvarKVTrieurLin(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin));
   { KVTrieurLin *p; p=(KVTrieurLin*)0x1000; if (p) { }
   G__memvar_setup((void*)(&KVTrieurLin::nb),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieurLin::nb_crea),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_crea=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieurLin::nb_dest),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_dest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmin)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmax)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"xmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nom_var)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"nom_var[80]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTrieurBloc */
static void G__setup_memvarKVTrieurBloc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc));
   { KVTrieurBloc *p; p=(KVTrieurBloc*)0x1000; if (p) { }
   G__memvar_setup((void*)(&KVTrieurBloc::nb),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieurBloc::nb_crea),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_crea=",0,(char*)NULL);
   G__memvar_setup((void*)(&KVTrieurBloc::nb_dest),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"nb_dest=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmin)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,1,"xmin=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->xmax)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TVectorTlEfloatgR),G__defined_typename("TVector"),-1,1,"xmax=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nomVar)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"nomVar[80]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__KVMultiDettrieur() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncKVTrieur(void) {
   /* KVTrieur */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur));
   G__memfunc_setup("initKVTrieur",1232,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Initialisations", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__KVMultiDettrieur_199_0_7, 117, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieur), -1, 1, 1, 1, 1, 0, "u 'KVTrieur' - 11 - a", "operateur =", (void*) NULL, 0);
   G__memfunc_setup("GetNomCase",966,G__G__KVMultiDettrieur_199_0_8, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNomCase",978,G__G__KVMultiDettrieur_199_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i C - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNbCases",971,G__G__KVMultiDettrieur_199_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNbCases",959,G__G__KVMultiDettrieur_199_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNumCase",972,G__G__KVMultiDettrieur_199_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("GetNumCase",972,G__G__KVMultiDettrieur_199_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 8, 1, 0, "Y - - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__G__KVMultiDettrieur_199_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTrieur::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDettrieur_199_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieur::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDettrieur_199_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTrieur::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDettrieur_199_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTrieur::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDettrieur_199_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDettrieur_199_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieur::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDettrieur_199_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieur::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDettrieur_199_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieur::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDettrieur_199_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieur::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTrieur", 922, G__G__KVMultiDettrieur_199_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTrieurTranche(void) {
   /* KVTrieurTranche */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche));
   G__memfunc_setup("initKVTrieurTranche",1941,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Initialisations", (void*) NULL, 0);
   G__memfunc_setup("SetNomsCases",1208,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Initialisations des noms de cases", (void*) NULL, 0);
   G__memfunc_setup("KVTrieurTranche",1505,G__G__KVMultiDettrieur_256_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche), -1, 0, 0, 1, 1, 0, "", "constructeur par defaut", (void*) NULL, 0);
   G__memfunc_setup("KVTrieurTranche",1505,G__G__KVMultiDettrieur_256_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - nom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTrieurTranche",1505,G__G__KVMultiDettrieur_256_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nbcases C - 'Char_t' 0 - nom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTrieurTranche",1505,G__G__KVMultiDettrieur_256_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche), -1, 0, 1, 1, 1, 0, "u 'KVTrieurTranche' - 11 - a", "constructeur par copie", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__KVMultiDettrieur_256_0_8, 117, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurTranche), -1, 1, 1, 1, 1, 0, "u 'KVTrieurTranche' - 11 - a", "operateur =", (void*) NULL, 0);
   G__memfunc_setup("GetNumCase",972,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 8, 1, 0, "Y - - 0 - argus", "Pour une situation donnee,", (void*) NULL, 1);
   G__memfunc_setup("GetNumCase",972,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", "Pour un x donne,", (void*) NULL, 1);
   G__memfunc_setup("SetNomVar",895,G__G__KVMultiDettrieur_256_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXmin",712,G__G__KVMultiDettrieur_256_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXmax",714,G__G__KVMultiDettrieur_256_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNomVar",883,G__G__KVMultiDettrieur_256_0_14, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmin",700,G__G__KVMultiDettrieur_256_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmax",702,G__G__KVMultiDettrieur_256_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNbCases",971,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", "ajuste le nombre de cases.", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDettrieur_256_0_18, 85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTrieurTranche::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDettrieur_256_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurTranche::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDettrieur_256_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTrieurTranche::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDettrieur_256_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTrieurTranche::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDettrieur_256_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDettrieur_256_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurTranche::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDettrieur_256_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieurTranche::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDettrieur_256_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurTranche::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDettrieur_256_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieurTranche::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTrieurTranche", 1631, G__G__KVMultiDettrieur_256_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTrieurLin(void) {
   /* KVTrieurLin */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin));
   G__memfunc_setup("initKVTrieurLin",1523,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Initialisations", (void*) NULL, 0);
   G__memfunc_setup("SetNomsCases",1208,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", "Initialisations des noms de cases", (void*) NULL, 0);
   G__memfunc_setup("KVTrieurLin",1087,G__G__KVMultiDettrieur_257_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin), -1, 0, 0, 1, 1, 0, "", "constructeur par defaut", (void*) NULL, 0);
   G__memfunc_setup("KVTrieurLin",1087,G__G__KVMultiDettrieur_257_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - nom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTrieurLin",1087,G__G__KVMultiDettrieur_257_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nbcases C - 'Char_t' 0 - nom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTrieurLin",1087,G__G__KVMultiDettrieur_257_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin), -1, 0, 1, 1, 1, 0, "u 'KVTrieurLin' - 11 - a", "constructeur par copie", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__KVMultiDettrieur_257_0_8, 117, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurLin), -1, 1, 1, 1, 1, 0, "u 'KVTrieurLin' - 11 - a", "operateur =", (void*) NULL, 0);
   G__memfunc_setup("GetNumCase",972,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 8, 1, 0, "Y - - 0 - argus", "Pour une situation donnee,", (void*) NULL, 1);
   G__memfunc_setup("GetNumCase",972,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", "Pour un x donne,", (void*) NULL, 1);
   G__memfunc_setup("SetNbCases",971,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", "ajuste le nombre de cases.", (void*) NULL, 1);
   G__memfunc_setup("SetNomVar",895,G__G__KVMultiDettrieur_257_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXmin",712,G__G__KVMultiDettrieur_257_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXmax",714,G__G__KVMultiDettrieur_257_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNomVar",883,G__G__KVMultiDettrieur_257_0_15, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmin",700,G__G__KVMultiDettrieur_257_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmax",702,G__G__KVMultiDettrieur_257_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDettrieur_257_0_18, 85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTrieurLin::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDettrieur_257_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurLin::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDettrieur_257_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTrieurLin::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDettrieur_257_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTrieurLin::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDettrieur_257_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDettrieur_257_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurLin::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDettrieur_257_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieurLin::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDettrieur_257_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurLin::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDettrieur_257_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieurLin::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTrieurLin", 1213, G__G__KVMultiDettrieur_257_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTrieurBloc(void) {
   /* KVTrieurBloc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc));
   G__memfunc_setup("initKVTrieurBloc",1616,G__G__KVMultiDettrieur_258_0_1, 121, -1, -1, 0, 0, 1, 1, 0, "", "Initialisations", (void*) NULL, 0);
   G__memfunc_setup("SetNomsCases",1208,G__G__KVMultiDettrieur_258_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", "Initialisations des noms de cases", (void*) NULL, 0);
   G__memfunc_setup("KVTrieurBloc",1180,G__G__KVMultiDettrieur_258_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc), -1, 0, 0, 1, 1, 0, "", "constructeur par defaut", (void*) NULL, 0);
   G__memfunc_setup("KVTrieurBloc",1180,G__G__KVMultiDettrieur_258_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - nom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTrieurBloc",1180,G__G__KVMultiDettrieur_258_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nbcases C - 'Char_t' 0 - nom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTrieurBloc",1180,G__G__KVMultiDettrieur_258_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc), -1, 0, 1, 1, 1, 0, "u 'KVTrieurBloc' - 11 - a", "constructeur par copie", (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__KVMultiDettrieur_258_0_8, 117, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_KVTrieurBloc), -1, 1, 1, 1, 1, 0, "u 'KVTrieurBloc' - 11 - a", "operateur =", (void*) NULL, 0);
   G__memfunc_setup("GetNumCase",972,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 8, 1, 0, "Y - - 0 - argus", "Pour une situation donnee,", (void*) NULL, 1);
   G__memfunc_setup("GetNumCase",972,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", "Pour un x donne,", (void*) NULL, 1);
   G__memfunc_setup("SetNomVar",895,G__G__KVMultiDettrieur_258_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXmin",712,G__G__KVMultiDettrieur_258_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetXmax",714,G__G__KVMultiDettrieur_258_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetNomVar",883,G__G__KVMultiDettrieur_258_0_14, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmin",700,G__G__KVMultiDettrieur_258_0_15, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetXmax",702,G__G__KVMultiDettrieur_258_0_16, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNbCases",971,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", "ajuste le nombre de cases.", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDettrieur_258_0_18, 85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTrieurBloc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDettrieur_258_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurBloc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDettrieur_258_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTrieurBloc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDettrieur_258_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTrieurBloc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDettrieurLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDettrieur_258_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDettrieur_258_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurBloc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDettrieur_258_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieurBloc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDettrieur_258_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTrieurBloc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDettrieur_258_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTrieurBloc::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTrieurBloc", 1306, G__G__KVMultiDettrieur_258_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__KVMultiDettrieur() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__KVMultiDettrieur() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__KVMultiDettrieur() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__KVMultiDettrieurLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_KVBase = { "KVBase" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_KVTrieur = { "KVTrieur" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_KVTrieurTranche = { "KVTrieurTranche" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_KVTrieurLin = { "KVTrieurLin" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDettrieurLN_KVTrieurBloc = { "KVTrieurBloc" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__KVMultiDettrieur() {
  G__G__KVMultiDettrieurLN_TClass.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TBuffer.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TMemberInspector.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TObject.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TNamed.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TClonesArray.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_KVBase.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_KVTrieur.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_KVTrieurTranche.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_KVTrieurLin.tagnum = -1 ;
  G__G__KVMultiDettrieurLN_KVTrieurBloc.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__KVMultiDettrieur() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_KVBase);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_KVTrieur),sizeof(KVTrieur),-1,65282,"Base class for sortings",G__setup_memvarKVTrieur,G__setup_memfuncKVTrieur);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_TVectorTlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_KVTrieurTranche),sizeof(KVTrieurTranche),-1,65280,"Class for sorting with attached cells",G__setup_memvarKVTrieurTranche,G__setup_memfuncKVTrieurTranche);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_KVTrieurLin),sizeof(KVTrieurLin),-1,65280,"Class for linear sorting",G__setup_memvarKVTrieurLin,G__setup_memfuncKVTrieurLin);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDettrieurLN_KVTrieurBloc),sizeof(KVTrieurBloc),-1,65280,"Class for sorting with detached cells",G__setup_memvarKVTrieurBloc,G__setup_memfuncKVTrieurBloc);
}
extern "C" void G__cpp_setupG__KVMultiDettrieur(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__KVMultiDettrieur()");
  G__set_cpp_environmentG__KVMultiDettrieur();
  G__cpp_setup_tagtableG__KVMultiDettrieur();

  G__cpp_setup_inheritanceG__KVMultiDettrieur();

  G__cpp_setup_typetableG__KVMultiDettrieur();

  G__cpp_setup_memvarG__KVMultiDettrieur();

  G__cpp_setup_memfuncG__KVMultiDettrieur();
  G__cpp_setup_globalG__KVMultiDettrieur();
  G__cpp_setup_funcG__KVMultiDettrieur();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__KVMultiDettrieur();
  return;
}
class G__cpp_setup_initG__KVMultiDettrieur {
  public:
    G__cpp_setup_initG__KVMultiDettrieur() { G__add_setup_func("G__KVMultiDettrieur",(G__incsetup)(&G__cpp_setupG__KVMultiDettrieur)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__KVMultiDettrieur() { G__remove_setup_func("G__KVMultiDettrieur"); }
};
G__cpp_setup_initG__KVMultiDettrieur G__cpp_setup_initializerG__KVMultiDettrieur;

