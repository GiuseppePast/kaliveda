//
// File generated by rootcint at Fri Jul 17 15:49:55 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__KVMultiDetidentification
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__KVMultiDetidentification.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace KVTGIDFunctions {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void KVTGIDFunctions_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("KVTGIDFunctions", 0 /*version*/, "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGIDFunctions.h", 16,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &KVTGIDFunctions_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void KVTGIDFunctions_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void KVIDGraph_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVIDGraph(void *p);
   static void deleteArray_KVIDGraph(void *p);
   static void destruct_KVIDGraph(void *p);
   static void streamer_KVIDGraph(TBuffer &buf, void *obj);
   static Long64_t merge_KVIDGraph(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDGraph*)
   {
      ::KVIDGraph *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDGraph >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDGraph", ::KVIDGraph::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDGraph.h", 25,
                  typeid(::KVIDGraph), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDGraph::Dictionary, isa_proxy, 1,
                  sizeof(::KVIDGraph) );
      instance.SetDelete(&delete_KVIDGraph);
      instance.SetDeleteArray(&deleteArray_KVIDGraph);
      instance.SetDestructor(&destruct_KVIDGraph);
      instance.SetStreamerFunc(&streamer_KVIDGraph);
      instance.SetMerge(&merge_KVIDGraph);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDGraph*)
   {
      return GenerateInitInstanceLocal((::KVIDGraph*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDGraph*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDentifier_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDentifier(void *p = 0);
   static void *newArray_KVIDentifier(Long_t size, void *p);
   static void delete_KVIDentifier(void *p);
   static void deleteArray_KVIDentifier(void *p);
   static void destruct_KVIDentifier(void *p);
   static Long64_t merge_KVIDentifier(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDentifier*)
   {
      ::KVIDentifier *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDentifier >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDentifier", ::KVIDentifier::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDentifier.h", 22,
                  typeid(::KVIDentifier), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDentifier::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDentifier) );
      instance.SetNew(&new_KVIDentifier);
      instance.SetNewArray(&newArray_KVIDentifier);
      instance.SetDelete(&delete_KVIDentifier);
      instance.SetDeleteArray(&deleteArray_KVIDentifier);
      instance.SetDestructor(&destruct_KVIDentifier);
      instance.SetMerge(&merge_KVIDentifier);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDentifier*)
   {
      return GenerateInitInstanceLocal((::KVIDentifier*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDentifier*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDLine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDLine(void *p = 0);
   static void *newArray_KVIDLine(Long_t size, void *p);
   static void delete_KVIDLine(void *p);
   static void deleteArray_KVIDLine(void *p);
   static void destruct_KVIDLine(void *p);
   static void streamer_KVIDLine(TBuffer &buf, void *obj);
   static Long64_t merge_KVIDLine(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDLine*)
   {
      ::KVIDLine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDLine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDLine", ::KVIDLine::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDLine.h", 20,
                  typeid(::KVIDLine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDLine::Dictionary, isa_proxy, 1,
                  sizeof(::KVIDLine) );
      instance.SetNew(&new_KVIDLine);
      instance.SetNewArray(&newArray_KVIDLine);
      instance.SetDelete(&delete_KVIDLine);
      instance.SetDeleteArray(&deleteArray_KVIDLine);
      instance.SetDestructor(&destruct_KVIDLine);
      instance.SetStreamerFunc(&streamer_KVIDLine);
      instance.SetMerge(&merge_KVIDLine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDLine*)
   {
      return GenerateInitInstanceLocal((::KVIDLine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDLine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVSpiderLine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVSpiderLine(void *p = 0);
   static void *newArray_KVSpiderLine(Long_t size, void *p);
   static void delete_KVSpiderLine(void *p);
   static void deleteArray_KVSpiderLine(void *p);
   static void destruct_KVSpiderLine(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVSpiderLine*)
   {
      ::KVSpiderLine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVSpiderLine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVSpiderLine", ::KVSpiderLine::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVSpiderLine.h", 14,
                  typeid(::KVSpiderLine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVSpiderLine::Dictionary, isa_proxy, 4,
                  sizeof(::KVSpiderLine) );
      instance.SetNew(&new_KVSpiderLine);
      instance.SetNewArray(&newArray_KVSpiderLine);
      instance.SetDelete(&delete_KVSpiderLine);
      instance.SetDeleteArray(&deleteArray_KVSpiderLine);
      instance.SetDestructor(&destruct_KVSpiderLine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVSpiderLine*)
   {
      return GenerateInitInstanceLocal((::KVSpiderLine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVSpiderLine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVSpiderPSALine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVSpiderPSALine(void *p = 0);
   static void *newArray_KVSpiderPSALine(Long_t size, void *p);
   static void delete_KVSpiderPSALine(void *p);
   static void deleteArray_KVSpiderPSALine(void *p);
   static void destruct_KVSpiderPSALine(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVSpiderPSALine*)
   {
      ::KVSpiderPSALine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVSpiderPSALine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVSpiderPSALine", ::KVSpiderPSALine::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVSpiderPSALine.h", 10,
                  typeid(::KVSpiderPSALine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVSpiderPSALine::Dictionary, isa_proxy, 4,
                  sizeof(::KVSpiderPSALine) );
      instance.SetNew(&new_KVSpiderPSALine);
      instance.SetNewArray(&newArray_KVSpiderPSALine);
      instance.SetDelete(&delete_KVSpiderPSALine);
      instance.SetDeleteArray(&deleteArray_KVSpiderPSALine);
      instance.SetDestructor(&destruct_KVSpiderPSALine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVSpiderPSALine*)
   {
      return GenerateInitInstanceLocal((::KVSpiderPSALine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVSpiderPSALine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIdentificationResult_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIdentificationResult(void *p = 0);
   static void *newArray_KVIdentificationResult(Long_t size, void *p);
   static void delete_KVIdentificationResult(void *p);
   static void deleteArray_KVIdentificationResult(void *p);
   static void destruct_KVIdentificationResult(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIdentificationResult*)
   {
      ::KVIdentificationResult *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIdentificationResult >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIdentificationResult", ::KVIdentificationResult::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIdentificationResult.h", 8,
                  typeid(::KVIdentificationResult), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIdentificationResult::Dictionary, isa_proxy, 4,
                  sizeof(::KVIdentificationResult) );
      instance.SetNew(&new_KVIdentificationResult);
      instance.SetNewArray(&newArray_KVIdentificationResult);
      instance.SetDelete(&delete_KVIdentificationResult);
      instance.SetDeleteArray(&deleteArray_KVIdentificationResult);
      instance.SetDestructor(&destruct_KVIdentificationResult);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIdentificationResult*)
   {
      return GenerateInitInstanceLocal((::KVIdentificationResult*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIdentificationResult*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDContour_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDContour(void *p = 0);
   static void *newArray_KVIDContour(Long_t size, void *p);
   static void delete_KVIDContour(void *p);
   static void deleteArray_KVIDContour(void *p);
   static void destruct_KVIDContour(void *p);
   static Long64_t merge_KVIDContour(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDContour*)
   {
      ::KVIDContour *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDContour >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDContour", ::KVIDContour::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDContour.h", 17,
                  typeid(::KVIDContour), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDContour::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDContour) );
      instance.SetNew(&new_KVIDContour);
      instance.SetNewArray(&newArray_KVIDContour);
      instance.SetDelete(&delete_KVIDContour);
      instance.SetDeleteArray(&deleteArray_KVIDContour);
      instance.SetDestructor(&destruct_KVIDContour);
      instance.SetMerge(&merge_KVIDContour);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDContour*)
   {
      return GenerateInitInstanceLocal((::KVIDContour*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDContour*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDGridManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDGridManager(void *p = 0);
   static void *newArray_KVIDGridManager(Long_t size, void *p);
   static void delete_KVIDGridManager(void *p);
   static void deleteArray_KVIDGridManager(void *p);
   static void destruct_KVIDGridManager(void *p);
   static void streamer_KVIDGridManager(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDGridManager*)
   {
      ::KVIDGridManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDGridManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDGridManager", ::KVIDGridManager::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDGridManager.h", 20,
                  typeid(::KVIDGridManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDGridManager::Dictionary, isa_proxy, 0,
                  sizeof(::KVIDGridManager) );
      instance.SetNew(&new_KVIDGridManager);
      instance.SetNewArray(&newArray_KVIDGridManager);
      instance.SetDelete(&delete_KVIDGridManager);
      instance.SetDeleteArray(&deleteArray_KVIDGridManager);
      instance.SetDestructor(&destruct_KVIDGridManager);
      instance.SetStreamerFunc(&streamer_KVIDGridManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDGridManager*)
   {
      return GenerateInitInstanceLocal((::KVIDGridManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDGridManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDGrid_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVIDGrid(void *p);
   static void deleteArray_KVIDGrid(void *p);
   static void destruct_KVIDGrid(void *p);
   static Long64_t merge_KVIDGrid(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDGrid*)
   {
      ::KVIDGrid *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDGrid >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDGrid", ::KVIDGrid::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDGrid.h", 25,
                  typeid(::KVIDGrid), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDGrid::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDGrid) );
      instance.SetDelete(&delete_KVIDGrid);
      instance.SetDeleteArray(&deleteArray_KVIDGrid);
      instance.SetDestructor(&destruct_KVIDGrid);
      instance.SetMerge(&merge_KVIDGrid);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDGrid*)
   {
      return GenerateInitInstanceLocal((::KVIDGrid*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDGrid*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTGID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVTGID(void *p);
   static void deleteArray_KVTGID(void *p);
   static void destruct_KVTGID(void *p);
   static void streamer_KVTGID(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTGID*)
   {
      ::KVTGID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTGID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTGID", ::KVTGID::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGID.h", 19,
                  typeid(::KVTGID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTGID::Dictionary, isa_proxy, 1,
                  sizeof(::KVTGID) );
      instance.SetDelete(&delete_KVTGID);
      instance.SetDeleteArray(&deleteArray_KVTGID);
      instance.SetDestructor(&destruct_KVTGID);
      instance.SetStreamerFunc(&streamer_KVTGID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTGID*)
   {
      return GenerateInitInstanceLocal((::KVTGID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTGID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTGIDZ_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTGIDZ(void *p = 0);
   static void *newArray_KVTGIDZ(Long_t size, void *p);
   static void delete_KVTGIDZ(void *p);
   static void deleteArray_KVTGIDZ(void *p);
   static void destruct_KVTGIDZ(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTGIDZ*)
   {
      ::KVTGIDZ *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTGIDZ >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTGIDZ", ::KVTGIDZ::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGIDZ.h", 16,
                  typeid(::KVTGIDZ), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTGIDZ::Dictionary, isa_proxy, 4,
                  sizeof(::KVTGIDZ) );
      instance.SetNew(&new_KVTGIDZ);
      instance.SetNewArray(&newArray_KVTGIDZ);
      instance.SetDelete(&delete_KVTGIDZ);
      instance.SetDeleteArray(&deleteArray_KVTGIDZ);
      instance.SetDestructor(&destruct_KVTGIDZ);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTGIDZ*)
   {
      return GenerateInitInstanceLocal((::KVTGIDZ*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTGIDZ*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTGIDZA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTGIDZA(void *p = 0);
   static void *newArray_KVTGIDZA(Long_t size, void *p);
   static void delete_KVTGIDZA(void *p);
   static void deleteArray_KVTGIDZA(void *p);
   static void destruct_KVTGIDZA(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTGIDZA*)
   {
      ::KVTGIDZA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTGIDZA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTGIDZA", ::KVTGIDZA::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGIDZA.h", 16,
                  typeid(::KVTGIDZA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTGIDZA::Dictionary, isa_proxy, 4,
                  sizeof(::KVTGIDZA) );
      instance.SetNew(&new_KVTGIDZA);
      instance.SetNewArray(&newArray_KVTGIDZA);
      instance.SetDelete(&delete_KVTGIDZA);
      instance.SetDeleteArray(&deleteArray_KVTGIDZA);
      instance.SetDestructor(&destruct_KVTGIDZA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTGIDZA*)
   {
      return GenerateInitInstanceLocal((::KVTGIDZA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTGIDZA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVVirtualIDFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVVirtualIDFitter(void *p);
   static void deleteArray_KVVirtualIDFitter(void *p);
   static void destruct_KVVirtualIDFitter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVVirtualIDFitter*)
   {
      ::KVVirtualIDFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVVirtualIDFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVVirtualIDFitter", ::KVVirtualIDFitter::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVVirtualIDFitter.h", 18,
                  typeid(::KVVirtualIDFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVVirtualIDFitter::Dictionary, isa_proxy, 4,
                  sizeof(::KVVirtualIDFitter) );
      instance.SetDelete(&delete_KVVirtualIDFitter);
      instance.SetDeleteArray(&deleteArray_KVVirtualIDFitter);
      instance.SetDestructor(&destruct_KVVirtualIDFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVVirtualIDFitter*)
   {
      return GenerateInitInstanceLocal((::KVVirtualIDFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVVirtualIDFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTGIDFitter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTGIDFitter(void *p = 0);
   static void *newArray_KVTGIDFitter(Long_t size, void *p);
   static void delete_KVTGIDFitter(void *p);
   static void deleteArray_KVTGIDFitter(void *p);
   static void destruct_KVTGIDFitter(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTGIDFitter*)
   {
      ::KVTGIDFitter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTGIDFitter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTGIDFitter", ::KVTGIDFitter::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGIDFitter.h", 17,
                  typeid(::KVTGIDFitter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTGIDFitter::Dictionary, isa_proxy, 4,
                  sizeof(::KVTGIDFitter) );
      instance.SetNew(&new_KVTGIDFitter);
      instance.SetNewArray(&newArray_KVTGIDFitter);
      instance.SetDelete(&delete_KVTGIDFitter);
      instance.SetDeleteArray(&deleteArray_KVTGIDFitter);
      instance.SetDestructor(&destruct_KVTGIDFitter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTGIDFitter*)
   {
      return GenerateInitInstanceLocal((::KVTGIDFitter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTGIDFitter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDCutContour_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDCutContour(void *p = 0);
   static void *newArray_KVIDCutContour(Long_t size, void *p);
   static void delete_KVIDCutContour(void *p);
   static void deleteArray_KVIDCutContour(void *p);
   static void destruct_KVIDCutContour(void *p);
   static Long64_t merge_KVIDCutContour(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDCutContour*)
   {
      ::KVIDCutContour *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDCutContour >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDCutContour", ::KVIDCutContour::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDCutContour.h", 16,
                  typeid(::KVIDCutContour), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDCutContour::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDCutContour) );
      instance.SetNew(&new_KVIDCutContour);
      instance.SetNewArray(&newArray_KVIDCutContour);
      instance.SetDelete(&delete_KVIDCutContour);
      instance.SetDeleteArray(&deleteArray_KVIDCutContour);
      instance.SetDestructor(&destruct_KVIDCutContour);
      instance.SetMerge(&merge_KVIDCutContour);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDCutContour*)
   {
      return GenerateInitInstanceLocal((::KVIDCutContour*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDCutContour*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTGIDGrid_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTGIDGrid(void *p = 0);
   static void *newArray_KVTGIDGrid(Long_t size, void *p);
   static void delete_KVTGIDGrid(void *p);
   static void deleteArray_KVTGIDGrid(void *p);
   static void destruct_KVTGIDGrid(void *p);
   static Long64_t merge_KVTGIDGrid(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTGIDGrid*)
   {
      ::KVTGIDGrid *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTGIDGrid >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTGIDGrid", ::KVTGIDGrid::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGIDGrid.h", 18,
                  typeid(::KVTGIDGrid), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTGIDGrid::Dictionary, isa_proxy, 4,
                  sizeof(::KVTGIDGrid) );
      instance.SetNew(&new_KVTGIDGrid);
      instance.SetNewArray(&newArray_KVTGIDGrid);
      instance.SetDelete(&delete_KVTGIDGrid);
      instance.SetDeleteArray(&deleteArray_KVTGIDGrid);
      instance.SetDestructor(&destruct_KVTGIDGrid);
      instance.SetMerge(&merge_KVTGIDGrid);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTGIDGrid*)
   {
      return GenerateInitInstanceLocal((::KVTGIDGrid*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTGIDGrid*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVTGIDManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVTGIDManager(void *p = 0);
   static void *newArray_KVTGIDManager(Long_t size, void *p);
   static void delete_KVTGIDManager(void *p);
   static void deleteArray_KVTGIDManager(void *p);
   static void destruct_KVTGIDManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVTGIDManager*)
   {
      ::KVTGIDManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVTGIDManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVTGIDManager", ::KVTGIDManager::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVTGIDManager.h", 20,
                  typeid(::KVTGIDManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVTGIDManager::Dictionary, isa_proxy, 4,
                  sizeof(::KVTGIDManager) );
      instance.SetNew(&new_KVTGIDManager);
      instance.SetNewArray(&newArray_KVTGIDManager);
      instance.SetDelete(&delete_KVTGIDManager);
      instance.SetDeleteArray(&deleteArray_KVTGIDManager);
      instance.SetDestructor(&destruct_KVTGIDManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVTGIDManager*)
   {
      return GenerateInitInstanceLocal((::KVTGIDManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVTGIDManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDZALine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDZALine(void *p = 0);
   static void *newArray_KVIDZALine(Long_t size, void *p);
   static void delete_KVIDZALine(void *p);
   static void deleteArray_KVIDZALine(void *p);
   static void destruct_KVIDZALine(void *p);
   static void streamer_KVIDZALine(TBuffer &buf, void *obj);
   static Long64_t merge_KVIDZALine(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDZALine*)
   {
      ::KVIDZALine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDZALine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDZALine", ::KVIDZALine::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDZALine.h", 18,
                  typeid(::KVIDZALine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDZALine::Dictionary, isa_proxy, 1,
                  sizeof(::KVIDZALine) );
      instance.SetNew(&new_KVIDZALine);
      instance.SetNewArray(&newArray_KVIDZALine);
      instance.SetDelete(&delete_KVIDZALine);
      instance.SetDeleteArray(&deleteArray_KVIDZALine);
      instance.SetDestructor(&destruct_KVIDZALine);
      instance.SetStreamerFunc(&streamer_KVIDZALine);
      instance.SetMerge(&merge_KVIDZALine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDZALine*)
   {
      return GenerateInitInstanceLocal((::KVIDZALine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDZALine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDZAGrid_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDZAGrid(void *p = 0);
   static void *newArray_KVIDZAGrid(Long_t size, void *p);
   static void delete_KVIDZAGrid(void *p);
   static void deleteArray_KVIDZAGrid(void *p);
   static void destruct_KVIDZAGrid(void *p);
   static void streamer_KVIDZAGrid(TBuffer &buf, void *obj);
   static Long64_t merge_KVIDZAGrid(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDZAGrid*)
   {
      ::KVIDZAGrid *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDZAGrid >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDZAGrid", ::KVIDZAGrid::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDZAGrid.h", 20,
                  typeid(::KVIDZAGrid), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDZAGrid::Dictionary, isa_proxy, 1,
                  sizeof(::KVIDZAGrid) );
      instance.SetNew(&new_KVIDZAGrid);
      instance.SetNewArray(&newArray_KVIDZAGrid);
      instance.SetDelete(&delete_KVIDZAGrid);
      instance.SetDeleteArray(&deleteArray_KVIDZAGrid);
      instance.SetDestructor(&destruct_KVIDZAGrid);
      instance.SetStreamerFunc(&streamer_KVIDZAGrid);
      instance.SetMerge(&merge_KVIDZAGrid);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDZAGrid*)
   {
      return GenerateInitInstanceLocal((::KVIDZAGrid*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDZAGrid*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDZGrid_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDZGrid(void *p = 0);
   static void *newArray_KVIDZGrid(Long_t size, void *p);
   static void delete_KVIDZGrid(void *p);
   static void deleteArray_KVIDZGrid(void *p);
   static void destruct_KVIDZGrid(void *p);
   static void streamer_KVIDZGrid(TBuffer &buf, void *obj);
   static Long64_t merge_KVIDZGrid(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDZGrid*)
   {
      ::KVIDZGrid *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDZGrid >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDZGrid", ::KVIDZGrid::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDZAGrid.h", 156,
                  typeid(::KVIDZGrid), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDZGrid::Dictionary, isa_proxy, 1,
                  sizeof(::KVIDZGrid) );
      instance.SetNew(&new_KVIDZGrid);
      instance.SetNewArray(&newArray_KVIDZGrid);
      instance.SetDelete(&delete_KVIDZGrid);
      instance.SetDeleteArray(&deleteArray_KVIDZGrid);
      instance.SetDestructor(&destruct_KVIDZGrid);
      instance.SetStreamerFunc(&streamer_KVIDZGrid);
      instance.SetMerge(&merge_KVIDZGrid);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDZGrid*)
   {
      return GenerateInitInstanceLocal((::KVIDZGrid*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDZGrid*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDZLine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDZLine(void *p = 0);
   static void *newArray_KVIDZLine(Long_t size, void *p);
   static void delete_KVIDZLine(void *p);
   static void deleteArray_KVIDZLine(void *p);
   static void destruct_KVIDZLine(void *p);
   static void streamer_KVIDZLine(TBuffer &buf, void *obj);
   static Long64_t merge_KVIDZLine(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDZLine*)
   {
      ::KVIDZLine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDZLine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDZLine", ::KVIDZLine::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDZALine.h", 86,
                  typeid(::KVIDZLine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDZLine::Dictionary, isa_proxy, 1,
                  sizeof(::KVIDZLine) );
      instance.SetNew(&new_KVIDZLine);
      instance.SetNewArray(&newArray_KVIDZLine);
      instance.SetDelete(&delete_KVIDZLine);
      instance.SetDeleteArray(&deleteArray_KVIDZLine);
      instance.SetDestructor(&destruct_KVIDZLine);
      instance.SetStreamerFunc(&streamer_KVIDZLine);
      instance.SetMerge(&merge_KVIDZLine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDZLine*)
   {
      return GenerateInitInstanceLocal((::KVIDZLine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDZLine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVDroite_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVDroite(void *p = 0);
   static void *newArray_KVDroite(Long_t size, void *p);
   static void delete_KVDroite(void *p);
   static void deleteArray_KVDroite(void *p);
   static void destruct_KVDroite(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVDroite*)
   {
      ::KVDroite *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVDroite >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVDroite", ::KVDroite::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVDroite.h", 13,
                  typeid(::KVDroite), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVDroite::Dictionary, isa_proxy, 4,
                  sizeof(::KVDroite) );
      instance.SetNew(&new_KVDroite);
      instance.SetNewArray(&newArray_KVDroite);
      instance.SetDelete(&delete_KVDroite);
      instance.SetDeleteArray(&deleteArray_KVDroite);
      instance.SetDestructor(&destruct_KVDroite);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVDroite*)
   {
      return GenerateInitInstanceLocal((::KVDroite*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVDroite*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVDP2toIDGridConvertor_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVDP2toIDGridConvertor(void *p = 0);
   static void *newArray_KVDP2toIDGridConvertor(Long_t size, void *p);
   static void delete_KVDP2toIDGridConvertor(void *p);
   static void deleteArray_KVDP2toIDGridConvertor(void *p);
   static void destruct_KVDP2toIDGridConvertor(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVDP2toIDGridConvertor*)
   {
      ::KVDP2toIDGridConvertor *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVDP2toIDGridConvertor >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVDP2toIDGridConvertor", ::KVDP2toIDGridConvertor::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVDP2toIDGridConvertor.h", 21,
                  typeid(::KVDP2toIDGridConvertor), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVDP2toIDGridConvertor::Dictionary, isa_proxy, 4,
                  sizeof(::KVDP2toIDGridConvertor) );
      instance.SetNew(&new_KVDP2toIDGridConvertor);
      instance.SetNewArray(&newArray_KVDP2toIDGridConvertor);
      instance.SetDelete(&delete_KVDP2toIDGridConvertor);
      instance.SetDeleteArray(&deleteArray_KVDP2toIDGridConvertor);
      instance.SetDestructor(&destruct_KVDP2toIDGridConvertor);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVDP2toIDGridConvertor*)
   {
      return GenerateInitInstanceLocal((::KVDP2toIDGridConvertor*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVDP2toIDGridConvertor*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDZAContour_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDZAContour(void *p = 0);
   static void *newArray_KVIDZAContour(Long_t size, void *p);
   static void delete_KVIDZAContour(void *p);
   static void deleteArray_KVIDZAContour(void *p);
   static void destruct_KVIDZAContour(void *p);
   static Long64_t merge_KVIDZAContour(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDZAContour*)
   {
      ::KVIDZAContour *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDZAContour >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDZAContour", ::KVIDZAContour::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDZAContour.h", 16,
                  typeid(::KVIDZAContour), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDZAContour::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDZAContour) );
      instance.SetNew(&new_KVIDZAContour);
      instance.SetNewArray(&newArray_KVIDZAContour);
      instance.SetDelete(&delete_KVIDZAContour);
      instance.SetDeleteArray(&deleteArray_KVIDZAContour);
      instance.SetDestructor(&destruct_KVIDZAContour);
      instance.SetMerge(&merge_KVIDZAContour);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDZAContour*)
   {
      return GenerateInitInstanceLocal((::KVIDZAContour*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDZAContour*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_KVIDMap(void *p);
   static void deleteArray_KVIDMap(void *p);
   static void destruct_KVIDMap(void *p);
   static Long64_t merge_KVIDMap(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDMap*)
   {
      ::KVIDMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDMap", ::KVIDMap::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDMap.h", 16,
                  typeid(::KVIDMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDMap::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDMap) );
      instance.SetDelete(&delete_KVIDMap);
      instance.SetDeleteArray(&deleteArray_KVIDMap);
      instance.SetDestructor(&destruct_KVIDMap);
      instance.SetMerge(&merge_KVIDMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDMap*)
   {
      return GenerateInitInstanceLocal((::KVIDMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDSubCodeManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDSubCodeManager(void *p = 0);
   static void *newArray_KVIDSubCodeManager(Long_t size, void *p);
   static void delete_KVIDSubCodeManager(void *p);
   static void deleteArray_KVIDSubCodeManager(void *p);
   static void destruct_KVIDSubCodeManager(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDSubCodeManager*)
   {
      ::KVIDSubCodeManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDSubCodeManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDSubCodeManager", ::KVIDSubCodeManager::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDSubCodeManager.h", 12,
                  typeid(::KVIDSubCodeManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDSubCodeManager::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDSubCodeManager) );
      instance.SetNew(&new_KVIDSubCodeManager);
      instance.SetNewArray(&newArray_KVIDSubCodeManager);
      instance.SetDelete(&delete_KVIDSubCodeManager);
      instance.SetDeleteArray(&deleteArray_KVIDSubCodeManager);
      instance.SetDestructor(&destruct_KVIDSubCodeManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDSubCodeManager*)
   {
      return GenerateInitInstanceLocal((::KVIDSubCodeManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDSubCodeManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVIDCutLine_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVIDCutLine(void *p = 0);
   static void *newArray_KVIDCutLine(Long_t size, void *p);
   static void delete_KVIDCutLine(void *p);
   static void deleteArray_KVIDCutLine(void *p);
   static void destruct_KVIDCutLine(void *p);
   static Long64_t merge_KVIDCutLine(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVIDCutLine*)
   {
      ::KVIDCutLine *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVIDCutLine >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVIDCutLine", ::KVIDCutLine::Class_Version(), "/home/john/software/sources/kaliveda.git/KVMultiDet/identification/KVIDCutLine.h", 17,
                  typeid(::KVIDCutLine), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVIDCutLine::Dictionary, isa_proxy, 4,
                  sizeof(::KVIDCutLine) );
      instance.SetNew(&new_KVIDCutLine);
      instance.SetNewArray(&newArray_KVIDCutLine);
      instance.SetDelete(&delete_KVIDCutLine);
      instance.SetDeleteArray(&deleteArray_KVIDCutLine);
      instance.SetDestructor(&destruct_KVIDCutLine);
      instance.SetMerge(&merge_KVIDCutLine);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVIDCutLine*)
   {
      return GenerateInitInstanceLocal((::KVIDCutLine*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVIDCutLine*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr KVIDGraph::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDGraph::Class_Name()
{
   return "KVIDGraph";
}

//______________________________________________________________________________
const char *KVIDGraph::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGraph*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDGraph::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGraph*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDGraph::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGraph*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDGraph::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGraph*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDentifier::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDentifier::Class_Name()
{
   return "KVIDentifier";
}

//______________________________________________________________________________
const char *KVIDentifier::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDentifier*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDentifier::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDentifier*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDentifier::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDentifier*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDentifier::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDentifier*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDLine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDLine::Class_Name()
{
   return "KVIDLine";
}

//______________________________________________________________________________
const char *KVIDLine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDLine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDLine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDLine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDLine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDLine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDLine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDLine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVSpiderLine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVSpiderLine::Class_Name()
{
   return "KVSpiderLine";
}

//______________________________________________________________________________
const char *KVSpiderLine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderLine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVSpiderLine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderLine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVSpiderLine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderLine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVSpiderLine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderLine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVSpiderPSALine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVSpiderPSALine::Class_Name()
{
   return "KVSpiderPSALine";
}

//______________________________________________________________________________
const char *KVSpiderPSALine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderPSALine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVSpiderPSALine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderPSALine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVSpiderPSALine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderPSALine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVSpiderPSALine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVSpiderPSALine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIdentificationResult::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIdentificationResult::Class_Name()
{
   return "KVIdentificationResult";
}

//______________________________________________________________________________
const char *KVIdentificationResult::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIdentificationResult*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIdentificationResult::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIdentificationResult*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIdentificationResult::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIdentificationResult*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIdentificationResult::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIdentificationResult*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDContour::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDContour::Class_Name()
{
   return "KVIDContour";
}

//______________________________________________________________________________
const char *KVIDContour::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDContour*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDContour::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDContour*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDContour::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDContour*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDContour::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDContour*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDGridManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDGridManager::Class_Name()
{
   return "KVIDGridManager";
}

//______________________________________________________________________________
const char *KVIDGridManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGridManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDGridManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGridManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDGridManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGridManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDGridManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGridManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDGrid::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDGrid::Class_Name()
{
   return "KVIDGrid";
}

//______________________________________________________________________________
const char *KVIDGrid::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGrid*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDGrid::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGrid*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDGrid::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGrid*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDGrid::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDGrid*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTGID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTGID::Class_Name()
{
   return "KVTGID";
}

//______________________________________________________________________________
const char *KVTGID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTGID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTGID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTGID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTGIDZ::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTGIDZ::Class_Name()
{
   return "KVTGIDZ";
}

//______________________________________________________________________________
const char *KVTGIDZ::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZ*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTGIDZ::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZ*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTGIDZ::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZ*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTGIDZ::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZ*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTGIDZA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTGIDZA::Class_Name()
{
   return "KVTGIDZA";
}

//______________________________________________________________________________
const char *KVTGIDZA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTGIDZA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTGIDZA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTGIDZA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDZA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVVirtualIDFitter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVVirtualIDFitter::Class_Name()
{
   return "KVVirtualIDFitter";
}

//______________________________________________________________________________
const char *KVVirtualIDFitter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVVirtualIDFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVVirtualIDFitter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVVirtualIDFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVVirtualIDFitter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVVirtualIDFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVVirtualIDFitter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVVirtualIDFitter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTGIDFitter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTGIDFitter::Class_Name()
{
   return "KVTGIDFitter";
}

//______________________________________________________________________________
const char *KVTGIDFitter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDFitter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTGIDFitter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDFitter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTGIDFitter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDFitter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTGIDFitter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDFitter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDCutContour::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDCutContour::Class_Name()
{
   return "KVIDCutContour";
}

//______________________________________________________________________________
const char *KVIDCutContour::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutContour*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDCutContour::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutContour*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDCutContour::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutContour*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDCutContour::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutContour*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTGIDGrid::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTGIDGrid::Class_Name()
{
   return "KVTGIDGrid";
}

//______________________________________________________________________________
const char *KVTGIDGrid::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDGrid*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTGIDGrid::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDGrid*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTGIDGrid::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDGrid*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTGIDGrid::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDGrid*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVTGIDManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVTGIDManager::Class_Name()
{
   return "KVTGIDManager";
}

//______________________________________________________________________________
const char *KVTGIDManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVTGIDManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVTGIDManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVTGIDManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVTGIDManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDZALine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDZALine::Class_Name()
{
   return "KVIDZALine";
}

//______________________________________________________________________________
const char *KVIDZALine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZALine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDZALine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZALine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDZALine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZALine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDZALine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZALine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDZAGrid::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDZAGrid::Class_Name()
{
   return "KVIDZAGrid";
}

//______________________________________________________________________________
const char *KVIDZAGrid::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAGrid*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDZAGrid::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAGrid*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDZAGrid::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAGrid*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDZAGrid::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAGrid*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDZGrid::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDZGrid::Class_Name()
{
   return "KVIDZGrid";
}

//______________________________________________________________________________
const char *KVIDZGrid::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZGrid*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDZGrid::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZGrid*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDZGrid::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZGrid*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDZGrid::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZGrid*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDZLine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDZLine::Class_Name()
{
   return "KVIDZLine";
}

//______________________________________________________________________________
const char *KVIDZLine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZLine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDZLine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZLine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDZLine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZLine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDZLine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZLine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVDroite::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVDroite::Class_Name()
{
   return "KVDroite";
}

//______________________________________________________________________________
const char *KVDroite::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVDroite*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVDroite::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVDroite*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVDroite::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVDroite*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVDroite::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVDroite*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVDP2toIDGridConvertor::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVDP2toIDGridConvertor::Class_Name()
{
   return "KVDP2toIDGridConvertor";
}

//______________________________________________________________________________
const char *KVDP2toIDGridConvertor::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVDP2toIDGridConvertor*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVDP2toIDGridConvertor::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVDP2toIDGridConvertor*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVDP2toIDGridConvertor::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVDP2toIDGridConvertor*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVDP2toIDGridConvertor::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVDP2toIDGridConvertor*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDZAContour::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDZAContour::Class_Name()
{
   return "KVIDZAContour";
}

//______________________________________________________________________________
const char *KVIDZAContour::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAContour*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDZAContour::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAContour*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDZAContour::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAContour*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDZAContour::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDZAContour*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDMap::Class_Name()
{
   return "KVIDMap";
}

//______________________________________________________________________________
const char *KVIDMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDSubCodeManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDSubCodeManager::Class_Name()
{
   return "KVIDSubCodeManager";
}

//______________________________________________________________________________
const char *KVIDSubCodeManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDSubCodeManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDSubCodeManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDSubCodeManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDSubCodeManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDSubCodeManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDSubCodeManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDSubCodeManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVIDCutLine::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVIDCutLine::Class_Name()
{
   return "KVIDCutLine";
}

//______________________________________________________________________________
const char *KVIDCutLine::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutLine*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVIDCutLine::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutLine*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVIDCutLine::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutLine*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVIDCutLine::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVIDCutLine*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void KVTGIDFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTGIDFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVTGIDFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVTGIDFitter::Class(),this);
   }
}

//______________________________________________________________________________
void KVTGIDFitter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTGIDFitter.
      TClass *R__cl = ::KVTGIDFitter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLight", &fLight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZorA", &fZorA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPar", &fPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*zd", &zd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ad", &ad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*xd", &xd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*yd", &yd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "irc", &irc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*istate", &istate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTGID", &fTGID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      KVVirtualIDFitter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTGIDFitter(void *p) {
      return  p ? new(p) ::KVTGIDFitter : new ::KVTGIDFitter;
   }
   static void *newArray_KVTGIDFitter(Long_t nElements, void *p) {
      return p ? new(p) ::KVTGIDFitter[nElements] : new ::KVTGIDFitter[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTGIDFitter(void *p) {
      delete ((::KVTGIDFitter*)p);
   }
   static void deleteArray_KVTGIDFitter(void *p) {
      delete [] ((::KVTGIDFitter*)p);
   }
   static void destruct_KVTGIDFitter(void *p) {
      typedef ::KVTGIDFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVTGIDFitter

//______________________________________________________________________________
void KVTGID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTGID.
      TClass *R__cl = ::KVTGID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID_min", &fID_min);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID_max", &fID_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTGIDFunctionName", &fTGIDFunctionName);
      R__insp.InspectMember(fTGIDFunctionName, "fTGIDFunctionName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLambda", &fLambda);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMu", &fMu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fG", &fG);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdx", &fPdx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPdy", &fPdy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAlpha", &fAlpha);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeta", &fBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNu", &fNu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXi", &fXi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEta", &fEta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fType", &fType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLight", &fLight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZorA", &fZorA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMassFormula", &fMassFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRuns", &fRuns);
      R__insp.InspectMember(fRuns, "fRuns.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVarX", &fVarX);
      R__insp.InspectMember(fVarX, "fVarX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVarY", &fVarY);
      R__insp.InspectMember(fVarY, "fVarY.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescopes", &fTelescopes);
      R__insp.InspectMember(fTelescopes, "fTelescopes.");
      TF1::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVTGID(void *p) {
      delete ((::KVTGID*)p);
   }
   static void deleteArray_KVTGID(void *p) {
      delete [] ((::KVTGID*)p);
   }
   static void destruct_KVTGID(void *p) {
      typedef ::KVTGID current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVTGID(TBuffer &buf, void *obj) {
      ((::KVTGID*)obj)->::KVTGID::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVTGID

//______________________________________________________________________________
void KVTGIDZ::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTGIDZ.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVTGIDZ::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVTGIDZ::Class(),this);
   }
}

//______________________________________________________________________________
void KVTGIDZ::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTGIDZ.
      TClass *R__cl = ::KVTGIDZ::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVTGID::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTGIDZ(void *p) {
      return  p ? new(p) ::KVTGIDZ : new ::KVTGIDZ;
   }
   static void *newArray_KVTGIDZ(Long_t nElements, void *p) {
      return p ? new(p) ::KVTGIDZ[nElements] : new ::KVTGIDZ[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTGIDZ(void *p) {
      delete ((::KVTGIDZ*)p);
   }
   static void deleteArray_KVTGIDZ(void *p) {
      delete [] ((::KVTGIDZ*)p);
   }
   static void destruct_KVTGIDZ(void *p) {
      typedef ::KVTGIDZ current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVTGIDZ

//______________________________________________________________________________
void KVTGIDZA::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTGIDZA.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVTGIDZA::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVTGIDZA::Class(),this);
   }
}

//______________________________________________________________________________
void KVTGIDZA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTGIDZA.
      TClass *R__cl = ::KVTGIDZA::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVTGIDZ::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTGIDZA(void *p) {
      return  p ? new(p) ::KVTGIDZA : new ::KVTGIDZA;
   }
   static void *newArray_KVTGIDZA(Long_t nElements, void *p) {
      return p ? new(p) ::KVTGIDZA[nElements] : new ::KVTGIDZA[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTGIDZA(void *p) {
      delete ((::KVTGIDZA*)p);
   }
   static void deleteArray_KVTGIDZA(void *p) {
      delete [] ((::KVTGIDZA*)p);
   }
   static void destruct_KVTGIDZA(void *p) {
      typedef ::KVTGIDZA current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVTGIDZA

//______________________________________________________________________________
void KVTGIDManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTGIDManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVTGIDManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVTGIDManager::Class(),this);
   }
}

//______________________________________________________________________________
void KVTGIDManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTGIDManager.
      TClass *R__cl = ::KVTGIDManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIDList", &fIDList);
      R__insp.InspectMember(fIDList, "fIDList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fID_max", &fID_max);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", &fStatus);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTGIDManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KVTGIDManager : new ::KVTGIDManager;
   }
   static void *newArray_KVTGIDManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KVTGIDManager[nElements] : new ::KVTGIDManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTGIDManager(void *p) {
      delete ((::KVTGIDManager*)p);
   }
   static void deleteArray_KVTGIDManager(void *p) {
      delete [] ((::KVTGIDManager*)p);
   }
   static void destruct_KVTGIDManager(void *p) {
      typedef ::KVTGIDManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVTGIDManager

//______________________________________________________________________________
void KVTGIDGrid::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVTGIDGrid.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVTGIDGrid::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVTGIDGrid::Class(),this);
   }
}

//______________________________________________________________________________
void KVTGIDGrid::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVTGIDGrid.
      TClass *R__cl = ::KVTGIDGrid::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTGID", &fTGID);
      KVIDZAGrid::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVTGIDGrid(void *p) {
      return  p ? new(p) ::KVTGIDGrid : new ::KVTGIDGrid;
   }
   static void *newArray_KVTGIDGrid(Long_t nElements, void *p) {
      return p ? new(p) ::KVTGIDGrid[nElements] : new ::KVTGIDGrid[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVTGIDGrid(void *p) {
      delete ((::KVTGIDGrid*)p);
   }
   static void deleteArray_KVTGIDGrid(void *p) {
      delete [] ((::KVTGIDGrid*)p);
   }
   static void destruct_KVTGIDGrid(void *p) {
      typedef ::KVTGIDGrid current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVTGIDGrid(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVTGIDGrid*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVTGIDGrid

//______________________________________________________________________________
void KVIdentificationResult::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIdentificationResult.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIdentificationResult::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIdentificationResult::Class(),this);
   }
}

//______________________________________________________________________________
void KVIdentificationResult::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIdentificationResult.
      TClass *R__cl = ::KVIdentificationResult::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IDattempted", &IDattempted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IDOK", &IDOK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IDcode", &IDcode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zident", &Zident);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Aident", &Aident);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IDquality", &IDquality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A", &A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "PID", &PID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaEpedestal", &deltaEpedestal);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIdentificationResult(void *p) {
      return  p ? new(p) ::KVIdentificationResult : new ::KVIdentificationResult;
   }
   static void *newArray_KVIdentificationResult(Long_t nElements, void *p) {
      return p ? new(p) ::KVIdentificationResult[nElements] : new ::KVIdentificationResult[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIdentificationResult(void *p) {
      delete ((::KVIdentificationResult*)p);
   }
   static void deleteArray_KVIdentificationResult(void *p) {
      delete [] ((::KVIdentificationResult*)p);
   }
   static void destruct_KVIdentificationResult(void *p) {
      typedef ::KVIdentificationResult current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVIdentificationResult

//______________________________________________________________________________
void KVIDSubCodeManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDSubCodeManager.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDSubCodeManager::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDSubCodeManager::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDSubCodeManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDSubCodeManager.
      TClass *R__cl = ::KVIDSubCodeManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNbits", &fNbits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMSB", &fMSB);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDSubCodeManager(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KVIDSubCodeManager : new ::KVIDSubCodeManager;
   }
   static void *newArray_KVIDSubCodeManager(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KVIDSubCodeManager[nElements] : new ::KVIDSubCodeManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDSubCodeManager(void *p) {
      delete ((::KVIDSubCodeManager*)p);
   }
   static void deleteArray_KVIDSubCodeManager(void *p) {
      delete [] ((::KVIDSubCodeManager*)p);
   }
   static void destruct_KVIDSubCodeManager(void *p) {
      typedef ::KVIDSubCodeManager current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVIDSubCodeManager

//______________________________________________________________________________
void KVVirtualIDFitter::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVVirtualIDFitter.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVVirtualIDFitter::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVVirtualIDFitter::Class(),this);
   }
}

//______________________________________________________________________________
void KVVirtualIDFitter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVVirtualIDFitter.
      TClass *R__cl = ::KVVirtualIDFitter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGrid", &fGrid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPad", &fPad);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVVirtualIDFitter(void *p) {
      delete ((::KVVirtualIDFitter*)p);
   }
   static void deleteArray_KVVirtualIDFitter(void *p) {
      delete [] ((::KVVirtualIDFitter*)p);
   }
   static void destruct_KVVirtualIDFitter(void *p) {
      typedef ::KVVirtualIDFitter current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVVirtualIDFitter

//______________________________________________________________________________
void KVDroite::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVDroite.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVDroite::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVDroite::Class(),this);
   }
}

//______________________________________________________________________________
void KVDroite::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVDroite.
      TClass *R__cl = ::KVDroite::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_a0", &_a0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_theta", &_theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_is_initialized", &_is_initialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_f", &_f);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVDroite(void *p) {
      return  p ? new(p) ::KVDroite : new ::KVDroite;
   }
   static void *newArray_KVDroite(Long_t nElements, void *p) {
      return p ? new(p) ::KVDroite[nElements] : new ::KVDroite[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVDroite(void *p) {
      delete ((::KVDroite*)p);
   }
   static void deleteArray_KVDroite(void *p) {
      delete [] ((::KVDroite*)p);
   }
   static void destruct_KVDroite(void *p) {
      typedef ::KVDroite current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVDroite

//______________________________________________________________________________
void KVSpiderLine::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVSpiderLine.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVSpiderLine::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVSpiderLine::Class(),this);
   }
}

//______________________________________________________________________________
void KVSpiderLine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVSpiderLine.
      TClass *R__cl = ::KVSpiderLine::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_line", &_line);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_iline", &_iline);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*_ff", &_ff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_z", &_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_a", &_a);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_filled", &_filled);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pow", &_pow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_fitStatus", &_fitStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_nAcceptedPoints", &_nAcceptedPoints);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pointsCounter", &_pointsCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "_pdy", &_pdy);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVSpiderLine(void *p) {
      return  p ? new(p) ::KVSpiderLine : new ::KVSpiderLine;
   }
   static void *newArray_KVSpiderLine(Long_t nElements, void *p) {
      return p ? new(p) ::KVSpiderLine[nElements] : new ::KVSpiderLine[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVSpiderLine(void *p) {
      delete ((::KVSpiderLine*)p);
   }
   static void deleteArray_KVSpiderLine(void *p) {
      delete [] ((::KVSpiderLine*)p);
   }
   static void destruct_KVSpiderLine(void *p) {
      typedef ::KVSpiderLine current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVSpiderLine

//______________________________________________________________________________
void KVSpiderPSALine::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVSpiderPSALine.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVSpiderPSALine::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVSpiderPSALine::Class(),this);
   }
}

//______________________________________________________________________________
void KVSpiderPSALine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVSpiderPSALine.
      TClass *R__cl = ::KVSpiderPSALine::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVSpiderLine::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVSpiderPSALine(void *p) {
      return  p ? new(p) ::KVSpiderPSALine : new ::KVSpiderPSALine;
   }
   static void *newArray_KVSpiderPSALine(Long_t nElements, void *p) {
      return p ? new(p) ::KVSpiderPSALine[nElements] : new ::KVSpiderPSALine[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVSpiderPSALine(void *p) {
      delete ((::KVSpiderPSALine*)p);
   }
   static void deleteArray_KVSpiderPSALine(void *p) {
      delete [] ((::KVSpiderPSALine*)p);
   }
   static void destruct_KVSpiderPSALine(void *p) {
      typedef ::KVSpiderPSALine current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVSpiderPSALine

//______________________________________________________________________________
void KVDP2toIDGridConvertor::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVDP2toIDGridConvertor.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVDP2toIDGridConvertor::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVDP2toIDGridConvertor::Class(),this);
   }
}

//______________________________________________________________________________
void KVDP2toIDGridConvertor::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVDP2toIDGridConvertor.
      TClass *R__cl = ::KVDP2toIDGridConvertor::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGridClass", &fGridClass);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGrids", &fGrids);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVDP2toIDGridConvertor(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KVDP2toIDGridConvertor : new ::KVDP2toIDGridConvertor;
   }
   static void *newArray_KVDP2toIDGridConvertor(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::KVDP2toIDGridConvertor[nElements] : new ::KVDP2toIDGridConvertor[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVDP2toIDGridConvertor(void *p) {
      delete ((::KVDP2toIDGridConvertor*)p);
   }
   static void deleteArray_KVDP2toIDGridConvertor(void *p) {
      delete [] ((::KVDP2toIDGridConvertor*)p);
   }
   static void destruct_KVDP2toIDGridConvertor(void *p) {
      typedef ::KVDP2toIDGridConvertor current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVDP2toIDGridConvertor

//______________________________________________________________________________
void KVIDentifier::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDentifier.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDentifier::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDentifier::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDentifier::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDentifier.
      TClass *R__cl = ::KVIDentifier::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fParent", &fParent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIon", &fIon);
      R__insp.InspectMember(fIon, "fIon.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGridOnlyZId", &fGridOnlyZId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMassFormula", &fMassFormula);
      TCutG::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDentifier(void *p) {
      return  p ? new(p) ::KVIDentifier : new ::KVIDentifier;
   }
   static void *newArray_KVIDentifier(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDentifier[nElements] : new ::KVIDentifier[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDentifier(void *p) {
      delete ((::KVIDentifier*)p);
   }
   static void deleteArray_KVIDentifier(void *p) {
      delete [] ((::KVIDentifier*)p);
   }
   static void destruct_KVIDentifier(void *p) {
      typedef ::KVIDentifier current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDentifier(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDentifier*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDentifier

//______________________________________________________________________________
void KVIDGraph::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDGraph.
      TClass *R__cl = ::KVIDGraph::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &fQObject);
      R__insp.InspectMember(fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOnlyZId", &fOnlyZId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIdentifiers", &fIdentifiers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCuts", &fCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPar", &fPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastScaleX", &fLastScaleX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastScaleY", &fLastScaleY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPad", &fPad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunList", &fRunList);
      R__insp.InspectMember(fRunList, "fRunList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTelescopes", &fTelescopes);
      R__insp.InspectMember(fTelescopes, "fTelescopes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDyName", &fDyName);
      R__insp.InspectMember(fDyName, "fDyName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPattern", &fPattern);
      R__insp.InspectMember(fPattern, "fPattern.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMassFormula", &fMassFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLastSavedVersion", &fLastSavedVersion);
      TCutG::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVIDGraph(void *p) {
      delete ((::KVIDGraph*)p);
   }
   static void deleteArray_KVIDGraph(void *p) {
      delete [] ((::KVIDGraph*)p);
   }
   static void destruct_KVIDGraph(void *p) {
      typedef ::KVIDGraph current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDGraph(TBuffer &buf, void *obj) {
      ((::KVIDGraph*)obj)->::KVIDGraph::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDGraph(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDGraph*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDGraph

//______________________________________________________________________________
void KVIDLine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDLine.
      TClass *R__cl = ::KVIDLine::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDentifier::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDLine(void *p) {
      return  p ? new(p) ::KVIDLine : new ::KVIDLine;
   }
   static void *newArray_KVIDLine(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDLine[nElements] : new ::KVIDLine[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDLine(void *p) {
      delete ((::KVIDLine*)p);
   }
   static void deleteArray_KVIDLine(void *p) {
      delete [] ((::KVIDLine*)p);
   }
   static void destruct_KVIDLine(void *p) {
      typedef ::KVIDLine current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDLine(TBuffer &buf, void *obj) {
      ((::KVIDLine*)obj)->::KVIDLine::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDLine(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDLine*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDLine

//______________________________________________________________________________
void KVIDContour::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDContour.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDContour::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDContour::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDContour::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDContour.
      TClass *R__cl = ::KVIDContour::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDentifier::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDContour(void *p) {
      return  p ? new(p) ::KVIDContour : new ::KVIDContour;
   }
   static void *newArray_KVIDContour(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDContour[nElements] : new ::KVIDContour[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDContour(void *p) {
      delete ((::KVIDContour*)p);
   }
   static void deleteArray_KVIDContour(void *p) {
      delete [] ((::KVIDContour*)p);
   }
   static void destruct_KVIDContour(void *p) {
      typedef ::KVIDContour current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDContour(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDContour*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDContour

//______________________________________________________________________________
void KVIDCutContour::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDCutContour.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDCutContour::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDCutContour::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDCutContour::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDCutContour.
      TClass *R__cl = ::KVIDCutContour::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExclusive", &fExclusive);
      KVIDContour::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDCutContour(void *p) {
      return  p ? new(p) ::KVIDCutContour : new ::KVIDCutContour;
   }
   static void *newArray_KVIDCutContour(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDCutContour[nElements] : new ::KVIDCutContour[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDCutContour(void *p) {
      delete ((::KVIDCutContour*)p);
   }
   static void deleteArray_KVIDCutContour(void *p) {
      delete [] ((::KVIDCutContour*)p);
   }
   static void destruct_KVIDCutContour(void *p) {
      typedef ::KVIDCutContour current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDCutContour(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDCutContour*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDCutContour

//______________________________________________________________________________
void KVIDCutLine::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDCutLine.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDCutLine::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDCutLine::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDCutLine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDCutLine.
      TClass *R__cl = ::KVIDCutLine::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAcceptedDirection", &fAcceptedDirection);
      R__insp.InspectMember(fAcceptedDirection, "fAcceptedDirection.");
      KVIDLine::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDCutLine(void *p) {
      return  p ? new(p) ::KVIDCutLine : new ::KVIDCutLine;
   }
   static void *newArray_KVIDCutLine(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDCutLine[nElements] : new ::KVIDCutLine[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDCutLine(void *p) {
      delete ((::KVIDCutLine*)p);
   }
   static void deleteArray_KVIDCutLine(void *p) {
      delete [] ((::KVIDCutLine*)p);
   }
   static void destruct_KVIDCutLine(void *p) {
      typedef ::KVIDCutLine current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDCutLine(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDCutLine*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDCutLine

//______________________________________________________________________________
void KVIDZAContour::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDZAContour.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDZAContour::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDZAContour::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDZAContour::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDZAContour.
      TClass *R__cl = ::KVIDZAContour::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDContour::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDZAContour(void *p) {
      return  p ? new(p) ::KVIDZAContour : new ::KVIDZAContour;
   }
   static void *newArray_KVIDZAContour(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDZAContour[nElements] : new ::KVIDZAContour[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDZAContour(void *p) {
      delete ((::KVIDZAContour*)p);
   }
   static void deleteArray_KVIDZAContour(void *p) {
      delete [] ((::KVIDZAContour*)p);
   }
   static void destruct_KVIDZAContour(void *p) {
      typedef ::KVIDZAContour current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDZAContour(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDZAContour*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDZAContour

//______________________________________________________________________________
void KVIDZALine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDZALine.
      TClass *R__cl = ::KVIDZALine::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth", &fWidth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLineWithWidth", &fLineWithWidth);
      KVIDLine::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDZALine(void *p) {
      return  p ? new(p) ::KVIDZALine : new ::KVIDZALine;
   }
   static void *newArray_KVIDZALine(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDZALine[nElements] : new ::KVIDZALine[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDZALine(void *p) {
      delete ((::KVIDZALine*)p);
   }
   static void deleteArray_KVIDZALine(void *p) {
      delete [] ((::KVIDZALine*)p);
   }
   static void destruct_KVIDZALine(void *p) {
      typedef ::KVIDZALine current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDZALine(TBuffer &buf, void *obj) {
      ((::KVIDZALine*)obj)->::KVIDZALine::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDZALine(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDZALine*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDZALine

//______________________________________________________________________________
void KVIDZLine::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDZLine.
      TClass *R__cl = ::KVIDZLine::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDZALine::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDZLine(void *p) {
      return  p ? new(p) ::KVIDZLine : new ::KVIDZLine;
   }
   static void *newArray_KVIDZLine(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDZLine[nElements] : new ::KVIDZLine[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDZLine(void *p) {
      delete ((::KVIDZLine*)p);
   }
   static void deleteArray_KVIDZLine(void *p) {
      delete [] ((::KVIDZLine*)p);
   }
   static void destruct_KVIDZLine(void *p) {
      typedef ::KVIDZLine current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDZLine(TBuffer &buf, void *obj) {
      ((::KVIDZLine*)obj)->::KVIDZLine::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDZLine(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDZLine*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDZLine

//______________________________________________________________________________
void KVIDMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDMap.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDMap::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDMap::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDMap.
      TClass *R__cl = ::KVIDMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDGraph::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVIDMap(void *p) {
      delete ((::KVIDMap*)p);
   }
   static void deleteArray_KVIDMap(void *p) {
      delete [] ((::KVIDMap*)p);
   }
   static void destruct_KVIDMap(void *p) {
      typedef ::KVIDMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDMap(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDMap*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDMap

//______________________________________________________________________________
void KVIDGrid::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDGrid.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVIDGrid::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVIDGrid::Class(),this);
   }
}

//______________________________________________________________________________
void KVIDGrid::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDGrid.
      TClass *R__cl = ::KVIDGrid::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDGraph::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_KVIDGrid(void *p) {
      delete ((::KVIDGrid*)p);
   }
   static void deleteArray_KVIDGrid(void *p) {
      delete [] ((::KVIDGrid*)p);
   }
   static void destruct_KVIDGrid(void *p) {
      typedef ::KVIDGrid current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDGrid(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDGrid*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDGrid

//______________________________________________________________________________
void KVIDGridManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVIDGridManager.

   KVBase::Streamer(R__b);
}

//______________________________________________________________________________
void KVIDGridManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDGridManager.
      TClass *R__cl = ::KVIDGridManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQObject", &fQObject);
      R__insp.InspectMember(fQObject, "fQObject.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGrids", &fGrids);
      KVBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDGridManager(void *p) {
      return  p ? new(p) ::KVIDGridManager : new ::KVIDGridManager;
   }
   static void *newArray_KVIDGridManager(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDGridManager[nElements] : new ::KVIDGridManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDGridManager(void *p) {
      delete ((::KVIDGridManager*)p);
   }
   static void deleteArray_KVIDGridManager(void *p) {
      delete [] ((::KVIDGridManager*)p);
   }
   static void destruct_KVIDGridManager(void *p) {
      typedef ::KVIDGridManager current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDGridManager(TBuffer &buf, void *obj) {
      ((::KVIDGridManager*)obj)->::KVIDGridManager::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::KVIDGridManager

//______________________________________________________________________________
void KVIDZAGrid::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDZAGrid.
      TClass *R__cl = ::KVIDZAGrid::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZMax", &fZMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fZMaxLine", &fZMaxLine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClosest", &fClosest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLsups", &fLsups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLsup", &fLsup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLinf", &fLinf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLinfi", &fLinfi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistanceClosest", &fDistanceClosest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdxClosest", &fIdxClosest);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fICode", &fICode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kinfi", &kinfi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kinf", &kinf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ksup", &ksup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ksups", &ksups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dinf", &dinf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dsup", &dsup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dinfi", &dinfi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dsups", &dsups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "winf", &winf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wsup", &wsup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "winfi", &winfi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wsups", &wsups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zinfi", &Zinfi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zinf", &Zinf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zsup", &Zsup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zsups", &Zsups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ainfi", &Ainfi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Ainf", &Ainf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Asup", &Asup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Asups", &Asups);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Aint", &Aint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Zint", &Zint);
      KVIDGrid::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDZAGrid(void *p) {
      return  p ? new(p) ::KVIDZAGrid : new ::KVIDZAGrid;
   }
   static void *newArray_KVIDZAGrid(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDZAGrid[nElements] : new ::KVIDZAGrid[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDZAGrid(void *p) {
      delete ((::KVIDZAGrid*)p);
   }
   static void deleteArray_KVIDZAGrid(void *p) {
      delete [] ((::KVIDZAGrid*)p);
   }
   static void destruct_KVIDZAGrid(void *p) {
      typedef ::KVIDZAGrid current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDZAGrid(TBuffer &buf, void *obj) {
      ((::KVIDZAGrid*)obj)->::KVIDZAGrid::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDZAGrid(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDZAGrid*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDZAGrid

//______________________________________________________________________________
void KVIDZGrid::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVIDZGrid.
      TClass *R__cl = ::KVIDZGrid::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVIDZAGrid::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVIDZGrid(void *p) {
      return  p ? new(p) ::KVIDZGrid : new ::KVIDZGrid;
   }
   static void *newArray_KVIDZGrid(Long_t nElements, void *p) {
      return p ? new(p) ::KVIDZGrid[nElements] : new ::KVIDZGrid[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVIDZGrid(void *p) {
      delete ((::KVIDZGrid*)p);
   }
   static void deleteArray_KVIDZGrid(void *p) {
      delete [] ((::KVIDZGrid*)p);
   }
   static void destruct_KVIDZGrid(void *p) {
      typedef ::KVIDZGrid current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_KVIDZGrid(TBuffer &buf, void *obj) {
      ((::KVIDZGrid*)obj)->::KVIDZGrid::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_KVIDZGrid(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::KVIDZGrid*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::KVIDZGrid

/********************************************************
* G__KVMultiDetidentification.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__KVMultiDetidentification();

extern "C" void G__set_cpp_environmentG__KVMultiDetidentification() {
  G__cpp_reset_tagtableG__KVMultiDetidentification();
}
#include <new>
extern "C" int G__cpp_dllrevG__KVMultiDetidentification() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* KVTGIDFunctions */
static int G__G__KVMultiDetidentification_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::fede((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::chiosi_Z((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::tassangot_Z((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::pichon_Z((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::tassangot_A((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::pawlowski_Z((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::pawlowski_A((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::starting_points_Z((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) KVTGIDFunctions::starting_points_A((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDGraph */
static int G__G__KVMultiDetidentification_351_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDGraph*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDGraph*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDGraph*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDGraph*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((KVIDGraph*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Destroyed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->ChangedBy((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Message((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->AcceptIDForTest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const KVIDGraph*) G__getstructoffset())->Identify((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (KVIdentificationResult*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Initialize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDGraph*) G__getstructoffset())->IsIdentifiable((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      KVIDGraph::SetAutoAdd((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      KVIDGraph::SetAutoAdd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->ClearListOfTelescopes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetLastSavedVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->RevertToLastSavedVersion();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->UpdateLastSavedVersion();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDGraph::MakeIDGraph((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->FindAxisLimits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Scale((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetIdentifier((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->RemoveIdentifier((KVIDentifier*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->RemoveCut((KVIDentifier*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->ReadAsciiFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->AddIDTelescopes((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SetXVariable((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SetYVariable((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SetRunList((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDGraph*) G__getstructoffset())->SetOnlyZId((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGraph*) G__getstructoffset())->SetOnlyZId();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SetMassFormula((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->WriteAsciiFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDGraph*) G__getstructoffset())->SetXScaleFactor((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGraph*) G__getstructoffset())->SetXScaleFactor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDGraph*) G__getstructoffset())->SetYScaleFactor((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGraph*) G__getstructoffset())->SetYScaleFactor();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->UnDraw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->ResetDraw();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVIDGraph*) G__getstructoffset())->GetXScaleFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVIDGraph*) G__getstructoffset())->GetYScaleFactor());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Add(*((TString*) G__int(libp->para[0])), (KVIDentifier*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDGraph*) G__getstructoffset())->Add(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDGraph*) G__getstructoffset())->DrawAndAdd((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDGraph*) G__getstructoffset())->DrawAndAdd((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGraph*) G__getstructoffset())->DrawAndAdd();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDGraph::AddGraphs((KVIDGraph*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (KVIDGraph*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SetRuns(*(KVNumberList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDGraph*) G__getstructoffset())->WriteAsciiFile_WP((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGraph*) G__getstructoffset())->WriteAsciiFile_WP();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDGraph*) G__getstructoffset())->ReadAsciiFile_WP((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGraph*) G__getstructoffset())->ReadAsciiFile_WP();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVIDGraph*) G__getstructoffset())->CheckVersion((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDGraph*) G__getstructoffset())->ExistVersion((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SetPattern(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((KVIDGraph*) G__getstructoffset())->GetPattern();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetIDTelescopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Increment((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->Modified();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDGraph*) G__getstructoffset())->OnlyZId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDGraph*) G__getstructoffset())->IsOnlyZId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVNumberList& obj = ((const KVIDGraph*) G__getstructoffset())->GetRuns();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVIDGraph*) G__getstructoffset())->GetRunList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetIdentifierAt((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetIdentifier((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetCut((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetIdentifiers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->GetCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDGraph*) G__getstructoffset())->GetNumberOfIdentifiers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDGraph*) G__getstructoffset())->GetNumberOfCuts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->AddIdentifier((KVIDentifier*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->AddCut((KVIDentifier*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->SortIdentifiers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDGraph*) G__getstructoffset())->IsSorted());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDGraph*) G__getstructoffset())->GetXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDGraph*) G__getstructoffset())->GetYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDGraph*) G__getstructoffset())->GetXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDGraph*) G__getstructoffset())->GetYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDGraph*) G__getstructoffset())->GetQualityCode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->AddIDTelescope((KVBase*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->RemoveIDTelescope((KVBase*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDGraph*) G__getstructoffset())->HandlesIDTelescope((KVBase*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVIDGraph*) G__getstructoffset())->GetIDTelescopeLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDGraph*) G__getstructoffset())->GetMassFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->ResetPad();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->ClearPad((TVirtualPad*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGraph*) G__getstructoffset())->IsDrawn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->TestIdentification((TH2F*) G__int(libp->para[0]), (TH1F*) G__int(libp->para[1])
, (TH2F*) G__int(libp->para[2]), (TH2F*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVIDGraph*) G__getstructoffset())->GetNamesOfIDTelescopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_142(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDGraph::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_143(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGraph::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_144(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDGraph::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_145(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDGraph::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_149(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGraph*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_150(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGraph::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_151(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDGraph::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_152(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGraph::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_351_0_153(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDGraph::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDGraph G__TKVIDGraph;
static int G__G__KVMultiDetidentification_351_0_154(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDGraph*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDGraph*) (soff+(sizeof(KVIDGraph)*i)))->~G__TKVIDGraph();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDGraph*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDGraph*) (soff))->~G__TKVIDGraph();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDentifier */
static int G__G__KVMultiDetidentification_352_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDentifier* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDentifier[n];
     } else {
       p = new((void*) gvp) KVIDentifier[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDentifier;
     } else {
       p = new((void*) gvp) KVIDentifier;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDentifier* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDentifier(*(KVIDentifier*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDentifier(*(KVIDentifier*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDentifier* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDentifier(*(TCutG*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDentifier(*(TCutG*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDentifier* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDentifier(*(TGraph*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDentifier(*(TGraph*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDentifier*) G__getstructoffset())->GetParent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->SetParent((KVIDGraph*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDentifier*) G__getstructoffset())->WriteAsciiFile(*(ofstream*) libp->para[0].ref, (const Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDentifier*) G__getstructoffset())->WriteAsciiFile(*(ofstream*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->ReadAsciiFile(*(ifstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDentifier*) G__getstructoffset())->GetID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDentifier*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDentifier*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->SetZ((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->SetA((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->SetAandZ((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDentifier*) G__getstructoffset())->SetOnlyZId((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDentifier*) G__getstructoffset())->SetOnlyZId();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDentifier*) G__getstructoffset())->OnlyZId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->SetMassFormula((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDentifier*) G__getstructoffset())->GetMassFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDentifier*) G__getstructoffset())->TestPoint((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->CopyGraph((TGraph*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->CopyGraph(*(TGraph*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDentifier*) G__getstructoffset())->Scale((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDentifier*) G__getstructoffset())->Scale((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDentifier*) G__getstructoffset())->Scale();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->Scale((TF1*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->WaitForPrimitive();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDentifier*) G__getstructoffset())->ExtendLine((Double_t) G__double(libp->para[0]), (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDentifier*) G__getstructoffset())->ExtendLine((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((KVIDentifier*) G__getstructoffset())->CloneScaleStore((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((KVIDentifier*) G__getstructoffset())->CloneScaleStore((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((KVIDentifier*) G__getstructoffset())->CloneScaleStore((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KVIDentifier*) G__getstructoffset())->CloneScaleStore((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVIDentifier*) G__getstructoffset())->AddPointAtTheEnd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVIDentifier*) G__getstructoffset())->RemoveFirstPoint());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVIDentifier*) G__getstructoffset())->ContinueDrawing());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->ChechHierarchy((KVIDentifier*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDentifier*) G__getstructoffset())->GetPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDentifier::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDentifier::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDentifier::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDentifier::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDentifier*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDentifier::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDentifier::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDentifier::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_352_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDentifier::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDentifier G__TKVIDentifier;
static int G__G__KVMultiDetidentification_352_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDentifier*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDentifier*) (soff+(sizeof(KVIDentifier)*i)))->~G__TKVIDentifier();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDentifier*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDentifier*) (soff))->~G__TKVIDentifier();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDLine */
static int G__G__KVMultiDetidentification_353_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDLine[n];
     } else {
       p = new((void*) gvp) KVIDLine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDLine;
     } else {
       p = new((void*) gvp) KVIDLine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDLine(*(TGraph*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDLine(*(TGraph*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDLine(*(KVIDLine*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDLine(*(KVIDLine*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVIDLine*) G__getstructoffset())->DistanceToLine((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVIDLine*) G__getstructoffset())->DistanceToLine(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDLine*) G__getstructoffset())->WhereAmI((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDLine*) G__getstructoffset())->PosRelToLine(
(Option_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const KVIDLine*) G__getstructoffset())->GetStartPoint(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const KVIDLine*) G__getstructoffset())->GetEndPoint(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((const KVIDLine*) G__getstructoffset())->IsBetweenEndPoints((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((const KVIDLine*) G__getstructoffset())->IsBetweenEndPoints((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) KVIDLine::MakeIDLine((TObject*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) KVIDLine::MakeIDLine((TObject*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) KVIDLine::MakeIDLine((TObject*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) KVIDLine::MakeIDLine((TObject*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) KVIDLine::MakeIDLine((TObject*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDLine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDLine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDLine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDLine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDLine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDLine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDLine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDLine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_353_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDLine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDLine G__TKVIDLine;
static int G__G__KVMultiDetidentification_353_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDLine*) (soff+(sizeof(KVIDLine)*i)))->~G__TKVIDLine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDLine*) (soff))->~G__TKVIDLine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVSpiderLine */
static int G__G__KVMultiDetidentification_396_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVSpiderLine[n];
     } else {
       p = new((void*) gvp) KVSpiderLine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVSpiderLine;
     } else {
       p = new((void*) gvp) KVSpiderLine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVSpiderLine((int) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) KVSpiderLine((int) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVSpiderLine((int) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KVSpiderLine((int) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVSpiderLine((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVSpiderLine((int) G__int(libp->para[0]), (int) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->AddPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->AddPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->AddPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->AddInterpolatePoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2]), (int) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->AddInterpolatePoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (bool) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->AddInterpolatePoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->Apply((TF1*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->ReplaceLastPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVSpiderLine*) G__getstructoffset())->Sort((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVSpiderLine*) G__getstructoffset())->Sort();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->SetZ((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->SetA((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->SetPower((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->SetAcceptedPoints((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->ResetCounter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetX((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetInterpolateX((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetInterpolateX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetY((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetInterpolateY((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVSpiderLine*) G__getstructoffset())->GetInterpolateY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVSpiderLine*) G__getstructoffset())->GetN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVSpiderLine*) G__getstructoffset())->GetInterpolateN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVSpiderLine*) G__getstructoffset())->GetLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVSpiderLine*) G__getstructoffset())->GetInterpolateLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((KVSpiderLine*) G__getstructoffset())->GetFunction((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((KVSpiderLine*) G__getstructoffset())->GetFunction((double) G__double(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((KVSpiderLine*) G__getstructoffset())->GetFunction());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVSpiderLine*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVSpiderLine*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVSpiderLine*) G__getstructoffset())->SetStatus((bool) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVSpiderLine*) G__getstructoffset())->SetStatus();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->TestPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (bool) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->TestPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((KVSpiderLine*) G__getstructoffset())->TestPoint((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVSpiderLine*) G__getstructoffset())->GetDistance((double) G__double(libp->para[0]), (double) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVSpiderLine*) G__getstructoffset())->CheckStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVSpiderLine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVSpiderLine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVSpiderLine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVSpiderLine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderLine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVSpiderLine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVSpiderLine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVSpiderLine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_396_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVSpiderLine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetidentification_396_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVSpiderLine* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVSpiderLine(*(KVSpiderLine*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVSpiderLine G__TKVSpiderLine;
static int G__G__KVMultiDetidentification_396_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVSpiderLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVSpiderLine*) (soff+(sizeof(KVSpiderLine)*i)))->~G__TKVSpiderLine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVSpiderLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVSpiderLine*) (soff))->~G__TKVSpiderLine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_396_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderLine* dest = (KVSpiderLine*) G__getstructoffset();
   *dest = *(KVSpiderLine*) libp->para[0].ref;
   const KVSpiderLine& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVSpiderPSALine */
static int G__G__KVMultiDetidentification_397_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderPSALine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVSpiderPSALine[n];
     } else {
       p = new((void*) gvp) KVSpiderPSALine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVSpiderPSALine;
     } else {
       p = new((void*) gvp) KVSpiderPSALine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderPSALine* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVSpiderPSALine(*(KVSpiderPSALine*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVSpiderPSALine(*(KVSpiderPSALine*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVSpiderPSALine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVSpiderPSALine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVSpiderPSALine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVSpiderPSALine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVSpiderPSALine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVSpiderPSALine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVSpiderPSALine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVSpiderPSALine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_397_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVSpiderPSALine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVSpiderPSALine G__TKVSpiderPSALine;
static int G__G__KVMultiDetidentification_397_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVSpiderPSALine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVSpiderPSALine*) (soff+(sizeof(KVSpiderPSALine)*i)))->~G__TKVSpiderPSALine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVSpiderPSALine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVSpiderPSALine*) (soff))->~G__TKVSpiderPSALine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_397_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVSpiderPSALine* dest = (KVSpiderPSALine*) G__getstructoffset();
   *dest = *(KVSpiderPSALine*) libp->para[0].ref;
   const KVSpiderPSALine& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIdentificationResult */
static int G__G__KVMultiDetidentification_398_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIdentificationResult* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIdentificationResult[n];
     } else {
       p = new((void*) gvp) KVIdentificationResult[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIdentificationResult;
     } else {
       p = new((void*) gvp) KVIdentificationResult;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIdentificationResult* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIdentificationResult(*(KVIdentificationResult*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIdentificationResult(*(KVIdentificationResult*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIdentificationResult*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVIdentificationResult& obj = ((KVIdentificationResult*) G__getstructoffset())->operator=(*(KVIdentificationResult*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIdentificationResult*) G__getstructoffset())->SetIDType((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVIdentificationResult*) G__getstructoffset())->GetIDType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIdentificationResult*) G__getstructoffset())->SetComment((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVIdentificationResult*) G__getstructoffset())->GetComment());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIdentificationResult::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIdentificationResult::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIdentificationResult::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIdentificationResult::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIdentificationResult*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIdentificationResult::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIdentificationResult::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIdentificationResult::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_398_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIdentificationResult::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIdentificationResult G__TKVIdentificationResult;
static int G__G__KVMultiDetidentification_398_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIdentificationResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIdentificationResult*) (soff+(sizeof(KVIdentificationResult)*i)))->~G__TKVIdentificationResult();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIdentificationResult*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIdentificationResult*) (soff))->~G__TKVIdentificationResult();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDContour */
static int G__G__KVMultiDetidentification_400_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDContour[n];
     } else {
       p = new((void*) gvp) KVIDContour[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDContour;
     } else {
       p = new((void*) gvp) KVIDContour;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDContour(*(KVIDContour*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDContour(*(KVIDContour*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDContour(*(TCutG*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDContour(*(TCutG*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDContour::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDContour::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDContour::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDContour::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDContour*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDContour::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDContour::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDContour::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_400_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDContour::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDContour G__TKVIDContour;
static int G__G__KVMultiDetidentification_400_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDContour*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDContour*) (soff+(sizeof(KVIDContour)*i)))->~G__TKVIDContour();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDContour*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDContour*) (soff))->~G__TKVIDContour();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDGridManager */
static int G__G__KVMultiDetidentification_402_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGridManager*) G__getstructoffset())->GetListOfSignals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDGridManager*) G__getstructoffset())->Connect((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (void*) G__int(libp->para[2]), (const char*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((KVIDGridManager*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((KVIDGridManager*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0]), (void*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((KVIDGridManager*) G__getstructoffset())->Disconnect((const char*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((KVIDGridManager*) G__getstructoffset())->Disconnect());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDGridManager*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDGridManager*) G__getstructoffset())->HighPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDGridManager*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDGridManager*) G__getstructoffset())->LowPriority((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("EmitVA: more than 56 var args\n");
   }
      ((KVIDGridManager*) G__getstructoffset())->EmitVA((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Long64_t) G__Longlong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong64_t) G__ULonglong(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Char_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (ULong_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Emit((const char*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Destroyed();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->ChangedBy((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Message((const char*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDGridManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDGridManager[n];
     } else {
       p = new((void*) gvp) KVIDGridManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDGridManager;
     } else {
       p = new((void*) gvp) KVIDGridManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDGridManager*) G__getstructoffset())->DeleteGrid((KVIDGraph*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDGridManager*) G__getstructoffset())->DeleteGrid((KVIDGraph*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDGridManager*) G__getstructoffset())->GetGrid((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDGridManager*) G__getstructoffset())->GetGrids());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((KVIDGridManager*) G__getstructoffset())->ReadAsciiFile((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((KVIDGridManager*) G__getstructoffset())->WriteAsciiFile((const Char_t*) G__int(libp->para[0]), (TCollection*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((KVIDGridManager*) G__getstructoffset())->WriteAsciiFile((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const KVIDGridManager*) G__getstructoffset())->StartViewer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->Modified();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDGridManager*) G__getstructoffset())->GetGridsForIDTelescope((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->GetListOfIDTelescopeLabels(*(KVString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDGridManager*) G__getstructoffset())->Initialize((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDGridManager*) G__getstructoffset())->Initialize();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDGridManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGridManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDGridManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDGridManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGridManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGridManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDGridManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGridManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_402_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDGridManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDGridManager G__TKVIDGridManager;
static int G__G__KVMultiDetidentification_402_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDGridManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDGridManager*) (soff+(sizeof(KVIDGridManager)*i)))->~G__TKVIDGridManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDGridManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDGridManager*) (soff))->~G__TKVIDGridManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDGrid */
static int G__G__KVMultiDetidentification_681_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((KVIDGrid*) G__getstructoffset())->NewLine((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((KVIDGrid*) G__getstructoffset())->NewLine());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDGrid*) G__getstructoffset())->GetIDLinesEmbracingPoint((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(TList*) libp->para[3].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGrid*) G__getstructoffset())->FindNearestIDLineFast(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Double_t*) G__Doubleref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGrid*) G__getstructoffset())->FindNearestEmbracingIDLine(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), *(Double_t*) G__Doubleref(&libp->para[7])
, *(Double_t*) G__Doubleref(&libp->para[8]), *(Double_t*) G__Doubleref(&libp->para[9])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDGrid*) G__getstructoffset())->FindNextEmbracingLine(*(Int_t*) G__Intref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (const Char_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGrid*) G__getstructoffset())->CalculateLineWidths();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDGrid*) G__getstructoffset())->DefaultIDLineClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDGrid*) G__getstructoffset())->DefaultOKLineClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDGrid::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGrid::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDGrid::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDGrid::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDGrid*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGrid::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDGrid::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDGrid::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_681_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDGrid::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDGrid G__TKVIDGrid;
static int G__G__KVMultiDetidentification_681_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDGrid*) (soff+(sizeof(KVIDGrid)*i)))->~G__TKVIDGrid();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDGrid*) (soff))->~G__TKVIDGrid();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTGID */
static int G__G__KVMultiDetidentification_682_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGID*) G__getstructoffset())->GetFunctionalType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGID*) G__getstructoffset())->GetZorA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGID*) G__getstructoffset())->GetLightEnergyDependence());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVTGID*) G__getstructoffset())->GetFunctionName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetIDmax((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetIDmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetIDmin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetIDmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((KVTGID*) G__getstructoffset())->GetIdentification((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((KVTGID*) G__getstructoffset())->GetIdentification((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((KVTGID*) G__getstructoffset())->AddLineToGrid((KVIDGrid*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((KVTGID*) G__getstructoffset())->AddLineToGrid((KVIDGrid*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGID*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVTGID*) G__getstructoffset())->GetStatusString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letdouble(result7, 100, (double) ((KVTGID*) G__getstructoffset())->GetDistanceToLine((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) ((KVTGID*) G__getstructoffset())->GetDistanceToLine((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGID::MakeTGID((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetLambda((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetLambda());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetMu((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetMu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetG((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetPdx((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetPdx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetPdy((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetPdy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetAlpha((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetAlpha());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetBeta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetBeta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetNu((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetNu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetXi((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetXi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetEta((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGID*) G__getstructoffset())->GetEta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetMassformula((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGID*) G__getstructoffset())->GetMassFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetLTGParameters((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetLTGParameters((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGID::GetNumberOfLTGParameters((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetLTGParameterNames();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetValidRuns(*(KVNumberList*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVNumberList& obj = ((const KVTGID*) G__getstructoffset())->GetValidRuns();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVTGID*) G__getstructoffset())->IsValidForRun((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetVarX((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVTGID*) G__getstructoffset())->GetVarX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetVarY((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVTGID*) G__getstructoffset())->GetVarY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->SetIDTelescopes((TCollection*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->ClearIDTelescopes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->AddIDTelescope((KVBase*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVTGID*) G__getstructoffset())->IsValidForTelescope((KVBase*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVString& obj = ((const KVTGID*) G__getstructoffset())->GetIDTelescopes();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const KVTGID*) G__getstructoffset())->WriteToAsciiFile(*(ofstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGID::ReadFromAsciiFile((const Char_t*) G__int(libp->para[0]), *(ifstream*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTGID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTGID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_682_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTGID G__TKVTGID;
static int G__G__KVMultiDetidentification_682_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTGID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTGID*) (soff+(sizeof(KVTGID)*i)))->~G__TKVTGID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTGID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTGID*) (soff))->~G__TKVTGID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTGIDZ */
static int G__G__KVMultiDetidentification_684_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDZ[n];
     } else {
       p = new((void*) gvp) KVTGIDZ[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDZ;
     } else {
       p = new((void*) gvp) KVTGIDZ;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTGIDZ(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) KVTGIDZ(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTGIDZ(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) KVTGIDZ(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZ* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTGIDZ(*(KVTGID*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVTGIDZ(*(KVTGID*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGIDZ::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDZ::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTGIDZ::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTGIDZ::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDZ*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDZ::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDZ::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDZ::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_684_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDZ::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTGIDZ G__TKVTGIDZ;
static int G__G__KVMultiDetidentification_684_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTGIDZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTGIDZ*) (soff+(sizeof(KVTGIDZ)*i)))->~G__TKVTGIDZ();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTGIDZ*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTGIDZ*) (soff))->~G__TKVTGIDZ();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTGIDZA */
static int G__G__KVMultiDetidentification_685_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDZA[n];
     } else {
       p = new((void*) gvp) KVTGIDZA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDZA;
     } else {
       p = new((void*) gvp) KVTGIDZA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 7
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTGIDZA(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   } else {
     p = new((void*) gvp) KVTGIDZA(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDZA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVTGIDZA(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) KVTGIDZA(
(const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGIDZA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDZA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTGIDZA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTGIDZA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDZA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDZA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDZA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDZA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_685_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDZA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTGIDZA G__TKVTGIDZA;
static int G__G__KVMultiDetidentification_685_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTGIDZA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTGIDZA*) (soff+(sizeof(KVTGIDZA)*i)))->~G__TKVTGIDZA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTGIDZA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTGIDZA*) (soff))->~G__TKVTGIDZA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVVirtualIDFitter */
static int G__G__KVMultiDetidentification_686_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVVirtualIDFitter*) G__getstructoffset())->Fit((KVIDGraph*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVVirtualIDFitter*) G__getstructoffset())->SetGrid((KVIDGraph*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVVirtualIDFitter*) G__getstructoffset())->GetGrid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVVirtualIDFitter*) G__getstructoffset())->SetPad((TVirtualPad*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVVirtualIDFitter*) G__getstructoffset())->GetPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVVirtualIDFitter::GetDefaultFitter());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVVirtualIDFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVVirtualIDFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVVirtualIDFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVVirtualIDFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVVirtualIDFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVVirtualIDFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVVirtualIDFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVVirtualIDFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_686_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVVirtualIDFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVVirtualIDFitter G__TKVVirtualIDFitter;
static int G__G__KVMultiDetidentification_686_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVVirtualIDFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVVirtualIDFitter*) (soff+(sizeof(KVVirtualIDFitter)*i)))->~G__TKVVirtualIDFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVVirtualIDFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVVirtualIDFitter*) (soff))->~G__TKVVirtualIDFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_686_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVVirtualIDFitter* dest = (KVVirtualIDFitter*) G__getstructoffset();
   *dest = *(KVVirtualIDFitter*) libp->para[0].ref;
   const KVVirtualIDFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTGIDFitter */
static int G__G__KVMultiDetidentification_687_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDFitter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDFitter[n];
     } else {
       p = new((void*) gvp) KVTGIDFitter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDFitter;
     } else {
       p = new((void*) gvp) KVTGIDFitter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVTGIDFitter*) G__getstructoffset())->FitPanel();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDFitter*) G__getstructoffset())->SetType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDFitter*) G__getstructoffset())->SetLight((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetLight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetFitStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetFitStatusString());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetStatusOfParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVTGIDFitter*) G__getstructoffset())->GetTGID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGIDFitter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDFitter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTGIDFitter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTGIDFitter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDFitter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDFitter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDFitter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDFitter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_687_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDFitter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetidentification_687_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVTGIDFitter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVTGIDFitter(*(KVTGIDFitter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTGIDFitter G__TKVTGIDFitter;
static int G__G__KVMultiDetidentification_687_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTGIDFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTGIDFitter*) (soff+(sizeof(KVTGIDFitter)*i)))->~G__TKVTGIDFitter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTGIDFitter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTGIDFitter*) (soff))->~G__TKVTGIDFitter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_687_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDFitter* dest = (KVTGIDFitter*) G__getstructoffset();
   *dest = *(KVTGIDFitter*) libp->para[0].ref;
   const KVTGIDFitter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDCutContour */
static int G__G__KVMultiDetidentification_688_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDCutContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDCutContour[n];
     } else {
       p = new((void*) gvp) KVIDCutContour[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDCutContour;
     } else {
       p = new((void*) gvp) KVIDCutContour;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDCutContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDCutContour(*(KVIDCutContour*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDCutContour(*(KVIDCutContour*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDCutContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDCutContour(*(TCutG*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDCutContour(*(TCutG*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((KVIDCutContour*) G__getstructoffset())->SetExclusive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVIDCutContour*) G__getstructoffset())->SetExclusive();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const KVIDCutContour*) G__getstructoffset())->IsExclusive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDCutContour::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDCutContour::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDCutContour::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDCutContour::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDCutContour*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDCutContour::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDCutContour::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDCutContour::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_688_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDCutContour::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDCutContour G__TKVIDCutContour;
static int G__G__KVMultiDetidentification_688_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDCutContour*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDCutContour*) (soff+(sizeof(KVIDCutContour)*i)))->~G__TKVIDCutContour();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDCutContour*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDCutContour*) (soff))->~G__TKVIDCutContour();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTGIDGrid */
static int G__G__KVMultiDetidentification_689_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDGrid* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDGrid[n];
     } else {
       p = new((void*) gvp) KVTGIDGrid[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDGrid;
     } else {
       p = new((void*) gvp) KVTGIDGrid;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDGrid* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDGrid((KVTGID*) G__int(libp->para[0]), (KVIDZAGrid*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) KVTGIDGrid((KVTGID*) G__int(libp->para[0]), (KVIDZAGrid*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDGrid((KVTGID*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KVTGIDGrid((KVTGID*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((KVTGIDGrid*) G__getstructoffset())->Generate((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((KVTGIDGrid*) G__getstructoffset())->Generate((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((KVTGIDGrid*) G__getstructoffset())->Generate((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((KVTGIDGrid*) G__getstructoffset())->Generate((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KVTGIDGrid*) G__getstructoffset())->Generate((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVTGIDGrid*) G__getstructoffset())->GetTGID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGIDGrid::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDGrid::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTGIDGrid::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTGIDGrid::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDGrid*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDGrid::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDGrid::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDGrid::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_689_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDGrid::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTGIDGrid G__TKVTGIDGrid;
static int G__G__KVMultiDetidentification_689_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTGIDGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTGIDGrid*) (soff+(sizeof(KVTGIDGrid)*i)))->~G__TKVTGIDGrid();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTGIDGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTGIDGrid*) (soff))->~G__TKVTGIDGrid();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVTGIDManager */
static int G__G__KVMultiDetidentification_690_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVTGIDManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDManager[n];
     } else {
       p = new((void*) gvp) KVTGIDManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVTGIDManager;
     } else {
       p = new((void*) gvp) KVTGIDManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->AddTGID((KVTGID*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGID((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->RemoveTGID((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->RemoveAllTGID();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGID((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDName((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const KVList& obj = ((const KVTGIDManager*) G__getstructoffset())->GetListOfIDFunctions();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVTGIDManager*) G__getstructoffset())->GetIDmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTGIDManager*) G__getstructoffset())->IdentZ((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (const Char_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVTGIDManager*) G__getstructoffset())->IdentA((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (const Char_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid(
(KVTGID*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((KVTGID*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((KVTGID*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((KVTGID*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((KVTGID*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((KVTGID*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid(
(const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Bool_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((KVTGIDManager*) G__getstructoffset())->GetTGIDGrid((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVTGIDManager*) G__getstructoffset())->GetStatus());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->SetStatus((KVTGIDManager::ETGIDMStatus) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 67, (long) ((const KVTGIDManager*) G__getstructoffset())->GetStatusString((KVTGIDManager::ETGIDMStatus) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 67, (long) ((const KVTGIDManager*) G__getstructoffset())->GetStatusString());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVTGIDManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVTGIDManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVTGIDManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVTGIDManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVTGIDManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVTGIDManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_690_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVTGIDManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVTGIDManager G__TKVTGIDManager;
static int G__G__KVMultiDetidentification_690_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVTGIDManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVTGIDManager*) (soff+(sizeof(KVTGIDManager)*i)))->~G__TKVTGIDManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVTGIDManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVTGIDManager*) (soff))->~G__TKVTGIDManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDZALine */
static int G__G__KVMultiDetidentification_692_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZALine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZALine[n];
     } else {
       p = new((void*) gvp) KVIDZALine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZALine;
     } else {
       p = new((void*) gvp) KVIDZALine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZALine* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDZALine(*(KVIDZALine*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDZALine(*(KVIDZALine*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDZALine*) G__getstructoffset())->GetWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZALine*) G__getstructoffset())->SetWidth((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVIDZALine*) G__getstructoffset())->GetLineWithWidth());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const KVIDZALine*) G__getstructoffset())->Print((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const KVIDZALine*) G__getstructoffset())->Print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZALine*) G__getstructoffset())->ReadAsciiFile_KVIDZLine(*(ifstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDZALine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZALine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDZALine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDZALine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZALine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZALine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZALine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZALine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_692_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZALine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDZALine G__TKVIDZALine;
static int G__G__KVMultiDetidentification_692_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDZALine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDZALine*) (soff+(sizeof(KVIDZALine)*i)))->~G__TKVIDZALine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDZALine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDZALine*) (soff))->~G__TKVIDZALine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDZAGrid */
static int G__G__KVMultiDetidentification_693_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZAGrid* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZAGrid[n];
     } else {
       p = new((void*) gvp) KVIDZAGrid[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZAGrid;
     } else {
       p = new((void*) gvp) KVIDZAGrid;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZAGrid* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDZAGrid(*(KVIDZAGrid*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDZAGrid(*(KVIDZAGrid*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVIDZAGrid*) G__getstructoffset())->RemoveLine((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVIDZAGrid*) G__getstructoffset())->RemoveLine((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->RemoveZLines((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->SetVarXVarY((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->AddParameter((char*) G__int(libp->para[0]), (char*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->DrawLinesWithWidth();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const KVIDZAGrid*) G__getstructoffset())->GetZmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDZAGrid*) G__getstructoffset())->GetZLine((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDZAGrid*) G__getstructoffset())->GetZmaxLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDZAGrid*) G__getstructoffset())->GetZALine((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->IdentZA((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->IdentZ((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDZAGrid*) G__getstructoffset())->GetClosestLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const KVIDZAGrid*) G__getstructoffset())->GetDistanceClosestLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const KVIDZAGrid*) G__getstructoffset())->GetIndexClosest());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((KVIDZAGrid*) G__getstructoffset())->MakeSubsetGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((KVIDZAGrid*) G__getstructoffset())->MakeSubsetGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((KVIDZAGrid*) G__getstructoffset())->MakeSubsetGraph((TList*) G__int(libp->para[0]), (TClass*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((KVIDZAGrid*) G__getstructoffset())->MakeSubsetGraph((TList*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDZAGrid::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZAGrid::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDZAGrid::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDZAGrid::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAGrid*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZAGrid::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZAGrid::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZAGrid::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_693_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZAGrid::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDZAGrid G__TKVIDZAGrid;
static int G__G__KVMultiDetidentification_693_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDZAGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDZAGrid*) (soff+(sizeof(KVIDZAGrid)*i)))->~G__TKVIDZAGrid();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDZAGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDZAGrid*) (soff))->~G__TKVIDZAGrid();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDZGrid */
static int G__G__KVMultiDetidentification_695_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZGrid* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZGrid[n];
     } else {
       p = new((void*) gvp) KVIDZGrid[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZGrid;
     } else {
       p = new((void*) gvp) KVIDZGrid;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDZGrid::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZGrid::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDZGrid::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDZGrid::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZGrid*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZGrid::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZGrid::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZGrid::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_695_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZGrid::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDZGrid G__TKVIDZGrid;
static int G__G__KVMultiDetidentification_695_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDZGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDZGrid*) (soff+(sizeof(KVIDZGrid)*i)))->~G__TKVIDZGrid();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDZGrid*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDZGrid*) (soff))->~G__TKVIDZGrid();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDZLine */
static int G__G__KVMultiDetidentification_697_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZLine[n];
     } else {
       p = new((void*) gvp) KVIDZLine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZLine;
     } else {
       p = new((void*) gvp) KVIDZLine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDZLine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZLine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDZLine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDZLine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZLine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZLine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZLine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZLine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_697_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZLine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDZLine G__TKVIDZLine;
static int G__G__KVMultiDetidentification_697_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDZLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDZLine*) (soff+(sizeof(KVIDZLine)*i)))->~G__TKVIDZLine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDZLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDZLine*) (soff))->~G__TKVIDZLine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVDroite */
static int G__G__KVMultiDetidentification_698_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDroite* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDroite[n];
     } else {
       p = new((void*) gvp) KVDroite[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDroite;
     } else {
       p = new((void*) gvp) KVDroite;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDroite* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVDroite((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) KVDroite((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDroite* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVDroite(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   } else {
     p = new((void*) gvp) KVDroite(
(double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDroite*) G__getstructoffset())->GetA0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVDroite*) G__getstructoffset())->GetTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVDroite*) G__getstructoffset())->GetFunction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((KVDroite*) G__getstructoffset())->Init((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVDroite*) G__getstructoffset())->Init((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((KVDroite*) G__getstructoffset())->Init();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDroite*) G__getstructoffset())->SetA0((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDroite*) G__getstructoffset())->SetTheta((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVDroite::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDroite::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVDroite::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVDroite::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDroite*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDroite::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVDroite::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDroite::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_698_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVDroite::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetidentification_698_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVDroite* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVDroite(*(KVDroite*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVDroite G__TKVDroite;
static int G__G__KVMultiDetidentification_698_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVDroite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVDroite*) (soff+(sizeof(KVDroite)*i)))->~G__TKVDroite();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVDroite*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVDroite*) (soff))->~G__TKVDroite();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_698_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDroite* dest = (KVDroite*) G__getstructoffset();
   *dest = *(KVDroite*) libp->para[0].ref;
   const KVDroite& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVDP2toIDGridConvertor */
static int G__G__KVMultiDetidentification_699_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDP2toIDGridConvertor* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDP2toIDGridConvertor[n];
     } else {
       p = new((void*) gvp) KVDP2toIDGridConvertor[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVDP2toIDGridConvertor;
     } else {
       p = new((void*) gvp) KVDP2toIDGridConvertor;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDP2toIDGridConvertor*) G__getstructoffset())->SetGridClass((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDP2toIDGridConvertor*) G__getstructoffset())->Convert((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVDP2toIDGridConvertor::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDP2toIDGridConvertor::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVDP2toIDGridConvertor::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVDP2toIDGridConvertor::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVDP2toIDGridConvertor*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDP2toIDGridConvertor*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDP2toIDGridConvertor*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVDP2toIDGridConvertor*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDP2toIDGridConvertor::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVDP2toIDGridConvertor::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVDP2toIDGridConvertor::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_699_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVDP2toIDGridConvertor::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetidentification_699_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVDP2toIDGridConvertor* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVDP2toIDGridConvertor(*(KVDP2toIDGridConvertor*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVDP2toIDGridConvertor G__TKVDP2toIDGridConvertor;
static int G__G__KVMultiDetidentification_699_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVDP2toIDGridConvertor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVDP2toIDGridConvertor*) (soff+(sizeof(KVDP2toIDGridConvertor)*i)))->~G__TKVDP2toIDGridConvertor();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVDP2toIDGridConvertor*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVDP2toIDGridConvertor*) (soff))->~G__TKVDP2toIDGridConvertor();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_699_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVDP2toIDGridConvertor* dest = (KVDP2toIDGridConvertor*) G__getstructoffset();
   *dest = *(KVDP2toIDGridConvertor*) libp->para[0].ref;
   const KVDP2toIDGridConvertor& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDZAContour */
static int G__G__KVMultiDetidentification_700_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZAContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZAContour[n];
     } else {
       p = new((void*) gvp) KVIDZAContour[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDZAContour;
     } else {
       p = new((void*) gvp) KVIDZAContour;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZAContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDZAContour(*(KVIDZAContour*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDZAContour(*(KVIDZAContour*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDZAContour* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVIDZAContour(*(TCutG*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) KVIDZAContour(*(TCutG*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDZAContour::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZAContour::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDZAContour::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDZAContour::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDZAContour*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZAContour::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZAContour::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDZAContour::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_700_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDZAContour::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDZAContour G__TKVIDZAContour;
static int G__G__KVMultiDetidentification_700_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDZAContour*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDZAContour*) (soff+(sizeof(KVIDZAContour)*i)))->~G__TKVIDZAContour();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDZAContour*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDZAContour*) (soff))->~G__TKVIDZAContour();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDMap */
static int G__G__KVMultiDetidentification_701_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_701_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDMap G__TKVIDMap;
static int G__G__KVMultiDetidentification_701_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDMap*) (soff+(sizeof(KVIDMap)*i)))->~G__TKVIDMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDMap*) (soff))->~G__TKVIDMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDSubCodeManager */
static int G__G__KVMultiDetidentification_707_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDSubCodeManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDSubCodeManager((UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) KVIDSubCodeManager((UChar_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDSubCodeManager((UChar_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KVIDSubCodeManager((UChar_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new KVIDSubCodeManager[n];
       } else {
         p = new((void*) gvp) KVIDSubCodeManager[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new KVIDSubCodeManager;
       } else {
         p = new((void*) gvp) KVIDSubCodeManager;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDSubCodeManager*) G__getstructoffset())->SetNbits((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDSubCodeManager*) G__getstructoffset())->SetMSB((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const KVIDSubCodeManager*) G__getstructoffset())->SetIDSubCode(*(KVIDSubCode*) libp->para[0].ref, (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const KVIDSubCodeManager*) G__getstructoffset())->PrintSCM((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const KVIDSubCodeManager*) G__getstructoffset())->PrintSCM();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVIDSubCodeManager*) G__getstructoffset())->SubCodeNotSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDSubCodeManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDSubCodeManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDSubCodeManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDSubCodeManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVIDSubCodeManager*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDSubCodeManager*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDSubCodeManager*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDSubCodeManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDSubCodeManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDSubCodeManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDSubCodeManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_707_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDSubCodeManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVMultiDetidentification_707_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVIDSubCodeManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVIDSubCodeManager(*(KVIDSubCodeManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDSubCodeManager G__TKVIDSubCodeManager;
static int G__G__KVMultiDetidentification_707_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDSubCodeManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDSubCodeManager*) (soff+(sizeof(KVIDSubCodeManager)*i)))->~G__TKVIDSubCodeManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDSubCodeManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDSubCodeManager*) (soff))->~G__TKVIDSubCodeManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVMultiDetidentification_707_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDSubCodeManager* dest = (KVIDSubCodeManager*) G__getstructoffset();
   *dest = *(KVIDSubCodeManager*) libp->para[0].ref;
   const KVIDSubCodeManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVIDCutLine */
static int G__G__KVMultiDetidentification_709_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVIDCutLine* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDCutLine[n];
     } else {
       p = new((void*) gvp) KVIDCutLine[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVIDCutLine;
     } else {
       p = new((void*) gvp) KVIDCutLine;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDCutLine*) G__getstructoffset())->SetAcceptedDirection((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const KVIDCutLine*) G__getstructoffset())->GetAcceptedDirection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVIDCutLine::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDCutLine::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVIDCutLine::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVIDCutLine::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVIDCutLine*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDCutLine::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDCutLine::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVIDCutLine::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVMultiDetidentification_709_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVIDCutLine::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVIDCutLine G__TKVIDCutLine;
static int G__G__KVMultiDetidentification_709_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVIDCutLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVIDCutLine*) (soff+(sizeof(KVIDCutLine)*i)))->~G__TKVIDCutLine();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVIDCutLine*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVIDCutLine*) (soff))->~G__TKVIDCutLine();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* KVTGIDFunctions */

/* KVIDGraph */

/* KVIDentifier */

/* KVIDLine */

/* KVSpiderLine */

/* KVSpiderPSALine */

/* KVIdentificationResult */

/* KVIDContour */

/* KVIDGridManager */

/* KVIDGrid */

/* KVTGID */

/* KVTGIDZ */

/* KVTGIDZA */

/* KVVirtualIDFitter */

/* KVTGIDFitter */

/* KVIDCutContour */

/* KVTGIDGrid */

/* KVTGIDManager */

/* KVIDZALine */

/* KVIDZAGrid */

/* KVIDZGrid */

/* KVIDZLine */

/* KVDroite */

/* KVDP2toIDGridConvertor */

/* KVIDZAContour */

/* KVIDMap */

/* KVIDSubCodeManager */

/* KVIDCutLine */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__KVMultiDetidentification {
 public:
  G__Sizep2memfuncG__KVMultiDetidentification(): p(&G__Sizep2memfuncG__KVMultiDetidentification::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__KVMultiDetidentification::*p)();
};

size_t G__get_sizep2memfuncG__KVMultiDetidentification()
{
  G__Sizep2memfuncG__KVMultiDetidentification a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__KVMultiDetidentification() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph))) {
     KVIDGraph *G__Lderived;
     G__Lderived=(KVIDGraph*)0x1000;
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier))) {
     KVIDentifier *G__Lderived;
     G__Lderived=(KVIDentifier*)0x1000;
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine))) {
     KVIDLine *G__Lderived;
     G__Lderived=(KVIDLine*)0x1000;
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine))) {
     KVSpiderLine *G__Lderived;
     G__Lderived=(KVSpiderLine*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine))) {
     KVSpiderPSALine *G__Lderived;
     G__Lderived=(KVSpiderPSALine*)0x1000;
     {
       KVSpiderLine *G__Lpbase=(KVSpiderLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult))) {
     KVIdentificationResult *G__Lderived;
     G__Lderived=(KVIdentificationResult*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour))) {
     KVIDContour *G__Lderived;
     G__Lderived=(KVIDContour*)0x1000;
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager))) {
     KVIDGridManager *G__Lderived;
     G__Lderived=(KVIDGridManager*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid))) {
     KVIDGrid *G__Lderived;
     G__Lderived=(KVIDGrid*)0x1000;
     {
       KVIDGraph *G__Lpbase=(KVIDGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID))) {
     KVTGID *G__Lderived;
     G__Lderived=(KVTGID*)0x1000;
     {
       TF1 *G__Lpbase=(TF1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TFormula *G__Lpbase=(TFormula*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFormula),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ))) {
     KVTGIDZ *G__Lderived;
     G__Lderived=(KVTGIDZ*)0x1000;
     {
       KVTGID *G__Lpbase=(KVTGID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TF1 *G__Lpbase=(TF1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TFormula *G__Lpbase=(TFormula*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFormula),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA))) {
     KVTGIDZA *G__Lderived;
     G__Lderived=(KVTGIDZA*)0x1000;
     {
       KVTGIDZ *G__Lpbase=(KVTGIDZ*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVTGID *G__Lpbase=(KVTGID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TF1 *G__Lpbase=(TF1*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TFormula *G__Lpbase=(TFormula*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFormula),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter))) {
     KVVirtualIDFitter *G__Lderived;
     G__Lderived=(KVVirtualIDFitter*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter))) {
     KVTGIDFitter *G__Lderived;
     G__Lderived=(KVTGIDFitter*)0x1000;
     {
       KVVirtualIDFitter *G__Lpbase=(KVVirtualIDFitter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour))) {
     KVIDCutContour *G__Lderived;
     G__Lderived=(KVIDCutContour*)0x1000;
     {
       KVIDContour *G__Lpbase=(KVIDContour*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid))) {
     KVTGIDGrid *G__Lderived;
     G__Lderived=(KVTGIDGrid*)0x1000;
     {
       KVIDZAGrid *G__Lpbase=(KVIDZAGrid*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDGrid *G__Lpbase=(KVIDGrid*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVIDGraph *G__Lpbase=(KVIDGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine))) {
     KVIDZALine *G__Lderived;
     G__Lderived=(KVIDZALine*)0x1000;
     {
       KVIDLine *G__Lpbase=(KVIDLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid))) {
     KVIDZAGrid *G__Lderived;
     G__Lderived=(KVIDZAGrid*)0x1000;
     {
       KVIDGrid *G__Lpbase=(KVIDGrid*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDGraph *G__Lpbase=(KVIDGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid))) {
     KVIDZGrid *G__Lderived;
     G__Lderived=(KVIDZGrid*)0x1000;
     {
       KVIDZAGrid *G__Lpbase=(KVIDZAGrid*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDGrid *G__Lpbase=(KVIDGrid*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVIDGraph *G__Lpbase=(KVIDGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine))) {
     KVIDZLine *G__Lderived;
     G__Lderived=(KVIDZLine*)0x1000;
     {
       KVIDZALine *G__Lpbase=(KVIDZALine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDLine *G__Lpbase=(KVIDLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite))) {
     KVDroite *G__Lderived;
     G__Lderived=(KVDroite*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour))) {
     KVIDZAContour *G__Lderived;
     G__Lderived=(KVIDZAContour*)0x1000;
     {
       KVIDContour *G__Lpbase=(KVIDContour*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap))) {
     KVIDMap *G__Lderived;
     G__Lderived=(KVIDMap*)0x1000;
     {
       KVIDGraph *G__Lpbase=(KVIDGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine))) {
     KVIDCutLine *G__Lderived;
     G__Lderived=(KVIDCutLine*)0x1000;
     {
       KVIDLine *G__Lpbase=(KVIDLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVIDentifier *G__Lpbase=(KVIDentifier*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TCutG *G__Lpbase=(TCutG*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TCutG),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TGraph *G__Lpbase=(TGraph*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine),G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__KVMultiDetidentification() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("ULong_t",107,-1,0,-1);
   G__setnewtype(-1,"Unsigned long integer 8 bytes (unsigned long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("Axis_t",100,-1,0,-1);
   G__setnewtype(-1,"Axis values type (double)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UChar_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPchargR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UShort_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UInt_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<Long64_t>",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_Binary_tlElongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("KVIDSubCode",117,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* KVTGIDFunctions */
static void G__setup_memvarKVTGIDFunctions(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFunctions));
   {
   }
   G__tag_memvar_reset();
}


   /* KVIDGraph */
static void G__setup_memvarKVIDGraph(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph));
   { KVIDGraph *p; p=(KVIDGraph*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fOnlyZId=",0,"set to kTRUE when only to be used to give Z identification of nuclei, no mass info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList),-1,-1,2,"fIdentifiers=",0,"-> list of identification objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList),-1,-1,2,"fCuts=",0,"-> cuts used to define area in which identification is possible");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fXmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fXmax=",0,"!min/max X coordinates of graph");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fYmin=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Axis_t"),-1,2,"fYmax=",0,"!min/max Y coordinates of graph");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNameValueList),-1,-1,2,"fPar=",0,"-> parameters associated to grid");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLastScaleX=",0,"last applied scaling factor on X");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fLastScaleY=",0,"last applied scaling factor on Y");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVirtualPad),-1,-1,2,"fPad=",0,"!pad in which graph is drawn");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNumberList),-1,-1,2,"fRunList=",0,"runs for which grid is valid");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TList),-1,-1,2,"fTelescopes=",0,"ID telescopes for which grid is valid");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TString),-1,-1,2,"fDyName=",0,"!dynamically generated name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TString),-1,-1,2,"fPattern=",0,"pattern of filenames used to write or read grid");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMassFormula=",0,"*OPTION={GetMethod=\"GetMassFormula\";SetMethod=\"SetMassFormula\";Items=(0=\"Beta-stability\", 1=\"VEDA mass\", 2=\"EAL mass\", 3=\"EAL residues\", 99=\"2Z+1\")}*");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),-1,-1,2,"fLastSavedVersion=",0,"!copy of last save version of grid, used for 'undo'");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fAutoAddGridManager=",0,"if =kTRUE, grids are automatically added to ID grid manager on creation (default)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDentifier */
static void G__setup_memvarKVIDentifier(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier));
   { KVIDentifier *p; p=(KVIDentifier*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),-1,-1,2,"fParent=",0,"!parent identification map or grid");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNucleus),-1,-1,2,"fIon=",0,"ion/nucleus corresponding to this identifier");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fGridOnlyZId=",0,"=kTRUE if parent grid has OnlyZId set");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZ=",0,"! dummy variables used by context menu dialog boxes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fA=",0,"! dummy variables used by context menu dialog boxes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMassFormula=",0,"! *OPTION={GetMethod=\"GetMassFormula\";SetMethod=\"SetMassFormula\";Items=(0=\"Beta-stability\", 1=\"VEDA mass\", 2=\"EAL mass\", 3=\"EAL residues\", 99=\"2Z+1\")}*");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDLine */
static void G__setup_memvarKVIDLine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine));
   { KVIDLine *p; p=(KVIDLine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVSpiderLine */
static void G__setup_memvarKVSpiderLine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine));
   { KVSpiderLine *p; p=(KVSpiderLine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),-1,-1,2,"_line=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph),-1,-1,2,"_iline=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1),-1,-1,2,"_ff=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_z=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,2,"_a=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"_filled=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,2,"_pow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_fitStatus=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_nAcceptedPoints=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"_pointsCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"_pdy=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVSpiderPSALine */
static void G__setup_memvarKVSpiderPSALine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine));
   { KVSpiderPSALine *p; p=(KVSpiderPSALine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIdentificationResult */
static void G__setup_memvarKVIdentificationResult(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult));
   { KVIdentificationResult *p; p=(KVIdentificationResult*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->IDattempted)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IDattempted=",0,"=kTRUE if identification was attempted");
   G__memvar_setup((void*)((long)(&p->IDOK)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"IDOK=",0,"general quality of identification, =kTRUE if acceptable identification made");
   G__memvar_setup((void*)((long)(&p->IDcode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IDcode=",0,"a general identification code for this type of identification");
   G__memvar_setup((void*)((long)(&p->Zident)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"Zident=",0,"=kTRUE if Z of particle established");
   G__memvar_setup((void*)((long)(&p->Aident)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"Aident=",0,"= kTRUE if A of particle established");
   G__memvar_setup((void*)((long)(&p->IDquality)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IDquality=",0,"specific quality code returned by identification procedure");
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Z=",0,"Z of particle found (if Zident==kTRUE)");
   G__memvar_setup((void*)((long)(&p->A)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"A=",0,"A of particle found (if Aident==kTRUE)");
   G__memvar_setup((void*)((long)(&p->PID)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"PID=",0,"= \"real\" Z if Zident==kTRUE and Aident==kFALSE, \"real\" A if Zident==Aident==kTRUE");
   G__memvar_setup((void*)((long)(&p->deltaEpedestal)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"deltaEpedestal=",0,"special code for handling particles which give no signal in deltaE");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResultcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("deltaEpedestal_UNKNOWN=%lldLL",(long long)KVIdentificationResult::deltaEpedestal_UNKNOWN).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResultcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("deltaEpedestal_YES=%lldLL",(long long)KVIdentificationResult::deltaEpedestal_YES).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResultcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("deltaEpedestal_NO=%lldLL",(long long)KVIdentificationResult::deltaEpedestal_NO).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDContour */
static void G__setup_memvarKVIDContour(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour));
   { KVIDContour *p; p=(KVIDContour*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDGridManager */
static void G__setup_memvarKVIDGridManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager));
   { KVIDGridManager *p; p=(KVIDGridManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TQObjSender),-1,-1,4,"fQObject=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList),-1,-1,4,"fGrids=",0,"collection of all ID graphs handled by manager");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDGrid */
static void G__setup_memvarKVIDGrid(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid));
   { KVIDGrid *p; p=(KVIDGrid*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTGID */
static void G__setup_memvarKVTGID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID));
   { KVTGID *p; p=(KVTGID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fID_min=",0,"minimum ID fitted with functional");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fID_max=",0,"maximum ID fitted with functional");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStatus=",0,"! transient member, holds status code of last call to GetIdentification");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TString),-1,-1,2,"fTGIDFunctionName=",0,"name of KVTGIDFunctions:: namespace function used for identification");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLambda=",0,"indices of parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMu=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fG=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPdx=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fPdy=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAlpha=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBeta=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNu=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fXi=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEta=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fType=",0,"type of functional (=0 standard, =1 extended)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLight=",0,"with (1) or without (0) CsI light-energy dependence");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZorA=",0,"used for Z (1) or A (0) identification");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMassFormula=",0,"mass formula used to calculate A from Z (if Z identification used)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNumberList),-1,-1,2,"fRuns=",0,"list of runs for which fit is valid");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TString),-1,-1,2,"fVarX=",0,"quantity used for X coordinates");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TString),-1,-1,2,"fVarY=",0,"quantity used for Y coordinates");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVString),-1,-1,2,"fTelescopes=",0,"list of telescopes for which fit is valid");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kStatus_OK=%lldLL",(long long)KVTGID::kStatus_OK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kStatus_NotBetween_IDMin_IDMax=%lldLL",(long long)KVTGID::kStatus_NotBetween_IDMin_IDMax).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTGIDZ */
static void G__setup_memvarKVTGIDZ(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ));
   { KVTGIDZ *p; p=(KVTGIDZ*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTGIDZA */
static void G__setup_memvarKVTGIDZA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA));
   { KVTGIDZA *p; p=(KVTGIDZA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVVirtualIDFitter */
static void G__setup_memvarKVVirtualIDFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter));
   { KVVirtualIDFitter *p; p=(KVVirtualIDFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter),-1,-2,4,"gDefaultFitter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph),-1,-1,2,"fGrid=",0,"the grid to fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVirtualPad),-1,-1,2,"fPad=",0,"the pad in which grid is drawn (=0 if not drawn)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTGIDFitter */
static void G__setup_memvarKVTGIDFitter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter));
   { KVTGIDFitter *p; p=(KVTGIDFitter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fType=",0,"type of functional");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLight=",0,"handles CsI total light-energy conversion");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fZorA=",0,"is grid for Z&A or only Z identification ?");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar=",0,"array of fit parameters");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"zd=",0,"array of Z's");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"ad=",0,"array of A's");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"xd=",0,"array of X coordinates");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"yd=",0,"array of Y coordinates");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"irc=",0,"status code");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"istate=",0,"status of parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),-1,-1,2,"fTGID=",0,"KVTGID object representing fit result");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmin=",0,"limit for fit");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fXmax=",0,"limit for fit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDCutContour */
static void G__setup_memvarKVIDCutContour(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour));
   { KVIDCutContour *p; p=(KVIDCutContour*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fExclusive=",0,"set to kTRUE if want to accept points OUTSIDE the contour");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTGIDGrid */
static void G__setup_memvarKVTGIDGrid(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid));
   { KVTGIDGrid *p; p=(KVTGIDGrid*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID),-1,-1,2,"fTGID=",0,"KVTGID used to generate grid");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVTGIDManager */
static void G__setup_memvarKVTGIDManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManager));
   { KVTGIDManager *p; p=(KVTGIDManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList),-1,-1,2,"fIDList=",0,"KVTGID objects for identifications");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fID_max=",0,"maximum ID of all TGID objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStatus=",0,"! transient member used to hold status of last call to IdentZ/IdentA");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus),-1,-2,1,G__FastAllocString(2048).Format("kStatus_OK=%lldLL",(long long)KVTGIDManager::kStatus_OK).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus),-1,-2,1,G__FastAllocString(2048).Format("kStatus_noTGID=%lldLL",(long long)KVTGIDManager::kStatus_noTGID).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus),-1,-2,1,G__FastAllocString(2048).Format("kStatus_OutOfIDRange=%lldLL",(long long)KVTGIDManager::kStatus_OutOfIDRange).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus),-1,-2,1,G__FastAllocString(2048).Format("kStatus_ZtooSmall=%lldLL",(long long)KVTGIDManager::kStatus_ZtooSmall).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus),-1,-2,1,G__FastAllocString(2048).Format("kStatus_ZtooLarge=%lldLL",(long long)KVTGIDManager::kStatus_ZtooLarge).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus),-1,-2,1,G__FastAllocString(2048).Format("kCurrentStatus=%lldLL",(long long)KVTGIDManager::kCurrentStatus).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDZALine */
static void G__setup_memvarKVIDZALine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine));
   { KVIDZALine *p; p=(KVIDZALine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fWidth=",0,"the \"width\" of the line");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraphErrors),-1,-1,2,"fLineWithWidth=",0,"! used to display width of line");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDZAGrid */
static void G__setup_memvarKVIDZAGrid(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid));
   { KVIDZAGrid *p; p=(KVIDZAGrid*)0x1000; if (p) { }
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fZMax=",0,"largest Z of lines in grid");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine),-1,-1,2,"fZMaxLine=",0,"! line with biggest Z and A");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),-1,-1,2,"fClosest=",0,"!closest line to last-identified point");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),-1,-1,2,"fLsups=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),-1,-1,2,"fLsup=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),-1,-1,2,"fLinf=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine),-1,-1,2,"fLinfi=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fDistanceClosest=",0,"!distance from point to closest line");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fIdxClosest=",0,"!index of closest line in main list fIdentifiers");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fICode=",0,"!code de retour");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"kinfi=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"kinf=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ksup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ksups=",0,"! used by IdentZA and IdentZ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dinf=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dsup=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dinfi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"dsups=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"winf=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wsup=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"winfi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"wsups=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Zinfi=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Zinf=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Zsup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Zsups=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Ainfi=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Ainf=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Asup=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Asups=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Aint=",0,"!mass of line used to identify particle");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Zint=",0,"!Z of line used to identify particle");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE0=%lldLL",(long long)KVIDZAGrid::kICODE0).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE1=%lldLL",(long long)KVIDZAGrid::kICODE1).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE2=%lldLL",(long long)KVIDZAGrid::kICODE2).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE3=%lldLL",(long long)KVIDZAGrid::kICODE3).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE4=%lldLL",(long long)KVIDZAGrid::kICODE4).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE5=%lldLL",(long long)KVIDZAGrid::kICODE5).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE6=%lldLL",(long long)KVIDZAGrid::kICODE6).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE7=%lldLL",(long long)KVIDZAGrid::kICODE7).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE8=%lldLL",(long long)KVIDZAGrid::kICODE8).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE9=%lldLL",(long long)KVIDZAGrid::kICODE9).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA),-1,-2,1,G__FastAllocString(2048).Format("kICODE10=%lldLL",(long long)KVIDZAGrid::kICODE10).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDZGrid */
static void G__setup_memvarKVIDZGrid(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid));
   { KVIDZGrid *p; p=(KVIDZGrid*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDZLine */
static void G__setup_memvarKVIDZLine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine));
   { KVIDZLine *p; p=(KVIDZLine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVDroite */
static void G__setup_memvarKVDroite(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite));
   { KVDroite *p; p=(KVDroite*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_a0=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"_theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"_is_initialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1),-1,-1,4,"_f=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVDP2toIDGridConvertor */
static void G__setup_memvarKVDP2toIDGridConvertor(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor));
   { KVDP2toIDGridConvertor *p; p=(KVDP2toIDGridConvertor*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),-1,-1,2,"fGridClass=",0,"class of grid to create from dp2 file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TList),-1,-1,2,"fGrids=",0,"list of new grids");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDZAContour */
static void G__setup_memvarKVIDZAContour(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour));
   { KVIDZAContour *p; p=(KVIDZAContour*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDMap */
static void G__setup_memvarKVIDMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap));
   { KVIDMap *p; p=(KVIDMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDSubCodeManager */
static void G__setup_memvarKVIDSubCodeManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager));
   { KVIDSubCodeManager *p; p=(KVIDSubCodeManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fNbits=",0,"number of bits used to store ID routine code de retour");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"fMSB=",0,"number of the Most Significant Bit used to store code de retour (LSB = bit 0)");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVIDCutLine */
static void G__setup_memvarKVIDCutLine(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine));
   { KVIDCutLine *p; p=(KVIDCutLine*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVString),-1,-1,2,"fAcceptedDirection=",0,"direction relative to cut line corresponding to acceptable region");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__KVMultiDetidentification() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncKVTGIDFunctions(void) {
   /* KVTGIDFunctions */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFunctions));
   G__memfunc_setup("fede",404,G__G__KVMultiDetidentification_168_0_1, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::fede) ), 0);
   G__memfunc_setup("chiosi_Z",824,G__G__KVMultiDetidentification_168_0_2, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::chiosi_Z) ), 0);
   G__memfunc_setup("tassangot_Z",1165,G__G__KVMultiDetidentification_168_0_3, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::tassangot_Z) ), 0);
   G__memfunc_setup("pichon_Z",826,G__G__KVMultiDetidentification_168_0_4, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::pichon_Z) ), 0);
   G__memfunc_setup("tassangot_A",1140,G__G__KVMultiDetidentification_168_0_5, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::tassangot_A) ), 0);
   G__memfunc_setup("pawlowski_Z",1178,G__G__KVMultiDetidentification_168_0_6, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::pawlowski_Z) ), 0);
   G__memfunc_setup("pawlowski_A",1153,G__G__KVMultiDetidentification_168_0_7, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::pawlowski_A) ), 0);
   G__memfunc_setup("starting_points_Z",1825,G__G__KVMultiDetidentification_168_0_8, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::starting_points_Z) ), 0);
   G__memfunc_setup("starting_points_A",1800,G__G__KVMultiDetidentification_168_0_9, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&KVTGIDFunctions::starting_points_A) ), 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDGraph(void) {
   /* KVIDGraph */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph));
   G__memfunc_setup("GetListOfSignals",1602,G__G__KVMultiDetidentification_351_0_1, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__KVMultiDetidentification_351_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__G__KVMultiDetidentification_351_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,G__G__KVMultiDetidentification_351_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LowPriority",1172,G__G__KVMultiDetidentification_351_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmitVA",550,G__G__KVMultiDetidentification_351_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_351_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,G__G__KVMultiDetidentification_351_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangedBy",869,G__G__KVMultiDetidentification_351_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Message",709,G__G__KVMultiDetidentification_351_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 '-1' sx d - 'Double_t' 0 '-1' sy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFromAsciiFile",1657,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - gridfile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteToAsciiFile",1591,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - gridfile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("New",298,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadIdentifierFromAsciiFile",2684,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - type "
"u 'TString' - 1 - cl u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - gridfile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteParameterListOfIDTelescopes",3233,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("BackwardsCompatibilityFix",2579,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AcceptIDForTest",1444,G__G__KVMultiDetidentification_351_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Identify",828,G__G__KVMultiDetidentification_351_0_38, 121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"U 'KVIdentificationResult' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Initialize",1042,G__G__KVMultiDetidentification_351_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("IsIdentifiable",1404,G__G__KVMultiDetidentification_351_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 8, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAutoAdd",974,G__G__KVMultiDetidentification_351_0_41, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&KVIDGraph::SetAutoAdd) ), 0);
   G__memfunc_setup("ClearListOfTelescopes",2127,G__G__KVMultiDetidentification_351_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLastSavedVersion",1933,G__G__KVMultiDetidentification_351_0_43, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RevertToLastSavedVersion",2472,G__G__KVMultiDetidentification_351_0_44, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateLastSavedVersion",2256,G__G__KVMultiDetidentification_351_0_45, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeIDGraph",1021,G__G__KVMultiDetidentification_351_0_46, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 1, 3, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) G__func2void( (KVIDGraph* (*)(const Char_t*))(&KVIDGraph::MakeIDGraph) ), 0);
   G__memfunc_setup("FindAxisLimits",1416,G__G__KVMultiDetidentification_351_0_47, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__G__KVMultiDetidentification_351_0_48, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TF1' - 0 - sx U 'TF1' - 0 - sy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__G__KVMultiDetidentification_351_0_49, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 - A", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveIdentifier",1649,G__G__KVMultiDetidentification_351_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDentifier' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveCut",922,G__G__KVMultiDetidentification_351_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDentifier' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPad",565,G__G__KVMultiDetidentification_351_0_52, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVirtualPad), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadAsciiFile",1253,G__G__KVMultiDetidentification_351_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIDTelescopes",1453,G__G__KVMultiDetidentification_351_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("SetXVariable",1194,G__G__KVMultiDetidentification_351_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - v", "*MENU={Hierarchy=\"Set.../X Variable\"}* *ARGS={v=>fVarX}", (void*) NULL, 0);
   G__memfunc_setup("SetYVariable",1195,G__G__KVMultiDetidentification_351_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - v", "*MENU={Hierarchy=\"Set.../Y Variable\"}* *ARGS={v=>fVarY}", (void*) NULL, 0);
   G__memfunc_setup("SetRunList",1021,G__G__KVMultiDetidentification_351_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - runlist", "*MENU={Hierarchy=\"Set.../List of Runs\"}*", (void*) NULL, 0);
   G__memfunc_setup("SetOnlyZId",981,G__G__KVMultiDetidentification_351_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", "*TOGGLE={Hierarchy=\"Z identification only\"}*", (void*) NULL, 0);
   G__memfunc_setup("SetMassFormula",1430,G__G__KVMultiDetidentification_351_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", "*SUBMENU={Hierarchy=\"Set.../Mass Formula\"}*", (void*) NULL, 0);
   G__memfunc_setup("WriteAsciiFile",1396,G__G__KVMultiDetidentification_351_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - filename", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetXScaleFactor",1483,G__G__KVMultiDetidentification_351_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' -", "*MENU={Hierarchy=\"Scale.../X Scale Factor\"}*", (void*) NULL, 0);
   G__memfunc_setup("SetYScaleFactor",1484,G__G__KVMultiDetidentification_351_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' -", "*MENU={Hierarchy=\"Scale.../Y Scale Factor\"}*", (void*) NULL, 0);
   G__memfunc_setup("SetEditable",1094,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' editable", "*TOGGLE* *GETTER=GetEditable", (void*) NULL, 1);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", "*MENU={Hierarchy=\"View.../Draw\"}*", (void*) NULL, 1);
   G__memfunc_setup("UnDraw",593,G__G__KVMultiDetidentification_351_0_67, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"View.../UnDraw\"}*", (void*) NULL, 0);
   G__memfunc_setup("ResetDraw",913,G__G__KVMultiDetidentification_351_0_68, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"View.../ResetDraw\"}*", (void*) NULL, 0);
   G__memfunc_setup("SetLineColor",1203,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "s - 'Color_t' 0 - lcolor", "*MENU={Hierarchy=\"View.../SetLinecolor\"}*", (void*) NULL, 1);
   G__memfunc_setup("SetLineStyle",1221,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "s - 'Style_t' 0 - lstyle", "*MENU={Hierarchy=\"View.../SetLineStyle\"}*", (void*) NULL, 1);
   G__memfunc_setup("SetLineWidth",1204,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "s - 'Width_t' 0 - lwidth", "*MENU={Hierarchy=\"View.../SetLineWidth\"}*", (void*) NULL, 1);
   G__memfunc_setup("GetXScaleFactor",1471,G__G__KVMultiDetidentification_351_0_72, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYScaleFactor",1472,G__G__KVMultiDetidentification_351_0_73, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__KVMultiDetidentification_351_0_74, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - U 'KVIDentifier' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__G__KVMultiDetidentification_351_0_75, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DrawAndAdd",938,G__G__KVMultiDetidentification_351_0_76, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"ID\"' type C - 'Char_t' 10 '\"KVIDentifier\"' classname", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddGraphs",878,G__G__KVMultiDetidentification_351_0_78, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 6, 3, 1, 0, 
"U 'KVIDGraph' - 0 - g1 i - 'Int_t' 0 - id1_min "
"i - 'Int_t' 0 - id1_max U 'KVIDGraph' - 0 - g2 "
"i - 'Int_t' 0 - id2_min i - 'Int_t' 0 - id2_max", (char*)NULL, (void*) G__func2void( (KVIDGraph* (*)(KVIDGraph*, Int_t, Int_t, KVIDGraph*, Int_t, Int_t))(&KVIDGraph::AddGraphs) ), 0);
   G__memfunc_setup("SetRuns",724,G__G__KVMultiDetidentification_351_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "u 'KVNumberList' - 11 - nl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteAsciiFile_WP",1658,G__G__KVMultiDetidentification_351_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' version", "WP means with pattern", (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_WP",1515,G__G__KVMultiDetidentification_351_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' version", "WP means with pattern", (void*) NULL, 1);
   G__memfunc_setup("CheckVersion",1220,G__G__KVMultiDetidentification_351_0_83, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - version", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExistVersion",1267,G__G__KVMultiDetidentification_351_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - version", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetPattern",1034,G__G__KVMultiDetidentification_351_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - pattern", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPattern",1022,G__G__KVMultiDetidentification_351_0_86, 117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDTelescopes",1476,G__G__KVMultiDetidentification_351_0_87, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TList), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Increment",933,G__G__KVMultiDetidentification_351_0_88, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Modified",801,G__G__KVMultiDetidentification_351_0_89, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("OnlyZId",681,G__G__KVMultiDetidentification_351_0_90, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOnlyZId",869,G__G__KVMultiDetidentification_351_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRuns",712,G__G__KVMultiDetidentification_351_0_92, 117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNumberList), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRunList",1009,G__G__KVMultiDetidentification_351_0_93, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifierAt",1496,G__G__KVMultiDetidentification_351_0_94, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifier",1315,G__G__KVMultiDetidentification_351_0_95, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCut",588,G__G__KVMultiDetidentification_351_0_96, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameters",1332,G__G__KVMultiDetidentification_351_0_97, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNameValueList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentifiers",1430,G__G__KVMultiDetidentification_351_0_98, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCuts",703,G__G__KVMultiDetidentification_351_0_99, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfIdentifiers",2228,G__G__KVMultiDetidentification_351_0_100, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfCuts",1501,G__G__KVMultiDetidentification_351_0_101, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIdentifier",1292,G__G__KVMultiDetidentification_351_0_102, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDentifier' - 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddCut",565,G__G__KVMultiDetidentification_351_0_103, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDentifier' - 0 - cut", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SortIdentifiers",1566,G__G__KVMultiDetidentification_351_0_104, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSorted",813,G__G__KVMultiDetidentification_351_0_105, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmin",700,G__G__KVMultiDetidentification_351_0_106, 100, -1, G__defined_typename("Axis_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmin",701,G__G__KVMultiDetidentification_351_0_107, 100, -1, G__defined_typename("Axis_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXmax",702,G__G__KVMultiDetidentification_351_0_108, 100, -1, G__defined_typename("Axis_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetYmax",703,G__G__KVMultiDetidentification_351_0_109, 100, -1, G__defined_typename("Axis_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetQualityCode",1412,G__G__KVMultiDetidentification_351_0_110, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddIDTelescope",1338,G__G__KVMultiDetidentification_351_0_111, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveIDTelescope",1695,G__G__KVMultiDetidentification_351_0_112, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HandlesIDTelescope",1776,G__G__KVMultiDetidentification_351_0_113, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'KVBase' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDTelescopeLabel",1841,G__G__KVMultiDetidentification_351_0_114, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMassFormula",1418,G__G__KVMultiDetidentification_351_0_115, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetPad",792,G__G__KVMultiDetidentification_351_0_116, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearPad",764,G__G__KVMultiDetidentification_351_0_117, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsDrawn",696,G__G__KVMultiDetidentification_351_0_118, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVirtualPad), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestIdentification",1866,G__G__KVMultiDetidentification_351_0_119, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'TH2F' - 0 - data U 'TH1F' - 0 - id_real "
"U 'TH2F' - 0 - id_real_vs_e_res U 'TH2F' - 0 - z_a_real", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNamesOfIDTelescopes",2157,G__G__KVMultiDetidentification_351_0_120, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaximum",1034,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' maximum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMinimum",1032,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' minimum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitPanel",787,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPanel",894,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fit",291,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFitResultPtr), -1, 0, 5, 1, 1, 0, 
"C - - 10 - formula C - 'Option_t' 10 '\"\"' option "
"C - 'Option_t' 10 '\"\"' goption d - 'Axis_t' 0 '0' xmin "
"d - 'Axis_t' 0 '0' xmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fit",291,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFitResultPtr), -1, 0, 5, 1, 1, 0, 
"U 'TF1' - 0 - f1 C - 'Option_t' 10 '\"\"' option "
"C - 'Option_t' 10 '\"\"' goption d - 'Axis_t' 0 '0' xmin "
"d - 'Axis_t' 0 '0' xmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Delete",595,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClass",900,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClone",895,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Inspect",726,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SaveAs",579,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 '\"\"' filename C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDrawOption",1331,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLineAttributes",1755,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFillAttributes",1754,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMarkerAttributes",1973,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVarX",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetVarY",686,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - v", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InsertPoint",1151,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemovePoint",1144,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemovePoint",1144,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_351_0_142, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDGraph::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_351_0_143, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGraph::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_351_0_144, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDGraph::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_351_0_145, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDGraph::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_351_0_149, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_351_0_150, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGraph::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_351_0_151, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDGraph::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_351_0_152, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGraph::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_351_0_153, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDGraph::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDGraph", 926, G__G__KVMultiDetidentification_351_0_154, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDentifier(void) {
   /* KVIDentifier */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier));
   G__memfunc_setup("WriteAsciiFile_extras",2154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - C - 'Char_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_extras",2011,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetNameFromNucleus",1824,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDentifier",1156,G__G__KVMultiDetidentification_352_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDentifier",1156,G__G__KVMultiDetidentification_352_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 1, 0, "u 'KVIDentifier' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDentifier",1156,G__G__KVMultiDetidentification_352_0_7, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 1, 0, "u 'TCutG' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDentifier",1156,G__G__KVMultiDetidentification_352_0_8, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDentifier), -1, 0, 1, 1, 1, 0, "u 'TGraph' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParent",906,G__G__KVMultiDetidentification_352_0_9, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParent",918,G__G__KVMultiDetidentification_352_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDGraph' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteAsciiFile",1396,G__G__KVMultiDetidentification_352_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - C - 'Char_t' 10 '\"\"' name_prefix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile",1253,G__G__KVMultiDetidentification_352_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetID",429,G__G__KVMultiDetidentification_352_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetA",353,G__G__KVMultiDetidentification_352_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__KVMultiDetidentification_352_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ",390,G__G__KVMultiDetidentification_352_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ztnum", "*MENU={Hierarchy=\"SetNucleus.../Z\"}*", (void*) NULL, 1);
   G__memfunc_setup("SetA",365,G__G__KVMultiDetidentification_352_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - atnum", "*MENU={Hierarchy=\"SetNucleus.../A\"}*", (void*) NULL, 1);
   G__memfunc_setup("SetAandZ",762,G__G__KVMultiDetidentification_352_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - atnum i - 'Int_t' 0 - ztnum", "*MENU={Hierarchy=\"SetNucleus.../A and Z\"}* *ARGS={atnum=>fA,ztnum=>fZ}", (void*) NULL, 1);
   G__memfunc_setup("SetOnlyZId",981,G__G__KVMultiDetidentification_352_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' onlyz", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("OnlyZId",681,G__G__KVMultiDetidentification_352_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMassFormula",1430,G__G__KVMultiDetidentification_352_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mf", "*SUBMENU={Hierarchy=\"SetNucleus.../Mass Formula\"}*", (void*) NULL, 1);
   G__memfunc_setup("GetMassFormula",1418,G__G__KVMultiDetidentification_352_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestPoint",938,G__G__KVMultiDetidentification_352_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CopyGraph",909,G__G__KVMultiDetidentification_352_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGraph' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CopyGraph",909,G__G__KVMultiDetidentification_352_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TGraph' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__G__KVMultiDetidentification_352_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '-1' sx d - 'Double_t' 0 '-1' sy", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Scale",488,G__G__KVMultiDetidentification_352_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TF1' - 0 - sx U 'TF1' - 0 - sy", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WaitForPrimitive",1653,G__G__KVMultiDetidentification_352_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExtendLine",1008,G__G__KVMultiDetidentification_352_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - - C - 'Option_t' 10 '\"\"' Direction", "*MENU={Hierarchy=\"Modify Line.../ExtendLine\"}*", (void*) NULL, 1);
   G__memfunc_setup("SetMaximum",1034,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' maximum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMinimum",1032,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '-1111' minimum", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetTitle",814,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitPanel",787,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawPanel",894,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fit",291,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFitResultPtr), -1, 0, 5, 1, 1, 0, 
"C - - 10 - formula C - 'Option_t' 10 '\"\"' option "
"C - 'Option_t' 10 '\"\"' goption d - 'Axis_t' 0 '0' xmin "
"d - 'Axis_t' 0 '0' xmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Fit",291,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TFitResultPtr), -1, 0, 5, 1, 1, 0, 
"U 'TF1' - 0 - f1 C - 'Option_t' 10 '\"\"' option "
"C - 'Option_t' 10 '\"\"' goption d - 'Axis_t' 0 '0' xmin "
"d - 'Axis_t' 0 '0' xmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Delete",595,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClass",900,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DrawClone",895,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TObject), -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CloneScaleStore",1510,G__G__KVMultiDetidentification_352_0_44, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - newzt i - 'Int_t' 0 - newat "
"d - 'Double_t' 0 '0.' dy d - 'Double_t' 0 '1.' sx "
"d - 'Double_t' 0 '1.' sy", "*MENU* *ARGS={newat=>fA,newzt=>fZ}", (void*) NULL, 1);
   G__memfunc_setup("Dump",406,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Inspect",726,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SaveAs",579,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"C - - 10 '\"\"' filename C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetDrawOption",1331,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetLineAttributes",1755,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetFillAttributes",1754,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMarkerAttributes",1973,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InsertPoint",1151,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"Modify Line.../InsertPoint\"}*", (void*) NULL, 1);
   G__memfunc_setup("AddPointAtTheEnd",1536,G__G__KVMultiDetidentification_352_0_53, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"Modify Line.../AddPointAtTheEnd\"}*", (void*) NULL, 1);
   G__memfunc_setup("RemoveFirstPoint",1664,G__G__KVMultiDetidentification_352_0_54, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"Modify Line.../RemoveFirstPoint\"}*", (void*) NULL, 1);
   G__memfunc_setup("ContinueDrawing",1553,G__G__KVMultiDetidentification_352_0_55, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"Modify Line.../ContinueDrawing\"}*", (void*) NULL, 1);
   G__memfunc_setup("ChechHierarchy",1402,G__G__KVMultiDetidentification_352_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDentifier' - 0 - gr", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemovePoint",1144,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"Modify Line.../RemovePoint\"}*", (void*) NULL, 1);
   G__memfunc_setup("RemovePoint",1144,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetPID",509,G__G__KVMultiDetidentification_352_0_59, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_352_0_60, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDentifier::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_352_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDentifier::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_352_0_62, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDentifier::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_352_0_63, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDentifier::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_352_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_352_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDentifier::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_352_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDentifier::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_352_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDentifier::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_352_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDentifier::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDentifier", 1282, G__G__KVMultiDetidentification_352_0_72, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDLine(void) {
   /* KVIDLine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine));
   G__memfunc_setup("KVIDLine",694,G__G__KVMultiDetidentification_353_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDLine",694,G__G__KVMultiDetidentification_353_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 1, 1, 1, 0, "u 'TGraph' - 11 - gr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDLine",694,G__G__KVMultiDetidentification_353_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 1, 1, 1, 0, "u 'KVIDLine' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WaitForPrimitive",1653,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ExecuteEvent",1237,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - event i - 'Int_t' 0 - px "
"i - 'Int_t' 0 - py", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DistanceToLine",1398,G__G__KVMultiDetidentification_353_0_6, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"i - 'Int_t' 1 - i_near", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DistanceToLine",1398,G__G__KVMultiDetidentification_353_0_7, 100, -1, G__defined_typename("Double_t"), 0, 7, 1, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"d - 'Double_t' 0 - xp1 d - 'Double_t' 0 - yp1 "
"d - 'Double_t' 0 - xp2 d - 'Double_t' 0 - yp2 "
"i - 'Int_t' 1 - i_nearest_point", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WhereAmI",754,G__G__KVMultiDetidentification_353_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - px d - 'Double_t' 0 - py "
"C - 'Option_t' 10 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PosRelToLine",1184,G__G__KVMultiDetidentification_353_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"C - 'Option_t' 10 - opt d - 'Double_t' 0 - px "
"d - 'Double_t' 0 - py d - 'Double_t' 0 - xp1 "
"d - 'Double_t' 0 - yp1 d - 'Double_t' 0 - xp2 "
"d - 'Double_t' 0 - yp2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartPoint",1336,G__G__KVMultiDetidentification_353_0_10, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEndPoint",1089,G__G__KVMultiDetidentification_353_0_11, 121, -1, -1, 0, 2, 1, 1, 8, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsBetweenEndPoints",1818,G__G__KVMultiDetidentification_353_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - 'Char_t' 10 '\"\"' axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeIDLine",915,G__G__KVMultiDetidentification_353_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 5, 3, 1, 0, 
"U 'TObject' - 0 - obj d - 'Double_t' 0 '-1.' xdeb "
"d - 'Double_t' 0 '-1.' xfin d - 'Double_t' 0 '1.' np "
"g - 'Bool_t' 0 'kFALSE' save", (char*)NULL, (void*) G__func2void( (KVIDLine* (*)(TObject*, Double_t, Double_t, Double_t, Bool_t))(&KVIDLine::MakeIDLine) ), 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_353_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDLine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_353_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDLine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_353_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDLine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_353_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDLine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_353_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_353_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDLine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_353_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDLine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_353_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDLine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_353_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDLine::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDLine", 820, G__G__KVMultiDetidentification_353_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVSpiderLine(void) {
   /* KVSpiderLine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine));
   G__memfunc_setup("KVSpiderLine",1168,G__G__KVMultiDetidentification_396_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVSpiderLine",1168,G__G__KVMultiDetidentification_396_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine), -1, 0, 2, 1, 1, 0, 
"i - - 0 - z_ d - 'Double_t' 0 '0.' pdy_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVSpiderLine",1168,G__G__KVMultiDetidentification_396_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine), -1, 0, 2, 1, 1, 0, 
"i - - 0 - z_ i - - 0 - a_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddPoint",787,G__G__KVMultiDetidentification_396_0_4, 103, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - x_ d - - 0 - y_ "
"g - - 0 'false' test_ i - - 0 '-1' n_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddInterpolatePoint",1946,G__G__KVMultiDetidentification_396_0_5, 103, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - x_ d - - 0 - y_ "
"g - - 0 'false' test_ i - - 0 '-1' n_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Apply",518,G__G__KVMultiDetidentification_396_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TF1' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReplaceLastPoint",1626,G__G__KVMultiDetidentification_396_0_7, 103, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - x_ d - - 0 - y_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Sort",424,G__G__KVMultiDetidentification_396_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' ascending_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__KVMultiDetidentification_396_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - z_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetA",365,G__G__KVMultiDetidentification_396_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - a_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPower",825,G__G__KVMultiDetidentification_396_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - pow_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAcceptedPoints",1730,G__G__KVMultiDetidentification_396_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ResetCounter",1251,G__G__KVMultiDetidentification_396_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__KVMultiDetidentification_396_0_14, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - n_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetX",376,G__G__KVMultiDetidentification_396_0_15, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInterpolateX",1535,G__G__KVMultiDetidentification_396_0_16, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - n_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInterpolateX",1535,G__G__KVMultiDetidentification_396_0_17, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__KVMultiDetidentification_396_0_18, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - n_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetY",377,G__G__KVMultiDetidentification_396_0_19, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInterpolateY",1536,G__G__KVMultiDetidentification_396_0_20, 100, -1, -1, 0, 1, 1, 1, 8, "i - - 0 - n_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInterpolateY",1536,G__G__KVMultiDetidentification_396_0_21, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetN",366,G__G__KVMultiDetidentification_396_0_22, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInterpolateN",1525,G__G__KVMultiDetidentification_396_0_23, 105, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLine",680,G__G__KVMultiDetidentification_396_0_24, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetInterpolateLine",1839,G__G__KVMultiDetidentification_396_0_25, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunction",1126,G__G__KVMultiDetidentification_396_0_26, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1), -1, 0, 2, 1, 1, 0, 
"d - - 0 '-1.' min_ d - - 0 '-1.' max_", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,G__G__KVMultiDetidentification_396_0_27, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__G__KVMultiDetidentification_396_0_28, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatus",932,G__G__KVMultiDetidentification_396_0_29, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatus",944,G__G__KVMultiDetidentification_396_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - - 0 'true' filled_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestPoint",938,G__G__KVMultiDetidentification_396_0_31, 103, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 - x_ d - - 0 - y_ "
"d - - 0 '-1.' dy_ g - - 0 'true' fit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistance",1099,G__G__KVMultiDetidentification_396_0_32, 100, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 - x_ d - - 0 - y_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CheckStatus",1122,G__G__KVMultiDetidentification_396_0_33, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Draw",398,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt_", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_396_0_35, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVSpiderLine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_396_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVSpiderLine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_396_0_37, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVSpiderLine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_396_0_38, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVSpiderLine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_396_0_42, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_396_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVSpiderLine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_396_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVSpiderLine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_396_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVSpiderLine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_396_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVSpiderLine::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVSpiderLine", 1168, G__G__KVMultiDetidentification_396_0_47, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine), -1, 0, 1, 1, 1, 0, "u 'KVSpiderLine' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVSpiderLine", 1294, G__G__KVMultiDetidentification_396_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_396_0_49, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderLine), -1, 1, 1, 1, 1, 0, "u 'KVSpiderLine' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVSpiderPSALine(void) {
   /* KVSpiderPSALine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine));
   G__memfunc_setup("KVSpiderPSALine",1396,G__G__KVMultiDetidentification_397_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVSpiderPSALine",1396,G__G__KVMultiDetidentification_397_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine), -1, 0, 1, 1, 1, 0, "u 'KVSpiderPSALine' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_397_0_4, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVSpiderPSALine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_397_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVSpiderPSALine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_397_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVSpiderPSALine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_397_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVSpiderPSALine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_397_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_397_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVSpiderPSALine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_397_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVSpiderPSALine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_397_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVSpiderPSALine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_397_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVSpiderPSALine::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVSpiderPSALine", 1522, G__G__KVMultiDetidentification_397_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_397_0_17, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine), -1, 1, 1, 1, 1, 0, "u 'KVSpiderPSALine' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIdentificationResult(void) {
   /* KVIdentificationResult */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult));
   G__memfunc_setup("KVIdentificationResult",2250,G__G__KVMultiDetidentification_398_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIdentificationResult",2250,G__G__KVMultiDetidentification_398_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult), -1, 0, 1, 1, 1, 0, "u 'KVIdentificationResult' - 11 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__G__KVMultiDetidentification_398_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__G__KVMultiDetidentification_398_0_6, 117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIdentificationResult), -1, 1, 1, 1, 1, 0, "u 'KVIdentificationResult' - 11 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIDType",859,G__G__KVMultiDetidentification_398_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDType",847,G__G__KVMultiDetidentification_398_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetComment",1023,G__G__KVMultiDetidentification_398_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetComment",1011,G__G__KVMultiDetidentification_398_0_10, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_398_0_11, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIdentificationResult::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_398_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIdentificationResult::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_398_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIdentificationResult::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_398_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIdentificationResult::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_398_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_398_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIdentificationResult::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_398_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIdentificationResult::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_398_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIdentificationResult::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_398_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIdentificationResult::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIdentificationResult", 2376, G__G__KVMultiDetidentification_398_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDContour(void) {
   /* KVIDContour */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour));
   G__memfunc_setup("KVIDContour",1048,G__G__KVMultiDetidentification_400_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDContour",1048,G__G__KVMultiDetidentification_400_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour), -1, 0, 1, 1, 1, 0, "u 'KVIDContour' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDContour",1048,G__G__KVMultiDetidentification_400_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDContour), -1, 0, 1, 1, 1, 0, "u 'TCutG' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InsertPoint",1151,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_400_0_5, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDContour::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_400_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDContour::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_400_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDContour::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_400_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDContour::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_400_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_400_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDContour::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_400_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDContour::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_400_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDContour::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_400_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDContour::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDContour", 1174, G__G__KVMultiDetidentification_400_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDGridManager(void) {
   /* KVIDGridManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager));
   G__memfunc_setup("GetListOfSignals",1602,G__G__KVMultiDetidentification_402_0_1, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TList), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Connect",714,G__G__KVMultiDetidentification_402_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - sig C - - 10 - cl "
"Y - - 0 - rcvr C - - 10 - slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Disconnect",1034,G__G__KVMultiDetidentification_402_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' sig Y - - 0 '0' rcvr "
"C - - 10 '0' slt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HighPriority",1250,G__G__KVMultiDetidentification_402_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LowPriority",1172,G__G__KVMultiDetidentification_402_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal_name C - - 10 '0' slot_name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("EmitVA",550,G__G__KVMultiDetidentification_402_0_6, 121, -1, -1, 0, 2, 8, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - nargs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal C - - 10 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal L - 'Long_t' 0 - paramArr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal d - 'Double_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal l - 'Long_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal n - 'Long64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal m - 'ULong64_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal g - 'Bool_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal c - 'Char_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal b - 'UChar_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal s - 'Short_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal r - 'UShort_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal i - 'Int_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal h - 'UInt_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal k - 'ULong_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Emit",399,G__G__KVMultiDetidentification_402_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 10 - signal f - 'Float_t' 0 - param", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Destroyed",947,G__G__KVMultiDetidentification_402_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangedBy",869,G__G__KVMultiDetidentification_402_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - method", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Message",709,G__G__KVMultiDetidentification_402_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - msg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddGrid",655,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'KVIDGraph' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDGridManager",1391,G__G__KVMultiDetidentification_402_0_27, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeleteGrid",985,G__G__KVMultiDetidentification_402_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'KVIDGraph' - 0 - - g - 'Bool_t' 0 'kTRUE' update", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrid",678,G__G__KVMultiDetidentification_402_0_29, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrids",793,G__G__KVMultiDetidentification_402_0_30, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile",1253,G__G__KVMultiDetidentification_402_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteAsciiFile",1396,G__G__KVMultiDetidentification_402_0_33, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - filename U 'TCollection' - 10 '0' selection", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StartViewer",1152,G__G__KVMultiDetidentification_402_0_36, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Modified",801,G__G__KVMultiDetidentification_402_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", "*SIGNAL*", (void*) NULL, 0);
   G__memfunc_setup("GetGridsForIDTelescope",2161,G__G__KVMultiDetidentification_402_0_38, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfIDTelescopeLabels",2549,G__G__KVMultiDetidentification_402_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'KVString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,G__G__KVMultiDetidentification_402_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_402_0_41, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDGridManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_402_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGridManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_402_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDGridManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_402_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDGridManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_402_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_402_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGridManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_402_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDGridManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_402_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGridManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_402_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDGridManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDGridManager", 1517, G__G__KVMultiDetidentification_402_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDGrid(void) {
   /* KVIDGrid */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGrid));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadIdentifierFromAsciiFile",2684,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"u 'TString' - 1 - name u 'TString' - 1 - type "
"u 'TString' - 1 - cl u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - gridfile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("NewLine",690,G__G__KVMultiDetidentification_681_0_4, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"\"' idline_class", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIDLinesEmbracingPoint",2362,G__G__KVMultiDetidentification_681_0_5, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 8, 
"C - 'Char_t' 10 - direction d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y u 'TList' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindNearestIDLineFast",2038,G__G__KVMultiDetidentification_681_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 9, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - 'Char_t' 10 - position i - 'Int_t' 1 - idx "
"i - 'Int_t' 1 - idx_min i - 'Int_t' 1 - idx_max "
"d - 'Double_t' 1 - dist d - 'Double_t' 1 - dist_min "
"d - 'Double_t' 1 - dist_max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNearestEmbracingIDLine",2544,G__G__KVMultiDetidentification_681_0_7, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 10, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - 'Char_t' 10 - position C - 'Char_t' 10 - axis "
"i - 'Int_t' 1 - idx i - 'Int_t' 1 - idx_min "
"i - 'Int_t' 1 - idx_max d - 'Double_t' 1 - dist "
"d - 'Double_t' 1 - dist_min d - 'Double_t' 1 - dist_max", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindNextEmbracingLine",2096,G__G__KVMultiDetidentification_681_0_8, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 5, 1, 1, 8, 
"i - 'Int_t' 1 - index i - 'Int_t' 0 - inc_index "
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - 'Char_t' 10 - axis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalculateLineWidths",1929,G__G__KVMultiDetidentification_681_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefaultIDLineClass",1744,G__G__KVMultiDetidentification_681_0_11, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefaultOKLineClass",1757,G__G__KVMultiDetidentification_681_0_12, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_681_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDGrid::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_681_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGrid::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_681_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDGrid::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_681_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDGrid::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_681_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_681_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGrid::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_681_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDGrid::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_681_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDGrid::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_681_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDGrid::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDGrid", 818, G__G__KVMultiDetidentification_681_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTGID(void) {
   /* KVTGID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIdent",800,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'KVIDLine' - 0 - - d - 'Double_t' 0 - ID", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("AddLine",657,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 1, 1, 2, 0, "U 'KVIDGrid' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetStringTelescopes",1978,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunctionalType",1749,G__G__KVMultiDetidentification_682_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZorA",668,G__G__KVMultiDetidentification_682_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightEnergyDependence",2413,G__G__KVMultiDetidentification_682_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunctionName",1511,G__G__KVMultiDetidentification_682_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - tgid", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetIDmax",767,G__G__KVMultiDetidentification_682_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDmax",755,G__G__KVMultiDetidentification_682_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIDmin",765,G__G__KVMultiDetidentification_682_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDmin",753,G__G__KVMultiDetidentification_682_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIdentification",1738,G__G__KVMultiDetidentification_682_0_17, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - ID_min d - 'Double_t' 0 - ID_max "
"d - 'Double_t' 1 - ID_quality D - 'Double_t' 0 '0' par", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddLineToGrid",1242,G__G__KVMultiDetidentification_682_0_18, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'KVIDGrid' - 0 - g i - 'Int_t' 0 - ID "
"i - 'Int_t' 0 - npoints d - 'Double_t' 0 - xmin "
"d - 'Double_t' 0 - xmax g - 'Bool_t' 0 'kFALSE' log_scale", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,G__G__KVMultiDetidentification_682_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatusString",1563,G__G__KVMultiDetidentification_682_0_22, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDistanceToLine",1686,G__G__KVMultiDetidentification_682_0_23, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"i - 'Int_t' 0 - id D - 'Double_t' 0 '0' params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeTGID",678,G__G__KVMultiDetidentification_682_0_24, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID), -1, 0, 5, 3, 1, 0, 
"C - 'Char_t' 10 - name i - 'Int_t' 0 - type "
"i - 'Int_t' 0 - light i - 'Int_t' 0 - ZorA "
"i - 'Int_t' 0 - mass", (char*)NULL, (void*) G__func2void( (KVTGID* (*)(const Char_t*, Int_t, Int_t, Int_t, Int_t))(&KVTGID::MakeTGID) ), 0);
   G__memfunc_setup("SetLambda",877,G__G__KVMultiDetidentification_682_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLambda",865,G__G__KVMultiDetidentification_682_0_26, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMu",494,G__G__KVMultiDetidentification_682_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMu",482,G__G__KVMultiDetidentification_682_0_28, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetG",371,G__G__KVMultiDetidentification_682_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetG",359,G__G__KVMultiDetidentification_682_0_30, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPdx",600,G__G__KVMultiDetidentification_682_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdx",588,G__G__KVMultiDetidentification_682_0_32, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPdy",601,G__G__KVMultiDetidentification_682_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPdy",589,G__G__KVMultiDetidentification_682_0_34, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAlpha",786,G__G__KVMultiDetidentification_682_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlpha",774,G__G__KVMultiDetidentification_682_0_36, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBeta",680,G__G__KVMultiDetidentification_682_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBeta",668,G__G__KVMultiDetidentification_682_0_38, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNu",495,G__G__KVMultiDetidentification_682_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNu",483,G__G__KVMultiDetidentification_682_0_40, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetXi",493,G__G__KVMultiDetidentification_682_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetXi",481,G__G__KVMultiDetidentification_682_0_42, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEta",582,G__G__KVMultiDetidentification_682_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEta",570,G__G__KVMultiDetidentification_682_0_44, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMassformula",1462,G__G__KVMultiDetidentification_682_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMassFormula",1418,G__G__KVMultiDetidentification_682_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLTGParameters",1575,G__G__KVMultiDetidentification_682_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLTGParameters",1575,G__G__KVMultiDetidentification_682_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberOfLTGParameters",2361,G__G__KVMultiDetidentification_682_0_49, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - type i - 'Int_t' 0 - light", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t))(&KVTGID::GetNumberOfLTGParameters) ), 0);
   G__memfunc_setup("SetLTGParameterNames",1960,G__G__KVMultiDetidentification_682_0_50, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetValidRuns",1220,G__G__KVMultiDetidentification_682_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'KVNumberList' - 11 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetValidRuns",1208,G__G__KVMultiDetidentification_682_0_52, 117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVNumberList), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValidForRun",1288,G__G__KVMultiDetidentification_682_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - run", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVarX",685,G__G__KVMultiDetidentification_682_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVarX",673,G__G__KVMultiDetidentification_682_0_55, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetVarY",686,G__G__KVMultiDetidentification_682_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetVarY",674,G__G__KVMultiDetidentification_682_0_57, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIDTelescopes",1488,G__G__KVMultiDetidentification_682_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TCollection' - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ClearIDTelescopes",1675,G__G__KVMultiDetidentification_682_0_59, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIDTelescope",1338,G__G__KVMultiDetidentification_682_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVBase' - 0 - tel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsValidForTelescope",1911,G__G__KVMultiDetidentification_682_0_61, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "U 'KVBase' - 0 - tel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDTelescopes",1476,G__G__KVMultiDetidentification_682_0_62, 117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteToAsciiFile",1591,G__G__KVMultiDetidentification_682_0_63, 121, -1, -1, 0, 1, 1, 1, 8, "u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFromAsciiFile",1657,G__G__KVMultiDetidentification_682_0_64, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID), -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - name u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) G__func2void( (KVTGID* (*)(const Char_t*, ifstream&))(&KVTGID::ReadFromAsciiFile) ), 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_682_0_65, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTGID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_682_0_66, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_682_0_67, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTGID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_682_0_68, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTGID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_682_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_682_0_73, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_682_0_74, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_682_0_75, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_682_0_76, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGID::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTGID", 583, G__G__KVMultiDetidentification_682_0_77, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTGIDZ(void) {
   /* KVTGIDZ */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ));
   G__memfunc_setup("SetIdent",800,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'KVIDLine' - 0 - - d - 'Double_t' 0 - ID", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddLine",657,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 1, 1, 2, 0, "U 'KVIDGrid' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVTGIDZ",547,G__G__KVMultiDetidentification_684_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDZ",547,G__G__KVMultiDetidentification_684_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ), -1, 0, 7, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - function "
"d - 'Double_t' 0 - xmin d - 'Double_t' 0 - xmax "
"i - 'Int_t' 0 - npar i - 'Int_t' 0 - x_par "
"i - 'Int_t' 0 - y_par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDZ",547,G__G__KVMultiDetidentification_684_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 - name i - 'Int_t' 0 - npar "
"i - 'Int_t' 0 - type i - 'Int_t' 0 - light "
"i - 'Int_t' 0 - mass", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDZ",547,G__G__KVMultiDetidentification_684_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZ), -1, 0, 1, 1, 1, 0, "u 'KVTGID' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_684_0_7, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTGIDZ::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_684_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDZ::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_684_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTGIDZ::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_684_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTGIDZ::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_684_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_684_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDZ::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_684_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDZ::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_684_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDZ::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_684_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDZ::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTGIDZ", 673, G__G__KVMultiDetidentification_684_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTGIDZA(void) {
   /* KVTGIDZA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA));
   G__memfunc_setup("SetIdent",800,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'KVIDLine' - 0 - - d - 'Double_t' 0 - ID", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("AddLine",657,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 1, 1, 2, 0, "U 'KVIDGrid' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVTGIDZA",612,G__G__KVMultiDetidentification_685_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDZA",612,G__G__KVMultiDetidentification_685_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA), -1, 0, 7, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - function "
"d - 'Double_t' 0 - xmin d - 'Double_t' 0 - xmax "
"i - 'Int_t' 0 - npar i - 'Int_t' 0 - x_par "
"i - 'Int_t' 0 - y_par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDZA",612,G__G__KVMultiDetidentification_685_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDZA), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - name i - 'Int_t' 0 - npar "
"i - 'Int_t' 0 - type i - 'Int_t' 0 - light", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddLineToGrid",1242,(G__InterfaceMethod) NULL,121, -1, -1, 0, 6, 1, 1, 0, 
"U 'KVIDGrid' - 0 - g i - 'Int_t' 0 - ID "
"i - 'Int_t' 0 - npoints d - 'Double_t' 0 - xmin "
"d - 'Double_t' 0 - xmax g - 'Bool_t' 0 'kFALSE' logscale", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_685_0_7, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTGIDZA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_685_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDZA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_685_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTGIDZA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_685_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTGIDZA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_685_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_685_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDZA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_685_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDZA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_685_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDZA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_685_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDZA::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTGIDZA", 738, G__G__KVMultiDetidentification_685_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVVirtualIDFitter(void) {
   /* KVVirtualIDFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter));
   G__memfunc_setup("Fit",291,G__G__KVMultiDetidentification_686_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDGraph' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("SetGrid",690,G__G__KVMultiDetidentification_686_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDGraph' - 0 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGrid",678,G__G__KVMultiDetidentification_686_0_4, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetPad",577,G__G__KVMultiDetidentification_686_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TVirtualPad' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPad",565,G__G__KVMultiDetidentification_686_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TVirtualPad), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDefaultFitter",1619,G__G__KVMultiDetidentification_686_0_7, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (KVVirtualIDFitter* (*)())(&KVVirtualIDFitter::GetDefaultFitter) ), 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_686_0_8, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVVirtualIDFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_686_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVVirtualIDFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_686_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVVirtualIDFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_686_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVVirtualIDFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_686_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_686_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVVirtualIDFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_686_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVVirtualIDFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_686_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVVirtualIDFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_686_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVVirtualIDFitter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVVirtualIDFitter", 1793, G__G__KVMultiDetidentification_686_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_686_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter), -1, 1, 1, 1, 1, 0, "u 'KVVirtualIDFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTGIDFitter(void) {
   /* KVTGIDFitter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter));
   G__memfunc_setup("MakeTGID",678,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDFitter",1079,G__G__KVMultiDetidentification_687_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Fit",291,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDGraph' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FitPanel",787,G__G__KVMultiDetidentification_687_0_4, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 '1' functional_type g - 'Bool_t' 0 'kTRUE' with_csi_light_energy "
"i - 'Int_t' 0 '-1' first_Z i - 'Int_t' 0 '-1' last_Z "
"d - 'Double_t' 0 '0.0' xmin d - 'Double_t' 0 '0.0' xmax", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetType",718,G__G__KVMultiDetidentification_687_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetType",706,G__G__KVMultiDetidentification_687_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLight",804,G__G__KVMultiDetidentification_687_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ih", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLight",792,G__G__KVMultiDetidentification_687_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFitStatus",1223,G__G__KVMultiDetidentification_687_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFitStatusString",1854,G__G__KVMultiDetidentification_687_0_10, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetParameters",1332,G__G__KVMultiDetidentification_687_0_11, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusOfParameters",2157,G__G__KVMultiDetidentification_687_0_12, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTGID",584,G__G__KVMultiDetidentification_687_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_687_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTGIDFitter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_687_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDFitter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_687_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTGIDFitter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_687_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTGIDFitter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_687_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_687_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDFitter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_687_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDFitter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_687_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDFitter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_687_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDFitter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVTGIDFitter", 1079, G__G__KVMultiDetidentification_687_0_26, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter), -1, 0, 1, 1, 1, 0, "u 'KVTGIDFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVTGIDFitter", 1205, G__G__KVMultiDetidentification_687_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_687_0_28, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDFitter), -1, 1, 1, 1, 1, 0, "u 'KVTGIDFitter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDCutContour(void) {
   /* KVIDCutContour */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour));
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetA",365,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAandZ",762,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMassFormula",1430,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteAsciiFile_extras",2154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - C - 'Char_t' 10 '\"\"' name_prefix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_extras",2011,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVIDCutContour",1348,G__G__KVMultiDetidentification_688_0_7, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDCutContour",1348,G__G__KVMultiDetidentification_688_0_8, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour), -1, 0, 1, 1, 1, 0, "u 'KVIDCutContour' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDCutContour",1348,G__G__KVMultiDetidentification_688_0_9, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutContour), -1, 0, 1, 1, 1, 0, "u 'TCutG' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMassFormula",1418,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestPoint",938,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetExclusive",1252,G__G__KVMultiDetidentification_688_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' e", "*TOGGLE*", (void*) NULL, 0);
   G__memfunc_setup("IsExclusive",1140,G__G__KVMultiDetidentification_688_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_688_0_17, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDCutContour::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_688_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDCutContour::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_688_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDCutContour::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_688_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDCutContour::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_688_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_688_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDCutContour::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_688_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDCutContour::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_688_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDCutContour::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_688_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDCutContour::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDCutContour", 1474, G__G__KVMultiDetidentification_688_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTGIDGrid(void) {
   /* KVTGIDGrid */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid));
   G__memfunc_setup("KVTGIDGrid",847,G__G__KVMultiDetidentification_689_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVTGIDGrid",847,G__G__KVMultiDetidentification_689_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid), -1, 0, 2, 1, 1, 0, 
"U 'KVTGID' - 0 - - U 'KVIDZAGrid' - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteToAsciiFile",1591,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadFromAsciiFile",1657,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Generate",811,G__G__KVMultiDetidentification_689_0_5, 121, -1, -1, 0, 6, 1, 1, 0, 
"d - 'Double_t' 0 - xmax d - 'Double_t' 0 - xmin "
"i - 'Int_t' 0 '0' ID_min i - 'Int_t' 0 '0' ID_max "
"i - 'Int_t' 0 '50' npoints g - 'Bool_t' 0 'kTRUE' logscale", "*MENU* *ARGS={xmax=>fXmax,xmin=>fXmin}", (void*) NULL, 1);
   G__memfunc_setup("GetTGID",584,G__G__KVMultiDetidentification_689_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID), -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddIdentifier",1292,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'KVIDentifier' - 0 - id", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_689_0_8, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTGIDGrid::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_689_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDGrid::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_689_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTGIDGrid::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_689_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTGIDGrid::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_689_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_689_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDGrid::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_689_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDGrid::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_689_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDGrid::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_689_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDGrid::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTGIDGrid", 973, G__G__KVMultiDetidentification_689_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVTGIDManager(void) {
   /* KVTGIDManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManager));
   G__memfunc_setup("KVTGIDManager",1156,G__G__KVMultiDetidentification_690_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddTGID",561,G__G__KVMultiDetidentification_690_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVTGID' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTGID",584,G__G__KVMultiDetidentification_690_0_3, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveTGID",918,G__G__KVMultiDetidentification_690_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveAllTGID",1199,G__G__KVMultiDetidentification_690_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTGID",584,G__G__KVMultiDetidentification_690_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGID), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - idt_name C - 'Char_t' 10 - id_type "
"C - 'Char_t' 10 - grid_type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTGIDName",969,G__G__KVMultiDetidentification_690_0_7, 67, -1, G__defined_typename("Char_t"), 0, 3, 1, 1, 1, 
"C - 'Char_t' 10 - idt_name C - 'Char_t' 10 - id_type "
"C - 'Char_t' 10 - grid_type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetListOfIDFunctions",1975,G__G__KVMultiDetidentification_690_0_8, 117, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVList), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIDmax",755,G__G__KVMultiDetidentification_690_0_9, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IdentZ",590,G__G__KVMultiDetidentification_690_0_10, 100, -1, G__defined_typename("Double_t"), 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 1 - funLTG "
"C - 'Char_t' 10 - grid_type", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IdentA",565,G__G__KVMultiDetidentification_690_0_11, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 0, 
"C - 'Char_t' 10 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 1 - funLTG "
"C - 'Char_t' 10 - grid_type i - 'Int_t' 0 - Z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTGIDGrid",974,G__G__KVMultiDetidentification_690_0_12, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid), -1, 0, 7, 1, 1, 0, 
"U 'KVTGID' - 0 - tgid d - 'Double_t' 0 - xmax "
"d - 'Double_t' 0 '0.' xmin i - 'Int_t' 0 '0' ID_min "
"i - 'Int_t' 0 '0' ID_max i - 'Int_t' 0 '100' npoints "
"g - 'Bool_t' 0 'kFALSE' logscale", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTGIDGrid",974,G__G__KVMultiDetidentification_690_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid), -1, 0, 7, 1, 1, 0, 
"C - 'Char_t' 10 - tgid_name d - 'Double_t' 0 - xmax "
"d - 'Double_t' 0 '0.' xmin i - 'Int_t' 0 '0' ID_min "
"i - 'Int_t' 0 '0' ID_max i - 'Int_t' 0 '100' npoints "
"g - 'Bool_t' 0 'kFALSE' logscale", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetTGIDGrid",974,G__G__KVMultiDetidentification_690_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVTGIDGrid), -1, 0, 9, 1, 1, 0, 
"C - 'Char_t' 10 - idt_name C - 'Char_t' 10 - id_type "
"C - 'Char_t' 10 - grid_type d - 'Double_t' 0 - xmax "
"d - 'Double_t' 0 '0.' xmin i - 'Int_t' 0 '0' ID_min "
"i - 'Int_t' 0 '0' ID_max i - 'Int_t' 0 '100' npoints "
"g - 'Bool_t' 0 'kFALSE' logscale", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetStatus",932,G__G__KVMultiDetidentification_690_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetStatus",944,G__G__KVMultiDetidentification_690_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i 'KVTGIDManager::ETGIDMStatus' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStatusString",1563,G__G__KVMultiDetidentification_690_0_17, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 9, "i 'KVTGIDManager::ETGIDMStatus' - 0 'kCurrentStatus' s", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_690_0_18, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVTGIDManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_690_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_690_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVTGIDManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_690_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVTGIDManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__KVMultiDetidentification_690_0_22, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__KVMultiDetidentification_690_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__KVMultiDetidentification_690_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_690_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_690_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_690_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_690_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVTGIDManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_690_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVTGIDManager::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVTGIDManager", 1282, G__G__KVMultiDetidentification_690_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDZALine(void) {
   /* KVIDZALine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine));
   G__memfunc_setup("SetAsymWidth",1222,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - d_l d - 'Double_t' 0 - d_r", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WriteAsciiFile_extras",2154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - C - 'Char_t' 10 '\"\"' name_prefix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_extras",2011,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVIDZALine",849,G__G__KVMultiDetidentification_692_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDZALine",849,G__G__KVMultiDetidentification_692_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine), -1, 0, 1, 1, 1, 0, "u 'KVIDZALine' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetWidth",800,G__G__KVMultiDetidentification_692_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetWidth",812,G__G__KVMultiDetidentification_692_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLineWithWidth",1604,G__G__KVMultiDetidentification_692_0_10, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TGraphErrors), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__G__KVMultiDetidentification_692_0_12, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_KVIDZLine",2132,G__G__KVMultiDetidentification_692_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_692_0_14, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDZALine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_692_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZALine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_692_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDZALine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_692_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDZALine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_692_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_692_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZALine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_692_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZALine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_692_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZALine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_692_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZALine::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDZALine", 975, G__G__KVMultiDetidentification_692_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDZAGrid(void) {
   /* KVIDZAGrid */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid));
   G__memfunc_setup("SetZmax",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFourEmbracingLines",2208,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"C - 'Char_t' 10 - position", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AcceptIDForTest",1444,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVIDZAGrid",847,G__G__KVMultiDetidentification_693_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDZAGrid",847,G__G__KVMultiDetidentification_693_0_6, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAGrid), -1, 0, 1, 1, 1, 0, "u 'KVIDZAGrid' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("RemoveLine",1014,G__G__KVMultiDetidentification_693_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - Z i - 'Int_t' 0 '-1' A", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("RemoveZLines",1219,G__G__KVMultiDetidentification_693_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - ZList", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("SetVarXVarY",1071,G__G__KVMultiDetidentification_693_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - VarX C - - 0 - VarY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddParameter",1194,G__G__KVMultiDetidentification_693_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - - 0 - Name C - - 0 - Value", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Initialize",1042,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("DrawLinesWithWidth",1829,G__G__KVMultiDetidentification_693_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", "*MENU={Hierarchy=\"View.../DrawLinesWithWidth\"}*", (void*) NULL, 0);
   G__memfunc_setup("CalculateLineWidths",1929,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZmax",704,G__G__KVMultiDetidentification_693_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZLine",770,G__G__KVMultiDetidentification_693_0_16, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine), -1, 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - z i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZmaxLine",1096,G__G__KVMultiDetidentification_693_0_17, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZALine",835,G__G__KVMultiDetidentification_693_0_18, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZALine), -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 0 - z i - 'Int_t' 0 - a "
"i - 'Int_t' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IdentZA",655,G__G__KVMultiDetidentification_693_0_19, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"i - 'Int_t' 1 - Z d - 'Double_t' 1 - A", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefaultIDLineClass",1744,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IdentZ",590,G__G__KVMultiDetidentification_693_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"d - 'Double_t' 1 - Z", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetQualityCode",1412,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Identify",828,(G__InterfaceMethod) NULL,121, -1, -1, 0, 3, 1, 1, 8, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y "
"U 'KVIdentificationResult' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetClosestLine",1413,G__G__KVMultiDetidentification_693_0_24, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDLine), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDistanceClosestLine",2224,G__G__KVMultiDetidentification_693_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIndexClosest",1525,G__G__KVMultiDetidentification_693_0_26, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MakeSubsetGraph",1510,G__G__KVMultiDetidentification_693_0_27, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - Zmin i - 'Int_t' 0 - Zmax "
"C - 'Char_t' 10 '\"\"' -", "*MENU*", (void*) NULL, 0);
   G__memfunc_setup("MakeSubsetGraph",1510,G__G__KVMultiDetidentification_693_0_28, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGraph), -1, 0, 2, 1, 1, 0, 
"U 'TList' - 0 - - U 'TClass' - 0 '0' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_693_0_29, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDZAGrid::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_693_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZAGrid::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_693_0_31, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDZAGrid::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_693_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDZAGrid::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_693_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_693_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZAGrid::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_693_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZAGrid::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_693_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZAGrid::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_693_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZAGrid::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDZAGrid", 973, G__G__KVMultiDetidentification_693_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDZGrid(void) {
   /* KVIDZGrid */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid));
   G__memfunc_setup("KVIDZGrid",782,G__G__KVMultiDetidentification_695_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZGrid), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_695_0_2, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDZGrid::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_695_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZGrid::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_695_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDZGrid::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_695_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDZGrid::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_695_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_695_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZGrid::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_695_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZGrid::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_695_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZGrid::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_695_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZGrid::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDZGrid", 908, G__G__KVMultiDetidentification_695_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDZLine(void) {
   /* KVIDZLine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine));
   G__memfunc_setup("KVIDZLine",784,G__G__KVMultiDetidentification_697_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZLine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_697_0_2, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDZLine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_697_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZLine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_697_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDZLine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_697_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDZLine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_697_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_697_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZLine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_697_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZLine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_697_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZLine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_697_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZLine::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDZLine", 910, G__G__KVMultiDetidentification_697_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVDroite(void) {
   /* KVDroite */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite));
   G__memfunc_setup("KVDroite",776,G__G__KVMultiDetidentification_698_0_1, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVDroite",776,G__G__KVMultiDetidentification_698_0_2, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite), -1, 0, 2, 1, 1, 0, 
"d - - 0 - a0_ d - - 0 - theta_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVDroite",776,G__G__KVMultiDetidentification_698_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite), -1, 0, 3, 1, 1, 0, 
"d - - 0 - x0_ d - - 0 - _y0 "
"d - - 0 - theta_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA0",401,G__G__KVMultiDetidentification_698_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTheta",790,G__G__KVMultiDetidentification_698_0_5, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunction",1126,G__G__KVMultiDetidentification_698_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__G__KVMultiDetidentification_698_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - - 0 '0.' min_ d - - 0 '4096.' max_", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetA0",413,G__G__KVMultiDetidentification_698_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - a0", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTheta",802,G__G__KVMultiDetidentification_698_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_698_0_10, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVDroite::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_698_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDroite::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_698_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVDroite::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_698_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVDroite::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_698_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_698_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDroite::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_698_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVDroite::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_698_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDroite::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_698_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVDroite::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVDroite", 776, G__G__KVMultiDetidentification_698_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite), -1, 0, 1, 1, 1, 0, "u 'KVDroite' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVDroite", 902, G__G__KVMultiDetidentification_698_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_698_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDroite), -1, 1, 1, 1, 1, 0, "u 'KVDroite' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVDP2toIDGridConvertor(void) {
   /* KVDP2toIDGridConvertor */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor));
   G__memfunc_setup("ReadLineCoords",1390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'KVIDGrid' - 0 - - u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadFile",764,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - filename", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVDP2toIDGridConvertor",2079,G__G__KVMultiDetidentification_699_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetGridClass",1192,G__G__KVMultiDetidentification_699_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - cl", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Convert",737,G__G__KVMultiDetidentification_699_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_699_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVDP2toIDGridConvertor::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_699_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDP2toIDGridConvertor::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_699_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVDP2toIDGridConvertor::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_699_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVDP2toIDGridConvertor::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__KVMultiDetidentification_699_0_10, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__KVMultiDetidentification_699_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__KVMultiDetidentification_699_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_699_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_699_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDP2toIDGridConvertor::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_699_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVDP2toIDGridConvertor::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_699_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVDP2toIDGridConvertor::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_699_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVDP2toIDGridConvertor::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVDP2toIDGridConvertor", 2079, G__G__KVMultiDetidentification_699_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor), -1, 0, 1, 1, 1, 0, "u 'KVDP2toIDGridConvertor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVDP2toIDGridConvertor", 2205, G__G__KVMultiDetidentification_699_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_699_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor), -1, 1, 1, 1, 1, 0, "u 'KVDP2toIDGridConvertor' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDZAContour(void) {
   /* KVIDZAContour */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour));
   G__memfunc_setup("WriteAsciiFile_extras",2154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - C - 'Char_t' 10 '\"\"' name_prefix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_extras",2011,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVIDZAContour",1203,G__G__KVMultiDetidentification_700_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDZAContour",1203,G__G__KVMultiDetidentification_700_0_4, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour), -1, 0, 1, 1, 1, 0, "u 'KVIDZAContour' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVIDZAContour",1203,G__G__KVMultiDetidentification_700_0_5, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDZAContour), -1, 0, 1, 1, 1, 0, "u 'TCutG' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_700_0_6, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDZAContour::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_700_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZAContour::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_700_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDZAContour::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_700_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDZAContour::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_700_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_700_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZAContour::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_700_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZAContour::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_700_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDZAContour::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_700_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDZAContour::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDZAContour", 1329, G__G__KVMultiDetidentification_700_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDMap(void) {
   /* KVIDMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDMap));
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_701_0_2, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_701_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_701_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_701_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_701_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_701_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_701_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_701_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_701_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDMap::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDMap", 714, G__G__KVMultiDetidentification_701_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDSubCodeManager(void) {
   /* KVIDSubCodeManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager));
   G__memfunc_setup("GetIDSubCode",1106,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'Binary_t<unsigned short>' 'KVIDSubCode' 1 - concat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetIDSubCodeString",1737,(G__InterfaceMethod) NULL, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 4, 9, "u 'Binary_t<unsigned short>' 'KVIDSubCode' 1 - concat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVIDSubCodeManager",1678,G__G__KVMultiDetidentification_707_0_3, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager), -1, 0, 2, 1, 1, 0, 
"b - 'UChar_t' 0 '16' nbits b - 'UChar_t' 0 '15' msb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNbits",812,G__G__KVMultiDetidentification_707_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMSB",526,G__G__KVMultiDetidentification_707_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIDSubCode",1118,G__G__KVMultiDetidentification_707_0_6, 121, -1, -1, 0, 2, 1, 1, 8, 
"u 'Binary_t<unsigned short>' 'KVIDSubCode' 1 - concat r - 'UShort_t' 0 - subcod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintSCM",752,G__G__KVMultiDetidentification_707_0_7, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SubCodeNotSet",1282,G__G__KVMultiDetidentification_707_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_707_0_9, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDSubCodeManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_707_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDSubCodeManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_707_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDSubCodeManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_707_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDSubCodeManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__G__KVMultiDetidentification_707_0_13, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__G__KVMultiDetidentification_707_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__G__KVMultiDetidentification_707_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_707_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_707_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDSubCodeManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_707_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDSubCodeManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_707_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDSubCodeManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_707_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDSubCodeManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVIDSubCodeManager", 1678, G__G__KVMultiDetidentification_707_0_21, (int) ('i'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager), -1, 0, 1, 1, 1, 0, "u 'KVIDSubCodeManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVIDSubCodeManager", 1804, G__G__KVMultiDetidentification_707_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVMultiDetidentification_707_0_23, (int) ('u'), G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager), -1, 1, 1, 1, 1, 0, "u 'KVIDSubCodeManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVIDCutLine(void) {
   /* KVIDCutLine */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine));
   G__memfunc_setup("WriteAsciiFile_extras",2154,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - C - 'Char_t' 10 '\"\"' name_prefix", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ReadAsciiFile_extras",2011,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_ifstream<char,char_traits<char> >' 'ifstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetZ",390,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetA",365,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetAandZ",762,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetMassFormula",1430,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("KVIDCutLine",994,G__G__KVMultiDetidentification_709_0_7, 105, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDCutLine), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetAcceptedDirection",2022,G__G__KVMultiDetidentification_709_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - dir", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("GetA",353,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetZ",378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetMassFormula",1418,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("TestPoint",938,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - x d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetAcceptedDirection",2010,G__G__KVMultiDetidentification_709_0_13, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetName",685,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - - 10 - name", "*MENU*", (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVMultiDetidentification_709_0_15, 85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVIDCutLine::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVMultiDetidentification_709_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDCutLine::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVMultiDetidentification_709_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVIDCutLine::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVMultiDetidentification_709_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVIDCutLine::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVMultiDetidentification_709_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVMultiDetidentification_709_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDCutLine::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVMultiDetidentification_709_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDCutLine::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVMultiDetidentification_709_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVIDCutLine::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVMultiDetidentification_709_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVIDCutLine::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~KVIDCutLine", 1120, G__G__KVMultiDetidentification_709_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__KVMultiDetidentification() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
   G__memvar_setup((void*)(&gIDGridManager),85,0,0,G__get_linked_tagnum(&G__G__KVMultiDetidentificationLN_KVIDGridManager),-1,-1,1,"gIDGridManager=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__KVMultiDetidentification() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__KVMultiDetidentification() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__KVMultiDetidentificationLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDFunctions = { "KVTGIDFunctions" , 110 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TFitResultPtr = { "TFitResultPtr" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVString = { "KVString" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVBase = { "KVBase" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TQObjSender = { "TQObjSender" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVList = { "KVList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVNameValueList = { "KVNameValueList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVNumberList = { "KVNumberList" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVNucleus = { "KVNucleus" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDGraph = { "KVIDGraph" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDentifier = { "KVIDentifier" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDLine = { "KVIDLine" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TFormula = { "TFormula" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVSpiderLine = { "KVSpiderLine" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVSpiderPSALine = { "KVSpiderPSALine" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIdentificationResult = { "KVIdentificationResult" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIdentificationResultcLcLdA = { "KVIdentificationResult::$" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDContour = { "KVIDContour" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TVirtualPad = { "TVirtualPad" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDGridManager = { "KVIDGridManager" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDGrid = { "KVIDGrid" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGID = { "KVTGID" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDcLcLdA = { "KVTGID::$" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDZ = { "KVTGIDZ" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDZA = { "KVTGIDZA" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVVirtualIDFitter = { "KVVirtualIDFitter" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDFitter = { "KVTGIDFitter" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDCutContour = { "KVIDCutContour" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDGrid = { "KVTGIDGrid" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDManager = { "KVTGIDManager" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus = { "KVTGIDManager::ETGIDMStatus" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDZALine = { "KVIDZALine" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDZAGrid = { "KVIDZAGrid" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA = { "KVIDZAGrid::$" , 101 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDZGrid = { "KVIDZGrid" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDZLine = { "KVIDZLine" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVDroite = { "KVDroite" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor = { "KVDP2toIDGridConvertor" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDZAContour = { "KVIDZAContour" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDMap = { "KVIDMap" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPchargR = { "Binary_t<unsigned char>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPshortgR = { "Binary_t<unsigned short>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPintgR = { "Binary_t<unsigned int>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_Binary_tlElongsPlonggR = { "Binary_t<long long>" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDSubCodeManager = { "KVIDSubCodeManager" , 99 , -1 };
G__linked_taginfo G__G__KVMultiDetidentificationLN_KVIDCutLine = { "KVIDCutLine" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__KVMultiDetidentification() {
  G__G__KVMultiDetidentificationLN_TClass.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TBuffer.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMemberInspector.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TObject.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TNamed.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TCollection.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TString.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TList.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDFunctions.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TAttLine.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TAttFill.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TAttMarker.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TF1.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TFitResultPtr.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TH1F.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TH2F.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TGraph.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TCutG.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVString.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVBase.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TQObjSender.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVList.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVNameValueList.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVNumberList.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVNucleus.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDGraph.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDentifier.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDLine.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TFormula.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVSpiderLine.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVSpiderPSALine.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIdentificationResult.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIdentificationResultcLcLdA.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDContour.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TVirtualPad.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDGridManager.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDGrid.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGID.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDcLcLdA.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDZ.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDZA.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVVirtualIDFitter.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDFitter.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDCutContour.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDGrid.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDManager.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDZALine.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDZAGrid.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDZGrid.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_TGraphErrors.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDZLine.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVDroite.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDZAContour.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDMap.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPchargR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPshortgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPintgR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_Binary_tlElongsPlonggR.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDSubCodeManager.tagnum = -1 ;
  G__G__KVMultiDetidentificationLN_KVIDCutLine.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__KVMultiDetidentification() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TCollection);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TString);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDFunctions),0,-1,0,(char*)NULL,G__setup_memvarKVTGIDFunctions,G__setup_memfuncKVTGIDFunctions);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TF1);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TFitResultPtr);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TH1F);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TH2F);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TGraph);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TCutG);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVString);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVBase);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TQObjSender);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVNameValueList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVNumberList);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVNucleus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDGraph),sizeof(KVIDGraph),-1,128770,"Base class for particle identification in a 2D map",G__setup_memvarKVIDGraph,G__setup_memfuncKVIDGraph);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDentifier),sizeof(KVIDentifier),-1,325376,"Base class for graphical cuts used in particle identification",G__setup_memvarKVIDentifier,G__setup_memfuncKVIDentifier);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDLine),sizeof(KVIDLine),-1,128768,"Base class for lines/cuts used for particle identification",G__setup_memvarKVIDLine,G__setup_memfuncKVIDLine);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TFormula);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVSpiderLine),sizeof(KVSpiderLine),-1,324864,(char*)NULL,G__setup_memvarKVSpiderLine,G__setup_memfuncKVSpiderLine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVSpiderPSALine),sizeof(KVSpiderPSALine),-1,325376,"KVSpiderLine specialized for PSA matrix",G__setup_memvarKVSpiderPSALine,G__setup_memfuncKVSpiderPSALine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIdentificationResult),sizeof(KVIdentificationResult),-1,327424,"Full result of one attempted particle identification",G__setup_memvarKVIdentificationResult,G__setup_memfuncKVIdentificationResult);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIdentificationResultcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDContour),sizeof(KVIDContour),-1,325376,"Basic graphical contour class for use in particle identification",G__setup_memvarKVIDContour,G__setup_memfuncKVIDContour);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TVirtualPad);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDGridManager),sizeof(KVIDGridManager),-1,62720,"Handles a collection of identification grids",G__setup_memvarKVIDGridManager,G__setup_memfuncKVIDGridManager);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDGrid),sizeof(KVIDGrid),-1,324865,"Base class for 2D identification grids",G__setup_memvarKVIDGrid,G__setup_memfuncKVIDGrid);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGID),sizeof(KVTGID),-1,128770,"Abstract base class for particle identfication using functionals developed by L. Tassan-Got (IPN Orsay)",G__setup_memvarKVTGID,G__setup_memfuncKVTGID);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDZ),sizeof(KVTGIDZ),-1,324864,"Abstract base class for Z identification functionals by L. Tassan-Got",G__setup_memvarKVTGIDZ,G__setup_memfuncKVTGIDZ);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDZA),sizeof(KVTGIDZA),-1,324864,"Base class for Z & A identification functionals by L. Tassan-Got",G__setup_memvarKVTGIDZA,G__setup_memfuncKVTGIDZA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVVirtualIDFitter),sizeof(KVVirtualIDFitter),-1,324865,"ABC for fitting ID grids with functionals",G__setup_memvarKVVirtualIDFitter,G__setup_memfuncKVVirtualIDFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDFitter),sizeof(KVTGIDFitter),-1,324864,"For fitting ID grids with LTG functionals",G__setup_memvarKVTGIDFitter,G__setup_memfuncKVTGIDFitter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDCutContour),sizeof(KVIDCutContour),-1,325376,"Graphical contour for excluding/including regions in particle identification maps",G__setup_memvarKVIDCutContour,G__setup_memfuncKVIDCutContour);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDGrid),sizeof(KVTGIDGrid),-1,324864,"Grid representing result of fit",G__setup_memvarKVTGIDGrid,G__setup_memfuncKVTGIDGrid);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDManager),sizeof(KVTGIDManager),-1,263424,"Handles a set of Tassan-Got Z & A identification functionals",G__setup_memvarKVTGIDManager,G__setup_memfuncKVTGIDManager);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVTGIDManagercLcLETGIDMStatus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDZALine),sizeof(KVIDZALine),-1,128768,"Base class for identification ridge lines corresponding to different nuclear species",G__setup_memvarKVIDZALine,G__setup_memfuncKVIDZALine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDZAGrid),sizeof(KVIDZAGrid),-1,128768,"Base class for 2D Z & A identification grids",G__setup_memvarKVIDZAGrid,G__setup_memfuncKVIDZAGrid);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDZAGridcLcLdA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDZGrid),sizeof(KVIDZGrid),-1,128256,"FOR BACKWARDS COMPATIBILITY ONLY. OBSOLETE.",G__setup_memvarKVIDZGrid,G__setup_memfuncKVIDZGrid);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDZLine),sizeof(KVIDZLine),-1,128256,"FOR BACKWARDS COMPATIBILITY ONLY. OBSOLETE.",G__setup_memvarKVIDZLine,G__setup_memfuncKVIDZLine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVDroite),sizeof(KVDroite),-1,323840,"a faire !",G__setup_memvarKVDroite,G__setup_memfuncKVDroite);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVDP2toIDGridConvertor),sizeof(KVDP2toIDGridConvertor),-1,263424,"Converts dp2-format grids to KVIDGrids",G__setup_memvarKVDP2toIDGridConvertor,G__setup_memfuncKVDP2toIDGridConvertor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDZAContour),sizeof(KVIDZAContour),-1,325376,"Graphical contour associated with a given nucleus for use in particle identification",G__setup_memvarKVIDZAContour,G__setup_memfuncKVIDZAContour);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDMap),sizeof(KVIDMap),-1,324866,"Collection of graphical contours used for particle identification",G__setup_memvarKVIDMap,G__setup_memfuncKVIDMap);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPchargR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPshortgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_Binary_tlEunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_Binary_tlElongsPlonggR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDSubCodeManager),sizeof(KVIDSubCodeManager),-1,263424,"Handles the concatenation of identification routine codes",G__setup_memvarKVIDSubCodeManager,G__setup_memfuncKVIDSubCodeManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVMultiDetidentificationLN_KVIDCutLine),sizeof(KVIDCutLine),-1,324864,"Line in ID grid used to delimit regions where identification is possible",G__setup_memvarKVIDCutLine,G__setup_memfuncKVIDCutLine);
}
extern "C" void G__cpp_setupG__KVMultiDetidentification(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__KVMultiDetidentification()");
  G__set_cpp_environmentG__KVMultiDetidentification();
  G__cpp_setup_tagtableG__KVMultiDetidentification();

  G__cpp_setup_inheritanceG__KVMultiDetidentification();

  G__cpp_setup_typetableG__KVMultiDetidentification();

  G__cpp_setup_memvarG__KVMultiDetidentification();

  G__cpp_setup_memfuncG__KVMultiDetidentification();
  G__cpp_setup_globalG__KVMultiDetidentification();
  G__cpp_setup_funcG__KVMultiDetidentification();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__KVMultiDetidentification();
  return;
}
class G__cpp_setup_initG__KVMultiDetidentification {
  public:
    G__cpp_setup_initG__KVMultiDetidentification() { G__add_setup_func("G__KVMultiDetidentification",(G__incsetup)(&G__cpp_setupG__KVMultiDetidentification)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__KVMultiDetidentification() { G__remove_setup_func("G__KVMultiDetidentification"); }
};
G__cpp_setup_initG__KVMultiDetidentification G__cpp_setup_initializerG__KVMultiDetidentification;

