//
// File generated by rootcint at Thu Jan 21 16:56:04 2016

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__MicroStatmontecarlo
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__MicroStatmontecarlo.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void MicroStatcLcLMCSampler_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MicroStatcLcLMCSampler(void *p = 0);
   static void *newArray_MicroStatcLcLMCSampler(Long_t size, void *p);
   static void delete_MicroStatcLcLMCSampler(void *p);
   static void deleteArray_MicroStatcLcLMCSampler(void *p);
   static void destruct_MicroStatcLcLMCSampler(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::MicroStat::MCSampler*)
   {
      ::MicroStat::MCSampler *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MicroStat::MCSampler >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MicroStat::MCSampler", ::MicroStat::MCSampler::Class_Version(), "/home/john/software/sources/kaliveda.git/MicroStat/montecarlo/MCSampler.h", 15,
                  typeid(::MicroStat::MCSampler), ::ROOT::DefineBehavior(ptr, ptr),
                  &::MicroStat::MCSampler::Dictionary, isa_proxy, 4,
                  sizeof(::MicroStat::MCSampler) );
      instance.SetNew(&new_MicroStatcLcLMCSampler);
      instance.SetNewArray(&newArray_MicroStatcLcLMCSampler);
      instance.SetDelete(&delete_MicroStatcLcLMCSampler);
      instance.SetDeleteArray(&deleteArray_MicroStatcLcLMCSampler);
      instance.SetDestructor(&destruct_MicroStatcLcLMCSampler);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::MicroStat::MCSampler*)
   {
      return GenerateInitInstanceLocal((::MicroStat::MCSampler*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MicroStat::MCSampler*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

      namespace MicroStat {
//______________________________________________________________________________
atomic_TClass_ptr MCSampler::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *MCSampler::Class_Name()
{
   return "MicroStat::MCSampler";
}

//______________________________________________________________________________
const char *MCSampler::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MicroStat::MCSampler*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCSampler::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::MicroStat::MCSampler*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCSampler::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MicroStat::MCSampler*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCSampler::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::MicroStat::MCSampler*)0x0)->GetClass();} }
   return fgIsA;
}

} // namespace MicroStat
      namespace MicroStat {
//______________________________________________________________________________
void MCSampler::Streamer(TBuffer &R__b)
{
   // Stream an object of class MicroStat::MCSampler.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MicroStat::MCSampler::Class(),this);
   } else {
      R__b.WriteClassBuffer(MicroStat::MCSampler::Class(),this);
   }
}

} // namespace MicroStat
//______________________________________________________________________________
      namespace MicroStat {
void MCSampler::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MicroStat::MCSampler.
      TClass *R__cl = ::MicroStat::MCSampler::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLastPicked", &fLastPicked);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLegendProbaMin", &fLegendProbaMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTheLegend", &fTheLegend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPartitions", &fPartitions);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fBranch", &fBranch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPartition", &fPartition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeight", &fWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWeightList", &fWeightList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSumWeights", &fSumWeights);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ESTAR", &ESTAR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EDISP", &EDISP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IPART", &IPART);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModifyMasses", &fModifyMasses);
      KVBase::ShowMembers(R__insp);
}

} // namespace MicroStat
namespace ROOTDict {
   // Wrappers around operator new
   static void *new_MicroStatcLcLMCSampler(void *p) {
      return  p ? new(p) ::MicroStat::MCSampler : new ::MicroStat::MCSampler;
   }
   static void *newArray_MicroStatcLcLMCSampler(Long_t nElements, void *p) {
      return p ? new(p) ::MicroStat::MCSampler[nElements] : new ::MicroStat::MCSampler[nElements];
   }
   // Wrapper around operator delete
   static void delete_MicroStatcLcLMCSampler(void *p) {
      delete ((::MicroStat::MCSampler*)p);
   }
   static void deleteArray_MicroStatcLcLMCSampler(void *p) {
      delete [] ((::MicroStat::MCSampler*)p);
   }
   static void destruct_MicroStatcLcLMCSampler(void *p) {
      typedef ::MicroStat::MCSampler current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::MicroStat::MCSampler

/********************************************************
* G__MicroStatmontecarlo.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__MicroStatmontecarlo();

extern "C" void G__set_cpp_environmentG__MicroStatmontecarlo() {
  G__cpp_reset_tagtableG__MicroStatmontecarlo();
}
#include <new>
extern "C" int G__cpp_dllrevG__MicroStatmontecarlo() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MicroStat::MCSampler */
static int G__G__MicroStatmontecarlo_626_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MicroStat::MCSampler* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MicroStat::MCSampler[n];
     } else {
       p = new((void*) gvp) MicroStat::MCSampler[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MicroStat::MCSampler;
     } else {
       p = new((void*) gvp) MicroStat::MCSampler;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MicroStat::MCSampler* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MicroStat::MCSampler((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) MicroStat::MCSampler((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MicroStat::MCSampler((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) MicroStat::MCSampler((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->SetEventList((TTree*) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->SetStatWeight(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MicroStat::MCSampler*) G__getstructoffset())->GetPartition((Long64_t) G__Longlong(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((MicroStat::MCSampler*) G__getstructoffset())->SetModifyMasses((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MicroStat::MCSampler*) G__getstructoffset())->SetModifyMasses();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->UpdateMasses();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->CalculateWeights((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MicroStat::MCSampler*) G__getstructoffset())->GetWeights());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MicroStat::MCSampler*) G__getstructoffset())->GetWeight((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MicroStat::MCSampler*) G__getstructoffset())->GetSumWeights());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((MicroStat::MCSampler*) G__getstructoffset())->PickRandomChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const MicroStat::MCSampler*) G__getstructoffset())->GetRandomChannelWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->SetUpTreeBranches(libp->para[0].ref ? *(KVEvent**) libp->para[0].ref : *(KVEvent**) (void*) (&G__Mlong(libp->para[0])), (TTree*) G__int(libp->para[1])
, *(TString*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((MicroStat::MCSampler*) G__getstructoffset())->GenerateEvents((TTree*) G__int(libp->para[0]), (KVEvent*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Long64_t) G__Longlong(libp->para[3])
, (Long64_t) G__Longlong(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((MicroStat::MCSampler*) G__getstructoffset())->GenerateEvents((TTree*) G__int(libp->para[0]), (KVEvent*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Long64_t) G__Longlong(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MicroStat::MCSampler*) G__getstructoffset())->SetExcitationEnergy((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((MicroStat::MCSampler*) G__getstructoffset())->SetDecayChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->GenerateEvent((TTree*) G__int(libp->para[0]), (KVEvent*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotMultiplicities((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotMultiplicities((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotMultiplicities((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotMultiplicities((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotMultiplicities();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotProbabilities((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]), (Option_t*) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotProbabilities((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotProbabilities((double) G__double(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotProbabilities((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((MicroStat::MCSampler*) G__getstructoffset())->PlotProbabilities();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->SetLegendProbaMin((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const MicroStat::MCSampler*) G__getstructoffset())->GetLegendProbaMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->ShowLegend();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MicroStat::MCSampler::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MicroStat::MCSampler::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MicroStat::MCSampler::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MicroStat::MCSampler::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MicroStat::MCSampler*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MicroStat::MCSampler::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MicroStat::MCSampler::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MicroStat::MCSampler::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__MicroStatmontecarlo_626_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MicroStat::MCSampler::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__MicroStatmontecarlo_626_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MicroStat::MCSampler* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MicroStat::MCSampler(*(MicroStat::MCSampler*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MicroStat::MCSampler G__TMicroStatcLcLMCSampler;
static int G__G__MicroStatmontecarlo_626_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MicroStat::MCSampler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MicroStat::MCSampler*) (soff+(sizeof(MicroStat::MCSampler)*i)))->~G__TMicroStatcLcLMCSampler();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MicroStat::MCSampler*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MicroStat::MCSampler*) (soff))->~G__TMicroStatcLcLMCSampler();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__MicroStatmontecarlo_626_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MicroStat::MCSampler* dest = (MicroStat::MCSampler*) G__getstructoffset();
   *dest = *(MicroStat::MCSampler*) libp->para[0].ref;
   const MicroStat::MCSampler& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MicroStat::MCSampler */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__MicroStatmontecarlo {
 public:
  G__Sizep2memfuncG__MicroStatmontecarlo(): p(&G__Sizep2memfuncG__MicroStatmontecarlo::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__MicroStatmontecarlo::*p)();
};

size_t G__get_sizep2memfuncG__MicroStatmontecarlo()
{
  G__Sizep2memfuncG__MicroStatmontecarlo a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__MicroStatmontecarlo() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler))) {
     MicroStat::MCSampler *G__Lderived;
     G__Lderived=(MicroStat::MCSampler*)0x1000;
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler),G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler),G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler),G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__MicroStatmontecarlo() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MicroStat::MCSampler */
static void G__setup_memvarMicroStatcLcLMCSampler(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler));
   { MicroStat::MCSampler *p; p=(MicroStat::MCSampler*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLStatWeight),-1,-1,4,"fLastPicked=",0,"! weight of channel picked by call to PickRandomChannel()");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLegendProbaMin=",0,"!minimum probability for which channels are included in automatically generated TLegend when PlotProbabilities is called");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TLegend),-1,-1,4,"fTheLegend=",0,"!automatically generated legend for PlotProbabilities");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,2,"fPartitions=",0,"! number of partitions in TTree/TChain");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TBranch),-1,-1,2,"fBranch=",0,"! branch containing events");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_KVEvent),-1,-1,2,"fPartition=",0,"! event read from fPartitionList tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TClass),-1,-1,2,"fWeight=",0,"! statistical weight class");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TClonesArray),-1,-1,2,"fWeightList=",0,"! list of weights for all events");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fSumWeights=",0,"! sum of all weights");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ESTAR=",0,"! the excitation energy (Exx)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"EDISP=",0,"! the available kinetic energy");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,2,"IPART=",0,"! the partition index");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fModifyMasses=",0,"! if nuclear masses are modified");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__MicroStatmontecarlo() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMicroStatcLcLMCSampler(void) {
   /* MicroStat::MCSampler */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetBranch",890,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'TTree' - 0 - theTree u 'TString' - 11 - name "
"Y - - 0 - variable u 'TString' - 11 - vartype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialiseWeightList",2095,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCSampler",868,G__G__MicroStatmontecarlo_626_0_4, 105, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCSampler",868,G__G__MicroStatmontecarlo_626_0_5, 105, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEventList",1226,G__G__MicroStatmontecarlo_626_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - t u 'TString' - 11 - branchname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStatWeight",1328,G__G__MicroStatmontecarlo_626_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPartition",1242,G__G__MicroStatmontecarlo_626_0_8, 85, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_KVEvent), -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetModifyMasses",1536,G__G__MicroStatmontecarlo_626_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("UpdateMasses",1231,G__G__MicroStatmontecarlo_626_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalculateWeights",1641,G__G__MicroStatmontecarlo_626_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - excitation_energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeights",1019,G__G__MicroStatmontecarlo_626_0_12, 85, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TClonesArray), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetWeight",904,G__G__MicroStatmontecarlo_626_0_13, 85, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLStatWeight), -1, 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSumWeights",1328,G__G__MicroStatmontecarlo_626_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PickRandomChannel",1697,G__G__MicroStatmontecarlo_626_0_15, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRandomChannelWeight",2210,G__G__MicroStatmontecarlo_626_0_16, 85, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLStatWeight), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetUpTreeBranches",1703,G__G__MicroStatmontecarlo_626_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'KVEvent' - 1 - event U 'TTree' - 0 - theTree "
"u 'TString' - 11 - bname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEvents",1440,G__G__MicroStatmontecarlo_626_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'TTree' - 0 - - U 'KVEvent' - 0 - event "
"d - 'Double_t' 0 - - n - 'Long64_t' 0 - npartitions "
"n - 'Long64_t' 0 '10' nev_part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExcitationEnergy",1966,G__G__MicroStatmontecarlo_626_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - Exx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDecayChannel",1483,G__G__MicroStatmontecarlo_626_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GenerateEvent",1325,G__G__MicroStatmontecarlo_626_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - theTree U 'KVEvent' - 0 - event", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotMultiplicities",1904,G__G__MicroStatmontecarlo_626_0_22, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 '0.' emin d - - 0 '100.' emax "
"d - - 0 '1.' estep C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PlotProbabilities",1768,G__G__MicroStatmontecarlo_626_0_23, 121, -1, -1, 0, 4, 1, 1, 0, 
"d - - 0 '0.' emin d - - 0 '100.' emax "
"d - - 0 '1.' estep C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLegendProbaMin",1683,G__G__MicroStatmontecarlo_626_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLegendProbaMin",1671,G__G__MicroStatmontecarlo_626_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShowLegend",1008,G__G__MicroStatmontecarlo_626_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__MicroStatmontecarlo_626_0_27, 85, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MicroStat::MCSampler::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__MicroStatmontecarlo_626_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MicroStat::MCSampler::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__MicroStatmontecarlo_626_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MicroStat::MCSampler::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__MicroStatmontecarlo_626_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MicroStat::MCSampler::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__MicroStatmontecarlo_626_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__MicroStatmontecarlo_626_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MicroStat::MCSampler::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__MicroStatmontecarlo_626_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MicroStat::MCSampler::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__MicroStatmontecarlo_626_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MicroStat::MCSampler::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__MicroStatmontecarlo_626_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MicroStat::MCSampler::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCSampler", 868, G__G__MicroStatmontecarlo_626_0_39, (int) ('i'), G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler), -1, 0, 1, 1, 1, 0, "u 'MicroStat::MCSampler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCSampler", 994, G__G__MicroStatmontecarlo_626_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__MicroStatmontecarlo_626_0_41, (int) ('u'), G__get_linked_tagnum(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler), -1, 1, 1, 1, 1, 0, "u 'MicroStat::MCSampler' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__MicroStatmontecarlo() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__MicroStatmontecarlo() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__MicroStatmontecarlo() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__MicroStatmontecarloLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_KVBase = { "KVBase" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_KVEvent = { "KVEvent" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_TLegend = { "TLegend" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_MicroStat = { "MicroStat" , 110 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_MicroStatcLcLStatWeight = { "MicroStat::StatWeight" , 99 , -1 };
G__linked_taginfo G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler = { "MicroStat::MCSampler" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__MicroStatmontecarlo() {
  G__G__MicroStatmontecarloLN_TClass.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TBuffer.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMemberInspector.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TObject.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TNamed.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TString.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TClonesArray.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_KVBase.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TTree.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TBranch.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_KVEvent.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_TLegend.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_MicroStat.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_MicroStatcLcLStatWeight.tagnum = -1 ;
  G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__MicroStatmontecarlo() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TString);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_KVBase);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TTree);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TBranch);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_KVEvent);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_TLegend);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_MicroStat);
   G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_MicroStatcLcLStatWeight);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__MicroStatmontecarloLN_MicroStatcLcLMCSampler),sizeof(MicroStat::MCSampler),-1,324864,"Monte-Carlo sampling of events with statistical weights",G__setup_memvarMicroStatcLcLMCSampler,G__setup_memfuncMicroStatcLcLMCSampler);
}
extern "C" void G__cpp_setupG__MicroStatmontecarlo(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__MicroStatmontecarlo()");
  G__set_cpp_environmentG__MicroStatmontecarlo();
  G__cpp_setup_tagtableG__MicroStatmontecarlo();

  G__cpp_setup_inheritanceG__MicroStatmontecarlo();

  G__cpp_setup_typetableG__MicroStatmontecarlo();

  G__cpp_setup_memvarG__MicroStatmontecarlo();

  G__cpp_setup_memfuncG__MicroStatmontecarlo();
  G__cpp_setup_globalG__MicroStatmontecarlo();
  G__cpp_setup_funcG__MicroStatmontecarlo();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__MicroStatmontecarlo();
  return;
}
class G__cpp_setup_initG__MicroStatmontecarlo {
  public:
    G__cpp_setup_initG__MicroStatmontecarlo() { G__add_setup_func("G__MicroStatmontecarlo",(G__incsetup)(&G__cpp_setupG__MicroStatmontecarlo)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__MicroStatmontecarlo() { G__remove_setup_func("G__MicroStatmontecarlo"); }
};
G__cpp_setup_initG__MicroStatmontecarlo G__cpp_setup_initializerG__MicroStatmontecarlo;

