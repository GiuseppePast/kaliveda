//
// File generated by rootcint at Fri Jul 17 15:51:40 2015

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME G__KVIndracalibration
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__KVIndracalibration.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void KVChannelEnergyAlpha_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVChannelEnergyAlpha(void *p = 0);
   static void *newArray_KVChannelEnergyAlpha(Long_t size, void *p);
   static void delete_KVChannelEnergyAlpha(void *p);
   static void deleteArray_KVChannelEnergyAlpha(void *p);
   static void destruct_KVChannelEnergyAlpha(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVChannelEnergyAlpha*)
   {
      ::KVChannelEnergyAlpha *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVChannelEnergyAlpha >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVChannelEnergyAlpha", ::KVChannelEnergyAlpha::Class_Version(), "/home/john/software/sources/kaliveda.git/KVIndra/calibration/KVChannelEnergyAlpha.h", 23,
                  typeid(::KVChannelEnergyAlpha), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVChannelEnergyAlpha::Dictionary, isa_proxy, 4,
                  sizeof(::KVChannelEnergyAlpha) );
      instance.SetNew(&new_KVChannelEnergyAlpha);
      instance.SetNewArray(&newArray_KVChannelEnergyAlpha);
      instance.SetDelete(&delete_KVChannelEnergyAlpha);
      instance.SetDeleteArray(&deleteArray_KVChannelEnergyAlpha);
      instance.SetDestructor(&destruct_KVChannelEnergyAlpha);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVChannelEnergyAlpha*)
   {
      return GenerateInitInstanceLocal((::KVChannelEnergyAlpha*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVChannelEnergyAlpha*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVChannelVolt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVChannelVolt(void *p = 0);
   static void *newArray_KVChannelVolt(Long_t size, void *p);
   static void delete_KVChannelVolt(void *p);
   static void deleteArray_KVChannelVolt(void *p);
   static void destruct_KVChannelVolt(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVChannelVolt*)
   {
      ::KVChannelVolt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVChannelVolt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVChannelVolt", ::KVChannelVolt::Class_Version(), "/home/john/software/sources/kaliveda.git/KVIndra/calibration/KVChannelVolt.h", 23,
                  typeid(::KVChannelVolt), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVChannelVolt::Dictionary, isa_proxy, 4,
                  sizeof(::KVChannelVolt) );
      instance.SetNew(&new_KVChannelVolt);
      instance.SetNewArray(&newArray_KVChannelVolt);
      instance.SetDelete(&delete_KVChannelVolt);
      instance.SetDeleteArray(&deleteArray_KVChannelVolt);
      instance.SetDestructor(&destruct_KVChannelVolt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVChannelVolt*)
   {
      return GenerateInitInstanceLocal((::KVChannelVolt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVChannelVolt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVVoltEnergy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVVoltEnergy(void *p = 0);
   static void *newArray_KVVoltEnergy(Long_t size, void *p);
   static void delete_KVVoltEnergy(void *p);
   static void deleteArray_KVVoltEnergy(void *p);
   static void destruct_KVVoltEnergy(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVVoltEnergy*)
   {
      ::KVVoltEnergy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVVoltEnergy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVVoltEnergy", ::KVVoltEnergy::Class_Version(), "/home/john/software/sources/kaliveda.git/KVIndra/calibration/KVVoltEnergy.h", 25,
                  typeid(::KVVoltEnergy), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVVoltEnergy::Dictionary, isa_proxy, 4,
                  sizeof(::KVVoltEnergy) );
      instance.SetNew(&new_KVVoltEnergy);
      instance.SetNewArray(&newArray_KVVoltEnergy);
      instance.SetDelete(&delete_KVVoltEnergy);
      instance.SetDeleteArray(&deleteArray_KVVoltEnergy);
      instance.SetDestructor(&destruct_KVVoltEnergy);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVVoltEnergy*)
   {
      return GenerateInitInstanceLocal((::KVVoltEnergy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVVoltEnergy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVLightEnergyCsIFull_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVLightEnergyCsIFull(void *p = 0);
   static void *newArray_KVLightEnergyCsIFull(Long_t size, void *p);
   static void delete_KVLightEnergyCsIFull(void *p);
   static void deleteArray_KVLightEnergyCsIFull(void *p);
   static void destruct_KVLightEnergyCsIFull(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVLightEnergyCsIFull*)
   {
      ::KVLightEnergyCsIFull *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVLightEnergyCsIFull >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVLightEnergyCsIFull", ::KVLightEnergyCsIFull::Class_Version(), "/home/john/software/sources/kaliveda.git/KVIndra/calibration/KVLightEnergyCsIFull.h", 12,
                  typeid(::KVLightEnergyCsIFull), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVLightEnergyCsIFull::Dictionary, isa_proxy, 4,
                  sizeof(::KVLightEnergyCsIFull) );
      instance.SetNew(&new_KVLightEnergyCsIFull);
      instance.SetNewArray(&newArray_KVLightEnergyCsIFull);
      instance.SetDelete(&delete_KVLightEnergyCsIFull);
      instance.SetDeleteArray(&deleteArray_KVLightEnergyCsIFull);
      instance.SetDestructor(&destruct_KVLightEnergyCsIFull);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVLightEnergyCsIFull*)
   {
      return GenerateInitInstanceLocal((::KVLightEnergyCsIFull*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVLightEnergyCsIFull*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void KVFunctionCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_KVFunctionCal(void *p = 0);
   static void *newArray_KVFunctionCal(Long_t size, void *p);
   static void delete_KVFunctionCal(void *p);
   static void deleteArray_KVFunctionCal(void *p);
   static void destruct_KVFunctionCal(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::KVFunctionCal*)
   {
      ::KVFunctionCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::KVFunctionCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("KVFunctionCal", ::KVFunctionCal::Class_Version(), "/home/john/software/sources/kaliveda.git/KVIndra/calibration/KVFunctionCal.h", 21,
                  typeid(::KVFunctionCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::KVFunctionCal::Dictionary, isa_proxy, 4,
                  sizeof(::KVFunctionCal) );
      instance.SetNew(&new_KVFunctionCal);
      instance.SetNewArray(&newArray_KVFunctionCal);
      instance.SetDelete(&delete_KVFunctionCal);
      instance.SetDeleteArray(&deleteArray_KVFunctionCal);
      instance.SetDestructor(&destruct_KVFunctionCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::KVFunctionCal*)
   {
      return GenerateInitInstanceLocal((::KVFunctionCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::KVFunctionCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr KVChannelEnergyAlpha::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVChannelEnergyAlpha::Class_Name()
{
   return "KVChannelEnergyAlpha";
}

//______________________________________________________________________________
const char *KVChannelEnergyAlpha::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelEnergyAlpha*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVChannelEnergyAlpha::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelEnergyAlpha*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVChannelEnergyAlpha::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelEnergyAlpha*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVChannelEnergyAlpha::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelEnergyAlpha*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVChannelVolt::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVChannelVolt::Class_Name()
{
   return "KVChannelVolt";
}

//______________________________________________________________________________
const char *KVChannelVolt::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelVolt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVChannelVolt::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelVolt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVChannelVolt::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelVolt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVChannelVolt::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVChannelVolt*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVVoltEnergy::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVVoltEnergy::Class_Name()
{
   return "KVVoltEnergy";
}

//______________________________________________________________________________
const char *KVVoltEnergy::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVVoltEnergy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVVoltEnergy::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVVoltEnergy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVVoltEnergy::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVVoltEnergy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVVoltEnergy::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVVoltEnergy*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVLightEnergyCsIFull::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVLightEnergyCsIFull::Class_Name()
{
   return "KVLightEnergyCsIFull";
}

//______________________________________________________________________________
const char *KVLightEnergyCsIFull::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVLightEnergyCsIFull*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVLightEnergyCsIFull::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVLightEnergyCsIFull*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVLightEnergyCsIFull::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVLightEnergyCsIFull*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVLightEnergyCsIFull::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVLightEnergyCsIFull*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr KVFunctionCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *KVFunctionCal::Class_Name()
{
   return "KVFunctionCal";
}

//______________________________________________________________________________
const char *KVFunctionCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVFunctionCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int KVFunctionCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::KVFunctionCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void KVFunctionCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVFunctionCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *KVFunctionCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::KVFunctionCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void KVChannelVolt::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVChannelVolt.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVChannelVolt::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVChannelVolt::Class(),this);
   }
}

//______________________________________________________________________________
void KVChannelVolt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVChannelVolt.
      TClass *R__cl = ::KVChannelVolt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignal[3]", fSignal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gain_ref", &gain_ref);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVChannelVolt(void *p) {
      return  p ? new(p) ::KVChannelVolt : new ::KVChannelVolt;
   }
   static void *newArray_KVChannelVolt(Long_t nElements, void *p) {
      return p ? new(p) ::KVChannelVolt[nElements] : new ::KVChannelVolt[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVChannelVolt(void *p) {
      delete ((::KVChannelVolt*)p);
   }
   static void deleteArray_KVChannelVolt(void *p) {
      delete [] ((::KVChannelVolt*)p);
   }
   static void destruct_KVChannelVolt(void *p) {
      typedef ::KVChannelVolt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVChannelVolt

//______________________________________________________________________________
void KVChannelEnergyAlpha::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVChannelEnergyAlpha.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVChannelEnergyAlpha::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVChannelEnergyAlpha::Class(),this);
   }
}

//______________________________________________________________________________
void KVChannelEnergyAlpha::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVChannelEnergyAlpha.
      TClass *R__cl = ::KVChannelEnergyAlpha::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSignal[3]", fSignal);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVChannelEnergyAlpha(void *p) {
      return  p ? new(p) ::KVChannelEnergyAlpha : new ::KVChannelEnergyAlpha;
   }
   static void *newArray_KVChannelEnergyAlpha(Long_t nElements, void *p) {
      return p ? new(p) ::KVChannelEnergyAlpha[nElements] : new ::KVChannelEnergyAlpha[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVChannelEnergyAlpha(void *p) {
      delete ((::KVChannelEnergyAlpha*)p);
   }
   static void deleteArray_KVChannelEnergyAlpha(void *p) {
      delete [] ((::KVChannelEnergyAlpha*)p);
   }
   static void destruct_KVChannelEnergyAlpha(void *p) {
      typedef ::KVChannelEnergyAlpha current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVChannelEnergyAlpha

//______________________________________________________________________________
void KVLightEnergyCsIFull::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVLightEnergyCsIFull.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVLightEnergyCsIFull::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVLightEnergyCsIFull::Class(),this);
   }
}

//______________________________________________________________________________
void KVLightEnergyCsIFull::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVLightEnergyCsIFull.
      TClass *R__cl = ::KVLightEnergyCsIFull::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLightFormula", &fLightFormula);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZmed", &fZmed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmed", &fAmed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "u", &u);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ", &fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fMaterialTable", &fMaterialTable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fLight", &fLight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDlight", &fDlight);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVLightEnergyCsIFull(void *p) {
      return  p ? new(p) ::KVLightEnergyCsIFull : new ::KVLightEnergyCsIFull;
   }
   static void *newArray_KVLightEnergyCsIFull(Long_t nElements, void *p) {
      return p ? new(p) ::KVLightEnergyCsIFull[nElements] : new ::KVLightEnergyCsIFull[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVLightEnergyCsIFull(void *p) {
      delete ((::KVLightEnergyCsIFull*)p);
   }
   static void deleteArray_KVLightEnergyCsIFull(void *p) {
      delete [] ((::KVLightEnergyCsIFull*)p);
   }
   static void destruct_KVLightEnergyCsIFull(void *p) {
      typedef ::KVLightEnergyCsIFull current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVLightEnergyCsIFull

//______________________________________________________________________________
void KVFunctionCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVFunctionCal.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVFunctionCal::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVFunctionCal::Class(),this);
   }
}

//______________________________________________________________________________
void KVFunctionCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVFunctionCal.
      TClass *R__cl = ::KVFunctionCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fcalibfunction", &fcalibfunction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedCorr", &fPedCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fACQpar", &fACQpar);
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVFunctionCal(void *p) {
      return  p ? new(p) ::KVFunctionCal : new ::KVFunctionCal;
   }
   static void *newArray_KVFunctionCal(Long_t nElements, void *p) {
      return p ? new(p) ::KVFunctionCal[nElements] : new ::KVFunctionCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVFunctionCal(void *p) {
      delete ((::KVFunctionCal*)p);
   }
   static void deleteArray_KVFunctionCal(void *p) {
      delete [] ((::KVFunctionCal*)p);
   }
   static void destruct_KVFunctionCal(void *p) {
      typedef ::KVFunctionCal current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVFunctionCal

//______________________________________________________________________________
void KVVoltEnergy::Streamer(TBuffer &R__b)
{
   // Stream an object of class KVVoltEnergy.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(KVVoltEnergy::Class(),this);
   } else {
      R__b.WriteClassBuffer(KVVoltEnergy::Class(),this);
   }
}

//______________________________________________________________________________
void KVVoltEnergy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class KVVoltEnergy.
      TClass *R__cl = ::KVVoltEnergy::IsA();
      if (R__cl || R__insp.IsA()) { }
      KVCalibrator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_KVVoltEnergy(void *p) {
      return  p ? new(p) ::KVVoltEnergy : new ::KVVoltEnergy;
   }
   static void *newArray_KVVoltEnergy(Long_t nElements, void *p) {
      return p ? new(p) ::KVVoltEnergy[nElements] : new ::KVVoltEnergy[nElements];
   }
   // Wrapper around operator delete
   static void delete_KVVoltEnergy(void *p) {
      delete ((::KVVoltEnergy*)p);
   }
   static void deleteArray_KVVoltEnergy(void *p) {
      delete [] ((::KVVoltEnergy*)p);
   }
   static void destruct_KVVoltEnergy(void *p) {
      typedef ::KVVoltEnergy current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::KVVoltEnergy

/********************************************************
* G__KVIndracalibration.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__KVIndracalibration();

extern "C" void G__set_cpp_environmentG__KVIndracalibration() {
  G__cpp_reset_tagtableG__KVIndracalibration();
}
#include <new>
extern "C" int G__cpp_dllrevG__KVIndracalibration() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* KVChannelEnergyAlpha */
static int G__G__KVIndracalibration_364_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVChannelEnergyAlpha* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVChannelEnergyAlpha[n];
     } else {
       p = new((void*) gvp) KVChannelEnergyAlpha[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVChannelEnergyAlpha;
     } else {
       p = new((void*) gvp) KVChannelEnergyAlpha;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVChannelEnergyAlpha* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVChannelEnergyAlpha((Char_t*) G__int(libp->para[0]), (KVDetector*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVChannelEnergyAlpha((Char_t*) G__int(libp->para[0]), (KVDetector*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVChannelEnergyAlpha*) G__getstructoffset())->SetSignal((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVChannelEnergyAlpha::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVChannelEnergyAlpha::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVChannelEnergyAlpha::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVChannelEnergyAlpha::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVChannelEnergyAlpha*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVChannelEnergyAlpha::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVChannelEnergyAlpha::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVChannelEnergyAlpha::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_364_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVChannelEnergyAlpha::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVIndracalibration_364_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVChannelEnergyAlpha* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVChannelEnergyAlpha(*(KVChannelEnergyAlpha*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVChannelEnergyAlpha G__TKVChannelEnergyAlpha;
static int G__G__KVIndracalibration_364_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVChannelEnergyAlpha*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVChannelEnergyAlpha*) (soff+(sizeof(KVChannelEnergyAlpha)*i)))->~G__TKVChannelEnergyAlpha();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVChannelEnergyAlpha*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVChannelEnergyAlpha*) (soff))->~G__TKVChannelEnergyAlpha();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVIndracalibration_364_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVChannelEnergyAlpha* dest = (KVChannelEnergyAlpha*) G__getstructoffset();
   *dest = *(KVChannelEnergyAlpha*) libp->para[0].ref;
   const KVChannelEnergyAlpha& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVChannelVolt */
static int G__G__KVIndracalibration_365_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVChannelVolt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVChannelVolt[n];
     } else {
       p = new((void*) gvp) KVChannelVolt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVChannelVolt;
     } else {
       p = new((void*) gvp) KVChannelVolt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVChannelVolt* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVChannelVolt((const Char_t*) G__int(libp->para[0]), (KVDetector*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVChannelVolt((const Char_t*) G__int(libp->para[0]), (KVDetector*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVChannelVolt*) G__getstructoffset())->InvertDouble((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVChannelVolt*) G__getstructoffset())->SetGainRef((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVChannelVolt*) G__getstructoffset())->GetGainRef());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVChannelVolt*) G__getstructoffset())->SetSignal((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVChannelVolt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVChannelVolt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVChannelVolt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVChannelVolt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVChannelVolt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVChannelVolt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVChannelVolt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVChannelVolt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_365_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVChannelVolt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVIndracalibration_365_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVChannelVolt* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVChannelVolt(*(KVChannelVolt*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVChannelVolt G__TKVChannelVolt;
static int G__G__KVIndracalibration_365_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVChannelVolt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVChannelVolt*) (soff+(sizeof(KVChannelVolt)*i)))->~G__TKVChannelVolt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVChannelVolt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVChannelVolt*) (soff))->~G__TKVChannelVolt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVIndracalibration_365_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVChannelVolt* dest = (KVChannelVolt*) G__getstructoffset();
   *dest = *(KVChannelVolt*) libp->para[0].ref;
   const KVChannelVolt& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVVoltEnergy */
static int G__G__KVIndracalibration_366_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVVoltEnergy* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVVoltEnergy[n];
     } else {
       p = new((void*) gvp) KVVoltEnergy[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVVoltEnergy;
     } else {
       p = new((void*) gvp) KVVoltEnergy;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVVoltEnergy* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVVoltEnergy((KVDetector*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVVoltEnergy((KVDetector*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVVoltEnergy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVVoltEnergy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVVoltEnergy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVVoltEnergy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVVoltEnergy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVVoltEnergy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVVoltEnergy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVVoltEnergy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_366_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVVoltEnergy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVIndracalibration_366_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVVoltEnergy* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVVoltEnergy(*(KVVoltEnergy*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVVoltEnergy G__TKVVoltEnergy;
static int G__G__KVIndracalibration_366_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVVoltEnergy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVVoltEnergy*) (soff+(sizeof(KVVoltEnergy)*i)))->~G__TKVVoltEnergy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVVoltEnergy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVVoltEnergy*) (soff))->~G__TKVVoltEnergy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVIndracalibration_366_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVVoltEnergy* dest = (KVVoltEnergy*) G__getstructoffset();
   *dest = *(KVVoltEnergy*) libp->para[0].ref;
   const KVVoltEnergy& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVLightEnergyCsIFull */
static int G__G__KVIndracalibration_372_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVLightEnergyCsIFull*) G__getstructoffset())->GetDLight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLightEnergyCsIFull* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLightEnergyCsIFull[n];
     } else {
       p = new((void*) gvp) KVLightEnergyCsIFull[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLightEnergyCsIFull;
     } else {
       p = new((void*) gvp) KVLightEnergyCsIFull;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLightEnergyCsIFull* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLightEnergyCsIFull((KVDetector*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) KVLightEnergyCsIFull((KVDetector*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVLightEnergyCsIFull((KVDetector*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) KVLightEnergyCsIFull((KVDetector*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLightEnergyCsIFull*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLightEnergyCsIFull*) G__getstructoffset())->SetLightFormula((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((KVLightEnergyCsIFull*) G__getstructoffset())->GetLightFormula());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->dLightIntegral((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->dLightIntegralApprox((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->GetDeltaFraction((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->GetLight((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->GetLightApprox((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->GetLightApproxSilicon((double*) G__int(libp->para[0]), (double*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLightEnergyCsIFull*) G__getstructoffset())->SetZ((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLightEnergyCsIFull*) G__getstructoffset())->SetA((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const KVLightEnergyCsIFull*) G__getstructoffset())->GetZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const KVLightEnergyCsIFull*) G__getstructoffset())->GetA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->sp_e((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((KVLightEnergyCsIFull*) G__getstructoffset())->sp_n((double) G__double(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVLightEnergyCsIFull::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLightEnergyCsIFull::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVLightEnergyCsIFull::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVLightEnergyCsIFull::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVLightEnergyCsIFull*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLightEnergyCsIFull::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVLightEnergyCsIFull::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVLightEnergyCsIFull::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_372_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVLightEnergyCsIFull::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVIndracalibration_372_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVLightEnergyCsIFull* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVLightEnergyCsIFull(*(KVLightEnergyCsIFull*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVLightEnergyCsIFull G__TKVLightEnergyCsIFull;
static int G__G__KVIndracalibration_372_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVLightEnergyCsIFull*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVLightEnergyCsIFull*) (soff+(sizeof(KVLightEnergyCsIFull)*i)))->~G__TKVLightEnergyCsIFull();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVLightEnergyCsIFull*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVLightEnergyCsIFull*) (soff))->~G__TKVLightEnergyCsIFull();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVIndracalibration_372_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVLightEnergyCsIFull* dest = (KVLightEnergyCsIFull*) G__getstructoffset();
   *dest = *(KVLightEnergyCsIFull*) libp->para[0].ref;
   const KVLightEnergyCsIFull& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* KVFunctionCal */
static int G__G__KVIndracalibration_384_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVFunctionCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVFunctionCal[n];
     } else {
       p = new((void*) gvp) KVFunctionCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new KVFunctionCal;
     } else {
       p = new((void*) gvp) KVFunctionCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVFunctionCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVFunctionCal((TF1*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVFunctionCal((TF1*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVFunctionCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVFunctionCal((KVDetector*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) KVFunctionCal((KVDetector*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVFunctionCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new KVFunctionCal((KVDBParameterSet*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) KVFunctionCal((KVDBParameterSet*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVFunctionCal*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVFunctionCal*) G__getstructoffset())->ChangeCalibParameters((KVDBParameterSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVFunctionCal*) G__getstructoffset())->SetConversionType(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((KVFunctionCal*) G__getstructoffset())->SetExpFormula((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((KVFunctionCal*) G__getstructoffset())->SetExpFormula((const Char_t*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((KVFunctionCal*) G__getstructoffset())->SetExpFormula((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVFunctionCal*) G__getstructoffset())->WithPedestalCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((KVFunctionCal*) G__getstructoffset())->GetFunction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 100, (double) ((const KVFunctionCal*) G__getstructoffset())->Compute((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) ((const KVFunctionCal*) G__getstructoffset())->Compute());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const KVFunctionCal*) G__getstructoffset())->GetACQParam());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVFunctionCal*) G__getstructoffset())->SetACQParam((KVACQParam*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) KVFunctionCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVFunctionCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) KVFunctionCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      KVFunctionCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((KVFunctionCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVFunctionCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVFunctionCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) KVFunctionCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__KVIndracalibration_384_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) KVFunctionCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__G__KVIndracalibration_384_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   KVFunctionCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new KVFunctionCal(*(KVFunctionCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef KVFunctionCal G__TKVFunctionCal;
static int G__G__KVIndracalibration_384_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (KVFunctionCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((KVFunctionCal*) (soff+(sizeof(KVFunctionCal)*i)))->~G__TKVFunctionCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (KVFunctionCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((KVFunctionCal*) (soff))->~G__TKVFunctionCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__G__KVIndracalibration_384_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   KVFunctionCal* dest = (KVFunctionCal*) G__getstructoffset();
   *dest = *(KVFunctionCal*) libp->para[0].ref;
   const KVFunctionCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* KVChannelEnergyAlpha */

/* KVChannelVolt */

/* KVVoltEnergy */

/* KVLightEnergyCsIFull */

/* KVFunctionCal */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__KVIndracalibration {
 public:
  G__Sizep2memfuncG__KVIndracalibration(): p(&G__Sizep2memfuncG__KVIndracalibration::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__KVIndracalibration::*p)();
};

size_t G__get_sizep2memfuncG__KVIndracalibration()
{
  G__Sizep2memfuncG__KVIndracalibration a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__KVIndracalibration() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha))) {
     KVChannelEnergyAlpha *G__Lderived;
     G__Lderived=(KVChannelEnergyAlpha*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt))) {
     KVChannelVolt *G__Lderived;
     G__Lderived=(KVChannelVolt*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy))) {
     KVVoltEnergy *G__Lderived;
     G__Lderived=(KVVoltEnergy*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull))) {
     KVLightEnergyCsIFull *G__Lderived;
     G__Lderived=(KVLightEnergyCsIFull*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal))) {
     KVFunctionCal *G__Lderived;
     G__Lderived=(KVFunctionCal*)0x1000;
     {
       KVCalibrator *G__Lpbase=(KVCalibrator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVCalibrator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       KVBase *G__Lpbase=(KVBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVBase),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal),G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__KVIndracalibration() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UChar_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_Binary_tlEunsignedsPchargR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UShort_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_Binary_tlEunsignedsPshortgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<UInt_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_Binary_tlEunsignedsPintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Binary_t<Long64_t>",117,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_Binary_tlElongsPlonggR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* KVChannelEnergyAlpha */
static void G__setup_memvarKVChannelEnergyAlpha(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha));
   { KVChannelEnergyAlpha *p; p=(KVChannelEnergyAlpha*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fSignal[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVChannelVolt */
static void G__setup_memvarKVChannelVolt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt));
   { KVChannelVolt *p; p=(KVChannelVolt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fSignal[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"gain_ref=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVVoltEnergy */
static void G__setup_memvarKVVoltEnergy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy));
   { KVVoltEnergy *p; p=(KVVoltEnergy*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVLightEnergyCsIFull */
static void G__setup_memvarKVLightEnergyCsIFull(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull));
   { KVLightEnergyCsIFull *p; p=(KVLightEnergyCsIFull*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula),-1,-2,1,G__FastAllocString(2048).Format("kExact=%lldLL",(long long)KVLightEnergyCsIFull::kExact).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula),-1,-2,1,G__FastAllocString(2048).Format("kApproxIntegral=%lldLL",(long long)KVLightEnergyCsIFull::kApproxIntegral).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula),-1,-2,1,G__FastAllocString(2048).Format("kApprox=%lldLL",(long long)KVLightEnergyCsIFull::kApprox).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula),-1,-2,1,G__FastAllocString(2048).Format("kApproxSilicon=%lldLL",(long long)KVLightEnergyCsIFull::kApproxSilicon).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLightFormula=",0,"!light formula (see NIMa of Marian)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fZmed=",0,"!Z of detector material");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"fAmed=",0,"!A of detector material (CsI)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"u=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fZ=",0,"!Z of nucleus to be calibrated");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fA=",0,"!A of nucleus to be calibrated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVIonRangeTableMaterial),-1,-1,2,"fMaterialTable=",0,"! range table for CsI");
   G__memvar_setup((void*)((long)(&p->fLight)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TF1),-1,-1,1,"fLight=",0,"function parameterising light output as function of (energy, Z, A) with the full expression");
   G__memvar_setup((void*)((long)(&p->fDlight)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TF1),-1,-1,1,"fDlight=",0,"function to integrate to get fLight");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* KVFunctionCal */
static void G__setup_memvarKVFunctionCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   { KVFunctionCal *p; p=(KVFunctionCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TF1),-1,-1,4,"fcalibfunction=",0,"calibration function");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPedCorr=",0,"true if pedestal correction is required");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVACQParam),-1,-1,4,"fACQpar=",0,"! corresponding ACQ parameter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__KVIndracalibration() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncKVChannelEnergyAlpha(void) {
   /* KVChannelEnergyAlpha */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha));
   G__memfunc_setup("KVChannelEnergyAlpha",1962,G__G__KVIndracalibration_364_0_1, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVChannelEnergyAlpha",1962,G__G__KVIndracalibration_364_0_2, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - signal U 'KVDetector' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - volts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetSignal",906,G__G__KVIndracalibration_364_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - signal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVIndracalibration_364_0_7, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVChannelEnergyAlpha::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVIndracalibration_364_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVChannelEnergyAlpha::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVIndracalibration_364_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVChannelEnergyAlpha::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVIndracalibration_364_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVChannelEnergyAlpha::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVIndracalibration_364_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVIndracalibration_364_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVChannelEnergyAlpha::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVIndracalibration_364_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVChannelEnergyAlpha::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVIndracalibration_364_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVChannelEnergyAlpha::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVIndracalibration_364_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVChannelEnergyAlpha::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVChannelEnergyAlpha", 1962, G__G__KVIndracalibration_364_0_19, (int) ('i'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha), -1, 0, 1, 1, 1, 0, "u 'KVChannelEnergyAlpha' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVChannelEnergyAlpha", 2088, G__G__KVIndracalibration_364_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVIndracalibration_364_0_21, (int) ('u'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha), -1, 1, 1, 1, 1, 0, "u 'KVChannelEnergyAlpha' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVChannelVolt(void) {
   /* KVChannelVolt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt));
   G__memfunc_setup("KVChannelVolt",1279,G__G__KVIndracalibration_365_0_1, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVChannelVolt",1279,G__G__KVIndracalibration_365_0_2, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - signal U 'KVDetector' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - volts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("InvertDouble",1235,G__G__KVIndracalibration_365_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - volts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("SetGainRef",968,G__G__KVIndracalibration_365_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGainRef",956,G__G__KVIndracalibration_365_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSignal",906,G__G__KVIndracalibration_365_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - signal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVIndracalibration_365_0_10, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVChannelVolt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVIndracalibration_365_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVChannelVolt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVIndracalibration_365_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVChannelVolt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVIndracalibration_365_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVChannelVolt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVIndracalibration_365_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVIndracalibration_365_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVChannelVolt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVIndracalibration_365_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVChannelVolt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVIndracalibration_365_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVChannelVolt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVIndracalibration_365_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVChannelVolt::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVChannelVolt", 1279, G__G__KVIndracalibration_365_0_22, (int) ('i'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt), -1, 0, 1, 1, 1, 0, "u 'KVChannelVolt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVChannelVolt", 1405, G__G__KVIndracalibration_365_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVIndracalibration_365_0_24, (int) ('u'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVChannelVolt), -1, 1, 1, 1, 1, 0, "u 'KVChannelVolt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVVoltEnergy(void) {
   /* KVVoltEnergy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy));
   G__memfunc_setup("KVVoltEnergy",1200,G__G__KVIndracalibration_366_0_1, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVVoltEnergy",1200,G__G__KVIndracalibration_366_0_2, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy), -1, 0, 1, 1, 1, 0, "U 'KVDetector' - 0 - kvd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - volts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - volts", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - energy", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__KVIndracalibration_366_0_6, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVVoltEnergy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVIndracalibration_366_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVVoltEnergy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVIndracalibration_366_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVVoltEnergy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVIndracalibration_366_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVVoltEnergy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVIndracalibration_366_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVIndracalibration_366_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVVoltEnergy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVIndracalibration_366_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVVoltEnergy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVIndracalibration_366_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVVoltEnergy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVIndracalibration_366_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVVoltEnergy::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVVoltEnergy", 1200, G__G__KVIndracalibration_366_0_18, (int) ('i'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy), -1, 0, 1, 1, 1, 0, "u 'KVVoltEnergy' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVVoltEnergy", 1326, G__G__KVIndracalibration_366_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVIndracalibration_366_0_20, (int) ('u'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVVoltEnergy), -1, 1, 1, 1, 1, 0, "u 'KVVoltEnergy' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVLightEnergyCsIFull(void) {
   /* KVLightEnergyCsIFull */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull));
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - chan", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetDLight",860,G__G__KVIndracalibration_372_0_4, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVLightEnergyCsIFull",1941,G__G__KVIndracalibration_372_0_5, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVLightEnergyCsIFull",1941,G__G__KVIndracalibration_372_0_6, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull), -1, 0, 2, 1, 1, 0, 
"U 'KVDetector' - 0 - kvd i - 'Int_t' 0 'kExact' lightFormula", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Copy",411,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "u 'TObject' - 1 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,G__G__KVIndracalibration_372_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLightFormula",1530,G__G__KVIndracalibration_372_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - form", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightFormula",1518,G__G__KVIndracalibration_372_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dLightIntegral",1426,G__G__KVIndracalibration_372_0_11, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dLightIntegralApprox",2060,G__G__KVIndracalibration_372_0_12, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetDeltaFraction",1600,G__G__KVIndracalibration_372_0_13, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 - beta d - 'Double_t' 0 - beta_delta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLight",792,G__G__KVIndracalibration_372_0_14, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightApprox",1426,G__G__KVIndracalibration_372_0_15, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLightApproxSilicon",2147,G__G__KVIndracalibration_372_0_16, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 1, 0, 
"D - - 0 - x D - - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetZ",390,G__G__KVIndracalibration_372_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetA",365,G__G__KVIndracalibration_372_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetZ",378,G__G__KVIndracalibration_372_0_19, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetA",353,G__G__KVIndracalibration_372_0_20, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("sp_e",423,G__G__KVIndracalibration_372_0_22, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - - 0 - z d - - 0 - a "
"d - - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sp_n",432,G__G__KVIndracalibration_372_0_23, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"d - - 0 - z d - - 0 - a "
"d - - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVIndracalibration_372_0_24, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVLightEnergyCsIFull::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVIndracalibration_372_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLightEnergyCsIFull::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVIndracalibration_372_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVLightEnergyCsIFull::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVIndracalibration_372_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVLightEnergyCsIFull::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVIndracalibration_372_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVIndracalibration_372_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLightEnergyCsIFull::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVIndracalibration_372_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVLightEnergyCsIFull::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVIndracalibration_372_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVLightEnergyCsIFull::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVIndracalibration_372_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVLightEnergyCsIFull::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVLightEnergyCsIFull", 1941, G__G__KVIndracalibration_372_0_36, (int) ('i'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull), -1, 0, 1, 1, 1, 0, "u 'KVLightEnergyCsIFull' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVLightEnergyCsIFull", 2067, G__G__KVIndracalibration_372_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVIndracalibration_372_0_38, (int) ('u'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull), -1, 1, 1, 1, 1, 0, "u 'KVLightEnergyCsIFull' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncKVFunctionCal(void) {
   /* KVFunctionCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal));
   G__memfunc_setup("SetParametersWithFunction",2594,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVFunctionCal",1271,G__G__KVIndracalibration_384_0_2, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVFunctionCal",1271,G__G__KVIndracalibration_384_0_3, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal), -1, 0, 1, 1, 1, 0, "U 'TF1' - 0 - ff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVFunctionCal",1271,G__G__KVIndracalibration_384_0_4, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal), -1, 0, 2, 1, 1, 0, 
"U 'KVDetector' - 0 - kvd U 'TF1' - 0 - ff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("KVFunctionCal",1271,G__G__KVIndracalibration_384_0_5, 105, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal), -1, 0, 1, 1, 1, 0, "U 'KVDBParameterSet' - 0 - kvdbps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__G__KVIndracalibration_384_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ChangeCalibParameters",2101,G__G__KVIndracalibration_384_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVDBParameterSet' - 0 - kvdbps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetConversionType",1780,G__G__KVIndracalibration_384_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - from u 'TString' - 0 - to "
"u 'TString' - 0 - signal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetExpFormula",1327,G__G__KVIndracalibration_384_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 - formula d - 'Double_t' 0 '0' xmin "
"d - 'Double_t' 0 '0' xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetParameter",1229,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - i f - 'Float_t' 0 - par_val", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("WithPedestalCorrection",2278,G__G__KVIndracalibration_384_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - yes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFunction",1126,G__G__KVIndracalibration_384_0_12, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TF1), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Compute",733,G__G__KVIndracalibration_384_0_13, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compute",733,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Invert",632,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - e", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator()",957,(G__InterfaceMethod) NULL,100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetACQParam",998,G__G__KVIndracalibration_384_0_17, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVACQParam), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetACQParam",1010,G__G__KVIndracalibration_384_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'KVACQParam' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__KVIndracalibration_384_0_19, 85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&KVFunctionCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__KVIndracalibration_384_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVFunctionCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__KVIndracalibration_384_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&KVFunctionCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__KVIndracalibration_384_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&KVFunctionCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__KVIndracalibrationLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__KVIndracalibration_384_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__KVIndracalibration_384_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVFunctionCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__KVIndracalibration_384_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVFunctionCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__KVIndracalibration_384_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&KVFunctionCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__KVIndracalibration_384_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&KVFunctionCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("KVFunctionCal", 1271, G__G__KVIndracalibration_384_0_31, (int) ('i'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal), -1, 0, 1, 1, 1, 0, "u 'KVFunctionCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~KVFunctionCal", 1397, G__G__KVIndracalibration_384_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__G__KVIndracalibration_384_0_33, (int) ('u'), G__get_linked_tagnum(&G__G__KVIndracalibrationLN_KVFunctionCal), -1, 1, 1, 1, 1, 0, "u 'KVFunctionCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__KVIndracalibration() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__KVIndracalibration() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__KVIndracalibration() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__KVIndracalibrationLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVBase = { "KVBase" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVDetector = { "KVDetector" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVACQParam = { "KVACQParam" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_Binary_tlEunsignedsPchargR = { "Binary_t<unsigned char>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_Binary_tlEunsignedsPshortgR = { "Binary_t<unsigned short>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_Binary_tlEunsignedsPintgR = { "Binary_t<unsigned int>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_Binary_tlElongsPlonggR = { "Binary_t<long long>" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVCalibrator = { "KVCalibrator" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVChannelEnergyAlpha = { "KVChannelEnergyAlpha" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVChannelVolt = { "KVChannelVolt" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVVoltEnergy = { "KVVoltEnergy" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVIonRangeTableMaterial = { "KVIonRangeTableMaterial" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVLightEnergyCsIFull = { "KVLightEnergyCsIFull" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula = { "KVLightEnergyCsIFull::LightFormula" , 101 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVDBParameterSet = { "KVDBParameterSet" , 99 , -1 };
G__linked_taginfo G__G__KVIndracalibrationLN_KVFunctionCal = { "KVFunctionCal" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__KVIndracalibration() {
  G__G__KVIndracalibrationLN_TClass.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TBuffer.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMemberInspector.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TObject.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TNamed.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TString.tagnum = -1 ;
  G__G__KVIndracalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVBase.tagnum = -1 ;
  G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TF1.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVDetector.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVACQParam.tagnum = -1 ;
  G__G__KVIndracalibrationLN_Binary_tlEunsignedsPchargR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_Binary_tlEunsignedsPshortgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_Binary_tlEunsignedsPintgR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_Binary_tlElongsPlonggR.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVCalibrator.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVChannelEnergyAlpha.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVChannelVolt.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVVoltEnergy.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVIonRangeTableMaterial.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVLightEnergyCsIFull.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVDBParameterSet.tagnum = -1 ;
  G__G__KVIndracalibrationLN_KVFunctionCal.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__KVIndracalibration() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TString);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVBase);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TF1);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVDetector);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVACQParam);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_Binary_tlEunsignedsPchargR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_Binary_tlEunsignedsPshortgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_Binary_tlEunsignedsPintgR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_Binary_tlElongsPlonggR);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVCalibrator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVChannelEnergyAlpha),sizeof(KVChannelEnergyAlpha),-1,324864,"Alpha channel-energy calibration for Si and ChIo detectors.",G__setup_memvarKVChannelEnergyAlpha,G__setup_memfuncKVChannelEnergyAlpha);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVChannelVolt),sizeof(KVChannelVolt),-1,324864,"Electronic calibration for Si and ChIo detectors.",G__setup_memvarKVChannelVolt,G__setup_memfuncKVChannelVolt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVVoltEnergy),sizeof(KVVoltEnergy),-1,324864,"Volt-Energy calibration for Si and ChIo detectors.",G__setup_memvarKVVoltEnergy,G__setup_memfuncKVVoltEnergy);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVIonRangeTableMaterial);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFull),sizeof(KVLightEnergyCsIFull),-1,324864,"Light-energy calibration for CsI detectors using the full expression of Marian Parlog",G__setup_memvarKVLightEnergyCsIFull,G__setup_memfuncKVLightEnergyCsIFull);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVLightEnergyCsIFullcLcLLightFormula);
   G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVDBParameterSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__KVIndracalibrationLN_KVFunctionCal),sizeof(KVFunctionCal),-1,324864,"analytic function calibration E = f(channel)",G__setup_memvarKVFunctionCal,G__setup_memfuncKVFunctionCal);
}
extern "C" void G__cpp_setupG__KVIndracalibration(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__KVIndracalibration()");
  G__set_cpp_environmentG__KVIndracalibration();
  G__cpp_setup_tagtableG__KVIndracalibration();

  G__cpp_setup_inheritanceG__KVIndracalibration();

  G__cpp_setup_typetableG__KVIndracalibration();

  G__cpp_setup_memvarG__KVIndracalibration();

  G__cpp_setup_memfuncG__KVIndracalibration();
  G__cpp_setup_globalG__KVIndracalibration();
  G__cpp_setup_funcG__KVIndracalibration();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__KVIndracalibration();
  return;
}
class G__cpp_setup_initG__KVIndracalibration {
  public:
    G__cpp_setup_initG__KVIndracalibration() { G__add_setup_func("G__KVIndracalibration",(G__incsetup)(&G__cpp_setupG__KVIndracalibration)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__KVIndracalibration() { G__remove_setup_func("G__KVIndracalibration"); }
};
G__cpp_setup_initG__KVIndracalibration G__cpp_setup_initializerG__KVIndracalibration;

